<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo常用操作</title>
    <url>/alex-next/2021/04/18/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="hexo-操作"><a href="#hexo-操作" class="headerlink" title="hexo 操作"></a>hexo 操作</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br><span class="line">hexo algolia  <span class="comment"># 更新search库</span></span><br><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new post <span class="string">"title"</span>  <span class="comment"># 生成新文章：\source\_posts\title.md，可省略post</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo clean <span class="comment">#清除部署緩存</span></span><br><span class="line">hexo n == hexo new <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo s == hexo server <span class="comment">#本地访问,开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo d -g <span class="comment">#生成加部署</span></span><br><span class="line">hexo s -g <span class="comment">#生成加预览</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具配置</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis笔记</title>
    <url>/alex-next/2020/07/31/java%E5%90%8E%E7%AB%AF/mybatis/</url>
    <content><![CDATA[<p>项目gitee地址</p>
<blockquote>
<p><a href="https://gitee.com/alexander1/mybatis-notes" target="_blank" rel="noopener">https://gitee.com/alexander1/mybatis-notes</a></p>
<h1 id="一、Mybatis入门"><a href="#一、Mybatis入门" class="headerlink" title="一、Mybatis入门"></a>一、Mybatis入门</h1></blockquote>
<h2 id="1、导入pom依赖"><a href="#1、导入pom依赖" class="headerlink" title="1、导入pom依赖"></a>1、导入pom依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、mybatis-comfig-xml基本配置"><a href="#2、mybatis-comfig-xml基本配置" class="headerlink" title="2、mybatis-comfig.xml基本配置"></a>2、mybatis-comfig.xml基本配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//com.mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置文件修改--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置用于控制台输出sql日志。低版本的mybatis不支持logImpl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        设置下划线命名转换为驼峰命名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        为类型设置类型别名</span></span><br><span class="line"><span class="comment">            type:java类型，若只设置type，默认的别名就是类型，且不区分大小写</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type="com.com.mybatis.pojo.User" alias="User"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.mybatis.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    设置连接数据库的环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatisnote?serverTimezone=GMT%2B8&amp;amp;useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF8"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name="username" value="root"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;property name="password" value="mysql"/&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;com.mybatis.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;com.mybatis.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;com.mybatis.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;com.mybatis.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"./mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、创建UserMapper接口（pojo类是User）"><a href="#3、创建UserMapper接口（pojo类是User）" class="headerlink" title="3、创建UserMapper接口（pojo类是User）"></a>3、创建UserMapper接口（pojo类是User）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(String uid)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、创建UserMapper-xml"><a href="#4、创建UserMapper-xml" class="headerlink" title="4、创建UserMapper.xml"></a>4、创建UserMapper.xml</h2><p>每个UserMapper.xml对应着一个UserMapper接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//com.mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">         select * from user where uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5、简单测试"><a href="#5、简单测试" class="headerlink" title="5、简单测试"></a>5、简单测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">//getMapper():会通过动态代理动态生成UserMapper的代理实现类</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(mapper.getClass().getName());<span class="comment">//com.sun.proxy.$Proxy5</span></span><br><span class="line">        User user = mapper.getUserById(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、基本操作"><a href="#二、基本操作" class="headerlink" title="二、基本操作"></a>二、基本操作</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.增删的Integer表示受影响的行数，Boolean表示操作是否成功</span><br><span class="line"></span><br><span class="line">2.$&#123;&#125;底层用的是Statement,不可以防止sql注入,要注意单引号的问题</span><br><span class="line">#&#123;&#125;底层用的是PreparedStatement,可以防止sql注入，会自动加上单引号</span><br><span class="line"></span><br><span class="line">***********************************重要*************************************************</span><br><span class="line">不同的参数类型，$&#123;&#125;和#&#123;&#125;的不同取值方式：</span><br><span class="line">I.当传输参数为单个String或基本数据类型和包装类,即字面量</span><br><span class="line">#&#123;&#125;:可以以任意的名字获取参数值</span><br><span class="line">$&#123;&#125;:只能以$&#123;value&#125;或$&#123;_parameter&#125;</span><br><span class="line">II.当传输参数为javaBean时,#&#123;&#125;和$&#123;&#125;都可以通过属性名直接获取属性值，但要注意$&#123;&#125;的单引号问题</span><br><span class="line">III.当传输多个参数时,mybatis会默认将这些参数放在map集合中，</span><br><span class="line">两种方式：</span><br><span class="line">(1)键为arg0,arg1,arg2,arg3,arg4,...,argN-1</span><br><span class="line">(2)键为param1,param2,...,paramN</span><br><span class="line">#&#123;&#125;:#&#123;arg0&#125;、#&#123;arg1&#125;或者#&#123;param1&#125;、#&#123;param2&#125;</span><br><span class="line">$&#123;&#125;:$&#123;param1&#125;、$&#123;param2&#125;,注意单引号的问题</span><br><span class="line">IV.当传输map参数时,#&#123;&#125;和$&#123;&#125;都可以通过map的键直接获取属性值，但要注意$&#123;&#125;的单引号问题</span><br><span class="line">V.命名参数，可以通过@Param为map集合指定键的名字</span><br><span class="line">VI.当传输参数为List或Array,mybatis会将他们放在map中，</span><br><span class="line">List以list为键，Array以array为键</span><br><span class="line">***********************************重要*************************************************    </span><br><span class="line"></span><br><span class="line">3.useGeneratedKeys=&quot;true&quot; keyProperty=&quot;eid&quot;</span><br><span class="line">useGeneratedKeys默认为true,keyProperty将新添加的id赋值给eid</span><br><span class="line">useGeneratedKeys可以试用自动生成的主键</span><br><span class="line"></span><br><span class="line">注意：可以有注释但注释中不能有#+大括号，否则会报错</span><br><span class="line"></span><br><span class="line">mybatis的返回值的封装方式是先构造一个无参的对象，然后通过set方法一个一个的往里面set值，所以如果不提供无参构造方法，就会报上述错误，同样的，针对需要的属性值也必须提供get／set方法。</span><br></pre></td></tr></table></figure>
<h1 id="三、多对一多表查询"><a href="#三、多对一多表查询" class="headerlink" title="三、多对一多表查询"></a>三、多对一多表查询</h1><p>Emp.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    Integer eid;</span><br><span class="line">    String ename;</span><br><span class="line">    Integer age;</span><br><span class="line">    String sex;</span><br><span class="line">    Dept dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Dept.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    Integer did;</span><br><span class="line">    String dname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1、级联方式"><a href="#1、级联方式" class="headerlink" title="1、级联方式"></a>1、级联方式</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empMap"</span> <span class="attr">type</span>=<span class="string">"emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"eid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"dept.did"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dept.dname"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllEmp"</span> <span class="attr">resultMap</span>=<span class="string">"empMap"</span>&gt;</span></span><br><span class="line">    select * from emp e left join dept d on e.did = d.did</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、association"><a href="#2、association" class="headerlink" title="2、association"></a>2、association</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empMap"</span> <span class="attr">type</span>=<span class="string">"emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"eid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">javaType</span>=<span class="string">"Dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"did"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllEmp"</span> <span class="attr">resultMap</span>=<span class="string">"empMap"</span>&gt;</span></span><br><span class="line">    select * from emp e left join dept d on e.did = d.did</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、引用其他的select语句的分步查询"><a href="#3、引用其他的select语句的分步查询" class="headerlink" title="3、引用其他的select语句的分步查询"></a>3、引用其他的select语句的分步查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    resultMap:引用其他的select语句的分布查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empMapStep"</span> <span class="attr">type</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"eid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        下面的column属性设置</span></span><br><span class="line"><span class="comment">     getEmpStep查出来的did给getDeptByDid当做参数查出dept</span></span><br><span class="line"><span class="comment">     这里的column就相当于getDeptByDid的parameter属性</span></span><br><span class="line"><span class="comment">     传进去的是getEmpStep查出来的did</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">select</span>=<span class="string">"com.mybatis.mapper.DeptMapper.getDeptByDid"</span> <span class="attr">column</span>=<span class="string">"did"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpStep"</span> <span class="attr">resultMap</span>=<span class="string">"empMapStep"</span>&gt;</span></span><br><span class="line">    select eid,ename,age,sex,did from emp where eid = #&#123;eid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>com.mybatis.mapper.DeptMapper.getDeptByDid：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptByDid"</span> <span class="attr">resultType</span>=<span class="string">"dept"</span>&gt;</span></span><br><span class="line">    select did,dname from dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、一对多多表查询"><a href="#四、一对多多表查询" class="headerlink" title="四、一对多多表查询"></a>四、一对多多表查询</h1><p>Emp.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    Integer eid;</span><br><span class="line">    String ename;</span><br><span class="line">    Integer age;</span><br><span class="line">    String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Dept.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    Integer did;</span><br><span class="line">    String dname;</span><br><span class="line">    List&lt;Emp&gt; emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="1、Collection"><a href="#1、Collection" class="headerlink" title="1、Collection"></a>1、Collection</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptMap"</span> <span class="attr">type</span>=<span class="string">"Dept"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"did"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    collection:处理一对多的类型</span></span><br><span class="line"><span class="comment">        ofType:list中放的类型</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"eid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"ename"</span> <span class="attr">property</span>=<span class="string">"ename"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">property</span>=<span class="string">"sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getDeptEmpsByDid"</span> <span class="attr">resultMap</span>=<span class="string">"deptMap"</span>&gt;</span></span><br><span class="line">    select d.did,d.dname,e.eid,e.ename,e.age,e.sex from dept d</span><br><span class="line">    left join emp e on d.did=e.did where d.did=#&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、引用其他的select语句的分步查询"><a href="#2、引用其他的select语句的分步查询" class="headerlink" title="2、引用其他的select语句的分步查询"></a>2、引用其他的select语句的分步查询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptMapStep"</span> <span class="attr">type</span>=<span class="string">"Dept"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"did"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dname"</span> <span class="attr">property</span>=<span class="string">"dname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        column中的did表示getEmpListByDid要通过getOnlyDeptByDid查出的did进行查询--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        这里的column底层是map--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        fetchType设置局部懒加载属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">select</span>=<span class="string">"com.mybatis.mapper.EmpDeptMapper.getEmpListByDid"</span> <span class="attr">column</span>=<span class="string">"&#123;myTestDid=did&#125;"</span> <span class="attr">fetchType</span>=<span class="string">"eager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOnlyDeptByDid"</span> <span class="attr">resultMap</span>=<span class="string">"deptMapStep"</span>&gt;</span></span><br><span class="line">    select did,dname from dept where did = #&#123;did&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpListByDid"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    select eid,ename,age,sex from emp where did = #&#123;myTestDid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="五、动态Sql"><a href="#五、动态Sql" class="headerlink" title="五、动态Sql"></a>五、动态Sql</h1><h2 id="1、trim（set，where）"><a href="#1、trim（set，where）" class="headerlink" title="1、trim（set，where）"></a>1、trim（set，where）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpListByMoreCondition"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"empColumns"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--where标签能去掉开头多余的and,但去除不了末尾多余的and</span></span><br><span class="line"><span class="comment">        trim截取并拼接</span></span><br><span class="line"><span class="comment">        prefix:在操作的sql语句前加入某些内容</span></span><br><span class="line"><span class="comment">        prefixOverrides:把操作的sql语句前的某些内容去掉 |:表示既要处理and,又要处理or</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"eid!=null"</span>&gt;</span>and eid=#&#123;eid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null and ename!=''"</span>&gt;</span>and ename=#&#123;ename&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span>and age=#&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--等于的时候只能是数值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       &lt;if test="sex==1 or sex==0"&gt;and sex=#&#123;sex&#125;&lt;/if&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、choose"><a href="#2、choose" class="headerlink" title="2、choose"></a>2、choose</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpListByChoose"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    select eid,ename,age,sex from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--when就是if或else if,otherwise就是else--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"eid!=null"</span>&gt;</span></span><br><span class="line">                eid=#&#123;eid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"ename!=null and ename!=''"</span>&gt;</span></span><br><span class="line">                ename=#&#123;ename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">                age=#&#123;age&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                sex=#&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、foreach"><a href="#3、foreach" class="headerlink" title="3、foreach"></a>3、foreach</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        foreach对一个数组或集合进行遍历</span></span><br><span class="line"><span class="comment">        collection:指定要遍历的集合或数组</span></span><br><span class="line"><span class="comment">        item:设置别名</span></span><br><span class="line"><span class="comment">        close:设置循环体的结束内容</span></span><br><span class="line"><span class="comment">        open:设置循环体的开始内容</span></span><br><span class="line"><span class="comment">        separator:设置每一次循环之间的分隔符</span></span><br><span class="line"><span class="comment">        index:若遍历的是list,index代表下标;若遍历的是map,index代表键</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第二种方式    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteMoreByList"</span>&gt;</span></span><br><span class="line">    delete from emp where eid in</span><br><span class="line">    <span class="comment">&lt;!--默认:List以list为键，Array以array为键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"eid"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;eid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertMoreByArray"</span>&gt;</span></span><br><span class="line">    insert into emp values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"emp"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        (null,#&#123;emp.ename&#125;,#&#123;emp.age&#125;,#&#123;emp.sex&#125;,1)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="4、sql，include"><a href="#4、sql，include" class="headerlink" title="4、sql，include"></a>4、sql，include</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置一段sql片段，可以被当前映射文件所有的sql语句所访问--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"empColumns"</span>&gt;</span></span><br><span class="line">    select eid,ename,age,sex,did from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpListByMoreCondition"</span> <span class="attr">resultType</span>=<span class="string">"Emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"empColumns"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--where标签能去掉开头多余的and,但去除不了末尾多余的and</span></span><br><span class="line"><span class="comment">            trim截取并拼接</span></span><br><span class="line"><span class="comment">            prefix:在操作的sql语句前加入某些内容</span></span><br><span class="line"><span class="comment">            prefixOverrides:把操作的sql语句前的某些内容去掉 |:表示既要处理and,又要处理or</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"eid!=null"</span>&gt;</span>and eid=#&#123;eid&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ename!=null and ename!=''"</span>&gt;</span>and ename=#&#123;ename&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span>and age=#&#123;age&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--等于的时候只能是数值--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       &lt;if test="sex==1 or sex==0"&gt;and sex=#&#123;sex&#125;&lt;/if&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>详情：参考<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h1 id="六、类型转换器"><a href="#六、类型转换器" class="headerlink" title="六、类型转换器"></a>六、类型转换器</h1><p>参考<a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>springMVC笔记</title>
    <url>/alex-next/2020/07/27/java%E5%90%8E%E7%AB%AF/SpringMVC/</url>
    <content><![CDATA[<p>项目gitee地址</p>
<blockquote>
<p><a href="https://gitee.com/alexander1/spring-mvc-notes" target="_blank" rel="noopener">https://gitee.com/alexander1/spring-mvc-notes</a></p>
<h1 id="一、SpringMVC入门"><a href="#一、SpringMVC入门" class="headerlink" title="一、SpringMVC入门"></a>一、SpringMVC入门</h1></blockquote>
<p>springMVC的搭建过程：<br>1.导入jar<br>2.在web.xml中配置springMVC的核心控制器DispatcherServlet<br>作用：加载springMVC的配置文件<br>3.创建一个POJO，在此类上加@Controller<br>4.在控制层中，在方法上设置@RequestMapping</p>
<h2 id="1、导入jar"><a href="#1、导入jar" class="headerlink" title="1、导入jar"></a>1、导入jar</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、在web-xml中配置springMVC的核心控制器DispatcherServlet"><a href="#2、在web-xml中配置springMVC的核心控制器DispatcherServlet" class="headerlink" title="2、在web.xml中配置springMVC的核心控制器DispatcherServlet"></a>2、在web.xml中配置springMVC的核心控制器DispatcherServlet</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/表示拦截除*.jsp之外的请求，静态资源也会拦截，也就不会进入spring的DispatcherServlet类。</span><br><span class="line">/*表示拦截所有请求</span><br></pre></td></tr></table></figure>
<h2 id="3、配置视图解析器-扫描"><a href="#3、配置视图解析器-扫描" class="headerlink" title="3、配置视图解析器+扫描"></a>3、配置视图解析器+扫描</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.springmvc.test"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="二、RequestMapping"><a href="#二、RequestMapping" class="headerlink" title="二、RequestMapping"></a>二、RequestMapping</h1><h2 id="1、-RequestParam"><a href="#1、-RequestParam" class="headerlink" title="1、@RequestParam"></a>1、@RequestParam</h2><p>@RequestParam:</p>
<ul>
<li>value:当不满足赋值条件是，可以试用value属性，指定映射关系</li>
<li>required:设置形参是否必须被赋值，默认为true,必须赋值，若设置为false,则不必须赋值，因此形参的值为null</li>
<li>defaultValue:若形参所获得的值为null,则设置一个默认值</li>
</ul>
<h2 id="2、-RequestHeader"><a href="#2、-RequestHeader" class="headerlink" title="2、@RequestHeader"></a>2、@RequestHeader</h2><p>在处理请求的方法上，获取请求头信息，用法和@RequestParam用法一致</p>
<h2 id="3、-PathVariable"><a href="#3、-PathVariable" class="headerlink" title="3、@PathVariable"></a>3、@PathVariable</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以前：localhost:8080/testRest?id=1001&amp;username=admin</span></span><br><span class="line"><span class="comment">     * 现在：localhost:8080/testRest/1001/admin</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span> 用来获取路径中占位符的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRest/&#123;id&#125;/&#123;username&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRest</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id,@<span class="title">PathVariable</span><span class="params">(<span class="string">"username"</span>)</span>String username)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id:"</span>+id+<span class="string">",username:"</span>+username);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、RESTFUL风格"><a href="#三、RESTFUL风格" class="headerlink" title="三、RESTFUL风格"></a>三、RESTFUL风格</h1><p>RESTFUL：</p>
<ul>
<li>method：用来设置请求方式，只有客户端发送请求的方式和method的值一直，才能处理请求</li>
<li>请求方式：GET 查询 POST 添加 PUT 修改 DELETE 删除</li>
<li>params:用来设置客户端传到服务器的数据</li>
<li>headers:用来设置请求头信息,所发送的请求头信息一定要和headers属性一致</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置Restful风格的过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--过滤所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="前台"><a href="#前台" class="headerlink" title="前台"></a>前台</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"testREST/1001"</span>&gt;</span>测试GET<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"测试POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"PUT"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"测试PUT"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"testREST"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"DELETE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"测试DELETE"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"测试AJAX"</span> <span class="attr">onclick</span>=<span class="string">"test()"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"testAjax_DELETE"</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"DELETE"</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line">                id:1001</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            dataType:<span class="string">"json"</span>,<span class="comment">//预期服务器返回结果类型</span></span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line">                alert(obj)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testREST/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"GET,id="</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testREST"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"POST"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果想跳到success.jsp</span></span><br><span class="line"><span class="comment">     * 解决办法：</span></span><br><span class="line"><span class="comment">     * 1.加入 <span class="doctag">@ResponseBody</span> 注解。</span></span><br><span class="line"><span class="comment">     * 2.请求先转给一个Controller,再返回jsp页面。</span></span><br><span class="line"><span class="comment">     * 3.tomcat换到7.0以及以下版本。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testREST"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"PUT...."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testREST"</span>,method = RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"DELETE...."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"testAjax_DELETE"</span>,method = RequestMethod.DELETE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAjax_DELETE</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id="</span>+id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增加：点击增加超链接按钮，通过GET请求方式到服务器，用请求转发的方式跳转到相应的增加页面，</span><br><span class="line">增加完成后通过POST请求方式到服务器，用重定向的方式跳转的list展示页面</span><br><span class="line"></span><br><span class="line">修改：点击修改超链接按钮，通过GET请求方式到服务器，用请求转发的方式跳转到相应的修改页面</span><br><span class="line">并传给修改页面修改之前的实体类信息，</span><br><span class="line">修改完成后通过PUT请求方式到服务器，用重定向的方式跳转的list展示页面</span><br><span class="line"></span><br><span class="line">删除：通过点击超链接按钮，为form表单赋值，并提交表单</span><br><span class="line">$(function()&#123;</span><br><span class="line">    $(<span class="string">".del"</span>).click(function()&#123;</span><br><span class="line">        <span class="keyword">if</span>(confirm(<span class="string">'确认删除吗'</span>))&#123;</span><br><span class="line">            $(<span class="string">'form'</span>).attr(<span class="string">'action'</span>,<span class="keyword">this</span>.href).submit()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意！！！:return false会将超链接的默认行为取消</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">通过DELETE方式请求，并重定向的方式跳转的list展示页面</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对post请求来说</span><br><span class="line">条件：</span><br><span class="line">1.POST（后台）</span><br><span class="line">2.参数_method（前台）</span><br><span class="line">若不符合条件：-》POST</span><br><span class="line">如符合条件：经过转换之后，真正的请求方式，就是_method的值</span><br></pre></td></tr></table></figure>
<h1 id="四、往作用域中放值"><a href="#四、往作用域中放值" class="headerlink" title="四、往作用域中放值"></a>四、往作用域中放值</h1><h2 id="1、map"><a href="#1、map" class="headerlink" title="1、map"></a>1、map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param"</span>,method = RequestMethod.POST)</span><br><span class="line">    <span class="comment">//DispatcherServlet会调用此函数，并为HttpServletRequest赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        map.put(<span class="string">"username"</span>,<span class="string">"admin"</span>);<span class="comment">//向request作用域中放值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、Model"><a href="#2、Model" class="headerlink" title="2、Model"></a>2、Model</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//DispatcherServlet会调用此函数，并为HttpServletRequest赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">param</span><span class="params">(Model model,String name,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(request.getContextPath());</span><br><span class="line">    model.addAttribute(<span class="string">"name"</span>,name);<span class="comment">//向request作用域中放值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、ModelAndView"><a href="#3、ModelAndView" class="headerlink" title="3、ModelAndView"></a>3、ModelAndView</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/param"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="comment">//DispatcherServlet会调用此函数，并为HttpServletRequest赋值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">param</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    <span class="comment">//在request中放值</span></span><br><span class="line">    mav.addObject(<span class="string">"username"</span>,<span class="string">"root"</span>);</span><br><span class="line">    mav.setViewName(<span class="string">"success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mav;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>==<strong>三种方式实现作用域放值,其实底层实现都差不多,最终都会封装成ModelAndView，并且通过ViewResolver视图解析器处理</strong>==</p>
<h1 id="五、静态资源处理"><a href="#五、静态资源处理" class="headerlink" title="五、静态资源处理"></a>五、静态资源处理</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    先交给自己配置的DispatcherServlet处理请求，</span></span><br><span class="line"><span class="comment">    当DispatcherServlet没有相应的处理器，就交给tomcat的DefaultServlet处理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>在springMVC-servlet.xml中配置<mvc:default-servlet-handler>后，会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，==它会对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。==</mvc:default-servlet-handler></p>
<p>不过有几点需要注意：</p>
<p>1.一般Web应用服务器默认的Servlet名称是”default”，因此DefaultServletHttpRequestHandler可以找到它。如果你所有的Web应用服务器的默认Servlet名称不是”default”，则需要通过该标签的default-servlet-name属性显示指定。</p>
<p>2.配置该标签以后，@RequestMapping会失效，所以非静态资源请求就不能映射到相应的方法，所以需要加<mvc:annotation-driven></mvc:annotation-driven></p>
<h1 id="六、设置编码过滤器"><a href="#六、设置编码过滤器" class="headerlink" title="六、设置编码过滤器"></a>六、设置编码过滤器</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="七、上传与下载"><a href="#七、上传与下载" class="headerlink" title="七、上传与下载"></a>七、上传与下载</h1><h2 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h2><h3 id="①、ResponseEntity-不常用"><a href="#①、ResponseEntity-不常用" class="headerlink" title="①、ResponseEntity(不常用)"></a>①、ResponseEntity(不常用)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/down"</span>)</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; down(HttpSession session) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//获取下载文件的路径,从服务器上下载图片,要找到图片在服务器中的真实位置</span></span><br><span class="line">    String realPath = session.getServletContext().getRealPath(<span class="string">"img"</span>);</span><br><span class="line">    String finalPath = realPath + File.separator+<span class="string">"0.jpg"</span>;</span><br><span class="line">    InputStream is = <span class="keyword">new</span> FileInputStream(finalPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//available():获取输入流所读取的文件的最大字节数</span></span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">    is.read(b);</span><br><span class="line">    <span class="comment">//请求头</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename=a.jpg"</span>);</span><br><span class="line">    HttpStatus status =  HttpStatus.OK;</span><br><span class="line">    ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; entity = <span class="keyword">new</span> ResponseEntity&lt;&gt;(b,headers,status);</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> entity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="②、IOUtils下载单个文件"><a href="#②、IOUtils下载单个文件" class="headerlink" title="②、IOUtils下载单个文件"></a>②、IOUtils下载单个文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>FileUpload.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> alex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 下载单个文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 14:49 2020/8/5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [minioClient, bucketname, singleFile, request, response]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downLoadSingleFile</span><span class="params">(MinioClient minioClient, String bucketname, String singleFile, HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String userAgent = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">        String filename_c = singleFile;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="comment">// IE 8 至 IE 10</span></span><br><span class="line">            userAgent.toUpperCase().contains(<span class="string">"MSIE"</span>) ||</span><br><span class="line">            <span class="comment">// IE 11</span></span><br><span class="line">            userAgent.contains(<span class="string">"Trident/7.0"</span>)) &#123;</span><br><span class="line">            filename_c = java.net.URLEncoder.encode(singleFile, <span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filename_c = <span class="keyword">new</span> String(singleFile.getBytes(<span class="string">"UTF-8"</span>), <span class="string">"iso-8859-1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        filename_c = filename_c.replace(<span class="string">","</span>,<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">        InputStream inputStream = minioClient.getObject(bucketname, singleFile);</span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + filename_c);</span><br><span class="line">        response.setContentType(<span class="string">"application/octet-stream"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        IOUtils.copy(inputStream, response.getOutputStream());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Description</span>(<span class="string">"文件下载"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/downfile"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(Integer id, String singleFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MinioClient minioClient = <span class="keyword">new</span> MinioClient(url, user, password);</span><br><span class="line">    <span class="keyword">if</span> (id != <span class="keyword">null</span>) &#123;<span class="comment">// 单个文件</span></span><br><span class="line">        FileUpload.downLoadSingleFile(minioClient, bucketname, singleFile, request, response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 多个文件</span></span><br><span class="line">        List&lt;InputStream&gt; isList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String filename : fileNames) &#123;</span><br><span class="line">            InputStream inputStream = minioClient.getObject(bucketname, filename);</span><br><span class="line">            isList.add(inputStream);</span><br><span class="line">        &#125;</span><br><span class="line">        FileUpload.downloadZipFiles(response, isList, fileNames, <span class="string">"package.zip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载单个文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">url</span>)</span>&#123;</span><br><span class="line">	  <span class="keyword">const</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">	  iframe.style.display = <span class="string">"none"</span>; <span class="comment">// 防止影响页面</span></span><br><span class="line">	  iframe.style.height = <span class="number">0</span>; <span class="comment">// 防止影响页面</span></span><br><span class="line">	  iframe.src = url; </span><br><span class="line">	<span class="comment">// 这一行必须，iframe挂在到dom树上才会发请求</span></span><br><span class="line">	  <span class="built_in">document</span>.body.appendChild(iframe); </span><br><span class="line">	  <span class="comment">// 5分钟之后删除</span></span><br><span class="line">	  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">	    iframe.remove();</span><br><span class="line">	  &#125;, <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载多个文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dload</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> rows = $(<span class="string">"#table"</span>).bootstrapTable(<span class="string">"getSelections"</span>); <span class="comment">// 获得要下载的文件</span></span><br><span class="line">	<span class="keyword">if</span>(id!==<span class="literal">undefined</span>)&#123;<span class="comment">//下载单个文件</span></span><br><span class="line">		<span class="keyword">var</span> data = $(<span class="string">"#table"</span>).bootstrapTable(<span class="string">'getRowByUniqueId'</span>,id);</span><br><span class="line">		rows = data</span><br><span class="line">		downloadFile(<span class="string">"/file/downfile?id="</span>+rows.id+<span class="string">"&amp;singleFile="</span>+rows.filename)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">let</span> listFileNames = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows.length; i++)&#123;</span><br><span class="line">		listFileNames = listFileNames+rows[i].filename+<span class="string">","</span></span><br><span class="line">	&#125;</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		url:<span class="string">'/file/listFileNames'</span>,<span class="comment">//为了防止get方式参数大小溢出，所以用ajax另外处理listFileNames</span></span><br><span class="line">		data:&#123;</span><br><span class="line">			<span class="string">"listFileNames"</span>:listFileNames</span><br><span class="line">		&#125;,</span><br><span class="line">		type : <span class="string">"post"</span>,</span><br><span class="line">		dataType:<span class="string">'json'</span>,</span><br><span class="line">		success:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(data)</span><br><span class="line">			<span class="keyword">var</span> curWwwPath=<span class="built_in">window</span>.document.location.href;</span><br><span class="line">			<span class="keyword">var</span> pathName=<span class="built_in">window</span>.document.location.pathname;</span><br><span class="line">			<span class="keyword">var</span> pos=curWwwPath.indexOf(pathName);</span><br><span class="line">			<span class="keyword">var</span> localhostPath=curWwwPath.substring(<span class="number">0</span>,pos);</span><br><span class="line">			<span class="keyword">var</span> path =localhostPath +<span class="string">"/file/downfile"</span>;</span><br><span class="line">			<span class="built_in">window</span>.open(path);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="③、使用ZipOutputStream批量下载-zip"><a href="#③、使用ZipOutputStream批量下载-zip" class="headerlink" title="③、使用ZipOutputStream批量下载(zip)"></a>③、使用ZipOutputStream批量下载(zip)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> alex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 把文件打成压缩包并输出到客户端浏览器中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 14:43 2020/8/4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [response, srcFiles, zipFileName]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downloadZipFiles</span><span class="params">(HttpServletResponse response, List&lt;InputStream&gt; isList,String[] fileNames, String zipFileName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response.reset(); <span class="comment">// 重点突出</span></span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>); <span class="comment">// 重点突出</span></span><br><span class="line">        response.setContentType(<span class="string">"application/x-msdownload"</span>); <span class="comment">// 不同类型的文件对应不同的MIME类型 // 重点突出</span></span><br><span class="line">        <span class="comment">// 对文件名进行编码处理中文问题</span></span><br><span class="line">        zipFileName = <span class="keyword">new</span> String(zipFileName.getBytes(), StandardCharsets.UTF_8);</span><br><span class="line">        <span class="comment">// inline在浏览器中直接显示，不提示用户下载</span></span><br><span class="line">        <span class="comment">// attachment弹出对话框，提示用户进行下载保存本地</span></span><br><span class="line">        <span class="comment">// 默认为inline方式</span></span><br><span class="line">        response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + zipFileName);</span><br><span class="line">        <span class="comment">//            response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(zipFileName, "UTF-8"));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// --设置成这样可以不用保存在本地，再输出， 通过response流输出,直接输出到客户端浏览器中。</span></span><br><span class="line">        ZipOutputStream zos = <span class="keyword">new</span> ZipOutputStream(response.getOutputStream());</span><br><span class="line">        zipFile(isList, zos,fileNames);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> alex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 14:42 2020/8/4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [filePaths, zos]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(List&lt;InputStream&gt; isList, ZipOutputStream zos, String[] fileNames)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//设置读取数据缓存大小</span></span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//循环读取文件路径集合，获取每一个文件的路径</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;fileNames.length;++i) &#123;</span><br><span class="line">            fileNames[i].replaceAll(<span class="string">","</span>,<span class="string">"_"</span>);</span><br><span class="line">            fileNames[i].replaceAll(<span class="string">"."</span>,<span class="string">"_"</span>);</span><br><span class="line">            <span class="comment">//将文件写入zip内，即将文件进行打包</span></span><br><span class="line">            zos.putNextEntry(<span class="keyword">new</span> ZipEntry(fileNames[i]));</span><br><span class="line">            <span class="comment">//写入文件的方法，同上</span></span><br><span class="line">            <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//设置读取数据缓存大小</span></span><br><span class="line">            <span class="keyword">while</span> ((size = isList.get(i).read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                zos.write(buffer, <span class="number">0</span>, size);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭输入输出流</span></span><br><span class="line">            zos.closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != zos) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                zos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、上传"><a href="#2、上传" class="headerlink" title="2、上传"></a>2、上传</h2><p>xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    将客户端的File文件，处理为MultipartFile</span></span><br><span class="line"><span class="comment">    文件解析器的id必须设置为multipartResolver</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name="maxUploadSize" value="88888"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="①、自己手写"><a href="#①、自己手写" class="headerlink" title="①、自己手写"></a>①、自己手写</h3><p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/up_old"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">up_old</span><span class="params">(String desc, MultipartFile uploadFile,HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传文件的名称</span></span><br><span class="line">    String fileName = uploadFile.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取服务器下项目的文件路径</span></span><br><span class="line">    String path = session.getServletContext().getRealPath(<span class="string">"photo"</span>)+File.separator+fileName;</span><br><span class="line">    File file = <span class="keyword">new</span> File(session.getServletContext().getRealPath(<span class="string">"photo"</span>));</span><br><span class="line">    <span class="keyword">if</span> (!file.exists())&#123;<span class="comment">//不存在就创建</span></span><br><span class="line">        file.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取输入流</span></span><br><span class="line">    InputStream is = uploadFile.getInputStream();</span><br><span class="line">    <span class="comment">//获取输出流</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    <span class="keyword">while</span> ((i = is.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//最后一次不一定有4096个字节</span></span><br><span class="line">        fos.write(b,<span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    fos.close();</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"uploadSuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/up"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"uploadFile"</span>/&gt;</span></span><br><span class="line">    描述：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"desc"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="②、使用MultipartFile-transferTo-File-dest"><a href="#②、使用MultipartFile-transferTo-File-dest" class="headerlink" title="②、使用MultipartFile.transferTo(File dest)"></a>②、使用MultipartFile.transferTo(File dest)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/up"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">up</span><span class="params">(String desc, MultipartFile uploadFile,HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取上传文件的名称</span></span><br><span class="line">    String fileName = uploadFile.getOriginalFilename();</span><br><span class="line">    String finalFileName = UUID.randomUUID()+fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    <span class="comment">//获取服务器下项目的文件路径</span></span><br><span class="line">    String path = session.getServletContext().getRealPath(<span class="string">"photo"</span>)+File.separator+finalFileName;</span><br><span class="line">    File directory = <span class="keyword">new</span> File(session.getServletContext().getRealPath(<span class="string">"photo"</span>));</span><br><span class="line">    <span class="keyword">if</span> (!directory.exists())&#123;<span class="comment">//不存在就创建</span></span><br><span class="line">        directory.mkdir();</span><br><span class="line">    &#125;</span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    uploadFile.transferTo(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"uploadSuccess"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>多个文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MultipartFile[] uploadFile</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;/up&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">头像：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot;/&gt;</span><br><span class="line">头像2：&lt;input type=&quot;file&quot; name=&quot;uploadFile&quot;/&gt;</span><br><span class="line">描述：&lt;input type=&quot;text&quot; name=&quot;desc&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h3 id="③、使用bootstrap-fileinput"><a href="#③、使用bootstrap-fileinput" class="headerlink" title="③、使用bootstrap-fileinput"></a>③、使用bootstrap-fileinput</h3><p>导入相关依赖</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为上传添加技能</span></span><br><span class="line">initFileInput(<span class="string">"fireName"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initFileInput</span>(<span class="params">ctrlName</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> control = $(<span class="string">'#'</span> + ctrlName);</span><br><span class="line">	control.fileinput(&#123;</span><br><span class="line">		language: <span class="string">'zh'</span>, <span class="comment">// 设置语言</span></span><br><span class="line">		uploadUrl: <span class="string">"/file/upload"</span>, <span class="comment">// 上传的地址</span></span><br><span class="line">		allowedPreviewTypes:[<span class="string">'image'</span>],<span class="comment">// 配置所有的被预览文件类型</span></span><br><span class="line">		allowedFileExtensions: [<span class="string">'xls'</span>, <span class="string">'xlsx'</span>, <span class="string">'pdf'</span>,<span class="string">'doc'</span>,<span class="string">'docx'</span>,<span class="string">'jpg'</span>,<span class="string">'jpeg'</span>,<span class="string">'png'</span>],<span class="comment">// 接收的文件后缀</span></span><br><span class="line">		<span class="comment">// uploadExtraData:&#123;"id": 1, "fileName":'123.mp3'&#125;,</span></span><br><span class="line">		uploadAsync: <span class="literal">true</span>, <span class="comment">// 默认异步上传</span></span><br><span class="line">		showUpload: <span class="literal">true</span>, <span class="comment">// 是否显示上传按钮</span></span><br><span class="line">		showRemove : <span class="literal">false</span>, <span class="comment">// 显示移除按钮</span></span><br><span class="line">		showCaption:<span class="literal">true</span>, <span class="comment">// 是否显示标题</span></span><br><span class="line">		dropZoneEnabled:<span class="literal">true</span>,<span class="comment">// 是否显示拖拽区域</span></span><br><span class="line">		showPreview : <span class="literal">true</span>, <span class="comment">// 是否显示预览</span></span><br><span class="line">		showCaption: <span class="literal">false</span>,<span class="comment">// 是否显示标题</span></span><br><span class="line">		browseClass: <span class="string">"btn btn-primary"</span>, <span class="comment">// 按钮样式</span></span><br><span class="line">		maxFileSize:<span class="number">1024000</span>,<span class="comment">// 允许文件大小单位KB</span></span><br><span class="line"><span class="comment">// maxFileCount: 5, // 允许同时上传的最大文件个数</span></span><br><span class="line">		enctype: <span class="string">'multipart/form-data'</span>,</span><br><span class="line">		validateInitialCount:<span class="literal">true</span>,</span><br><span class="line"><span class="comment">// msgFilesTooMany: "选择上传的文件数量(&#123;n&#125;) 超过允许的最大数值&#123;m&#125;！"</span></span><br><span class="line">		uploadExtraData: <span class="function"><span class="keyword">function</span>(<span class="params">previewId, index</span>) </span>&#123;   <span class="comment">//额外参数的关键点</span></span><br><span class="line">			<span class="keyword">var</span> parameter = &#123;</span><br><span class="line">				<span class="string">"pageId"</span>:Id,</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">return</span> parameter;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;).on(<span class="string">'filepreupload'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, data, previewId, index</span>) </span>&#123;     <span class="comment">// 上传中</span></span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'文件正在上传'</span>);</span><br><span class="line">	&#125;).on(<span class="string">"fileuploaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, file, previewId, index</span>) </span>&#123;    <span class="comment">// 一个文件上传成功</span></span><br><span class="line">		<span class="comment">// file.response得到后台处理后的结果</span></span><br><span class="line">		<span class="comment">// file.filescount .得到文件个数</span></span><br><span class="line">		<span class="comment">// index，当前文件的下标</span></span><br><span class="line">	&#125;).on(<span class="string">'fileerror'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event, data, msg</span>) </span>&#123;  <span class="comment">// 一个文件上传失败</span></span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'文件上传失败！'</span>+data.status);</span><br><span class="line">		swal(<span class="string">"文件上传失败！"</span>,<span class="string">""</span>,<span class="string">"error"</span>);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后台</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 上传多个文件 这个其实一次只处理一个文件，但接收却是用MultipartFile[] file，匪夷所思</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: upload</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="doctag">@param</span>  file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="doctag">@param</span>  pageId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="doctag">@throws</span> IOException 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Map&lt;String, Object&gt; 返回类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> <span class="doctag">@author</span> 王迪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020年3月10日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile[] file, String pageId) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="keyword">null</span> || file.length == <span class="number">0</span>) &#123;</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"nfile"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存储所有map</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; AllMap = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">module</span>.length; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// 存储一个模块上传成功的</span></span><br><span class="line">            StringBuffer success = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="comment">// 存储一个模块上传失败的</span></span><br><span class="line">            StringBuffer fail = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="comment">// 其实这个file数组的长度永远是1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; file.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!file[j].isEmpty()) &#123;</span><br><span class="line">                    String originFileName = file[j].getOriginalFilename();<span class="comment">// 获取客户机上的文件名</span></span><br><span class="line">                    List&lt;UpFile&gt; queryFileByName = fileService.queryFileByName(originFileName, <span class="keyword">module</span>[i]);</span><br><span class="line">                    <span class="keyword">boolean</span> isDeleted = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; queryFileByName.size(); k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (queryFileByName.get(k).getSubjection() != <span class="string">"0"</span>) &#123;</span><br><span class="line">                            isDeleted = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (!isDeleted) &#123;<span class="comment">// isDeleted代表subjection为0,代表此文件是删除了，就增加该文件，否则加入fail信息中</span></span><br><span class="line">                        flag = <span class="number">0</span>;</span><br><span class="line">                        fail.append(originFileName + <span class="string">","</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        success.append(originFileName + <span class="string">","</span>);</span><br><span class="line">                        addFile(file[j], <span class="keyword">module</span>[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String moduleName = FilePageService.queryFilePageBySubjection(<span class="keyword">module</span>[i]).getModuleName();</span><br><span class="line">            map.put(<span class="string">"moduleName"</span>, moduleName);</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(<span class="string">"code"</span>, <span class="string">"exist"</span>);</span><br><span class="line">                map.put(<span class="string">"info"</span>, fail.substring(<span class="number">0</span>, fail.length() - <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(<span class="string">"code"</span>, <span class="string">"NotExist"</span>);</span><br><span class="line">                map.put(<span class="string">"info"</span>, success.substring(<span class="number">0</span>, success.length() - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            AllMap.add(map);</span><br><span class="line">        &#125;</span><br><span class="line">        result.put(<span class="string">"info"</span>, AllMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        result.put(<span class="string">"code"</span>, <span class="string">"error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="八、拦截器"><a href="#八、拦截器" class="headerlink" title="八、拦截器**"></a>八、拦截器**</h1><p><strong>当有多个拦截器时</strong><br>preHandle:按照拦截器数组顺序执行<br>postHandle:按照拦截器数组逆序执行<br>afterCompletion:按照拦截器数组逆序执行</p>
<p>当多个preHandle有不同的值时：<br>第一个返回false,第二个返回false,只有第一个的preHandle会执行<br>第一个返回false,第二个返回true,只有第一个的preHandle会执行<br>第一个返回true,第二个返回false,只有第一个的preHandle和afterCompletion以及第二个的preHandle会执行</p>
<p>执行顺序：<br>客户端请求—&gt;filter—&gt;DispatcherServlet—&gt;interceptor—&gt;服务器</p>
<h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Second:preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Second:postHandle..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Second:afterCompletion..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml配置,加入IOC容器中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;bean class="com.springmvc.interceptor.FirstInterceptor"&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springmvc.interceptor.SecondInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"firstInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        设置自定义拦截方式--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;mvc:interceptor&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;mvc:mapping path=""/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--            &lt;mvc:exclude-mapping path=""/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;/mvc:interceptor&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="九、整合Spring-SpringMVC"><a href="#九、整合Spring-SpringMVC" class="headerlink" title="九、整合Spring,SpringMVC**"></a>九、整合Spring,SpringMVC**</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.spring与springmvc的整合：spring的配置文件什么时候加载？什么时候加载？</span><br><span class="line">监听器，可以在ServletContext加载时，通过监听器加载spring的配置文件，创建spring容器</span><br><span class="line">Spring提供的监听器，ContextLoaderListener</span><br><span class="line"></span><br><span class="line">2.bean被创建两次的问题，在springmvc中只扫描控制层，在spring中值包含指定的包</span><br><span class="line"></span><br><span class="line">3.Spring和springMVC的关系；</span><br><span class="line">Spring是父容器</span><br><span class="line">springmvc是子容器</span><br><span class="line">规定：子容器能够调用访问父容器中的bean，而父容器不能够调用访问子容器中的bean</span><br></pre></td></tr></table></figure>
<p>web.xml添加监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    自动配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 第一个执行，因为listener需要  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过监听器加载spring的配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"spring.xml"</span>);</span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">"ac"</span>,ac);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认返回视图是@RequestMapping的值</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testListener"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testListener</span><span class="params">(HttpSession session)</span></span>&#123;</span><br><span class="line">    ServletContext servletContext = session.getServletContext();</span><br><span class="line">    ApplicationContext ac = (ApplicationContext)servletContext.getAttribute(<span class="string">"ac"</span>);</span><br><span class="line">    Person person = (Person)ac.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="十、SpringMVC执行流程"><a href="#十、SpringMVC执行流程" class="headerlink" title="十、SpringMVC执行流程**"></a>十、SpringMVC执行流程**</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">springmvc利用DispatcherServlet进行处理客户端的请求，</span><br><span class="line">如果springmvc中有相应的请求，即springmvc能够处理这个请求</span><br><span class="line">    1.由HandlerMapping(存储的是所有的请求和处理器的关系)调用getHandler()</span><br><span class="line">    获取该Handler配置的所有相关的对象(包括Handler对象)以及Handler对象对应的拦截器</span><br><span class="line">    最后以HandlerExecutionChain(某个指定的处理器和请求的关系)对象的形式返回</span><br><span class="line">    2.DispatcherServlet根据获得的Handler对象选择合适的HandlerAdapter(对请求执行和操作)对象</span><br><span class="line">        通过调用getHandlerAdapter()获得</span><br><span class="line">    3.成功获得HandlerAdapter对象后，执行拦截器preHandle方法，</span><br><span class="line">    4.调用Handler的目标方法得到ModelAndView对象</span><br><span class="line">        如果存在异常，由HandlerExceptionResolver组件处理异常，得到新的ModelAndView对象</span><br><span class="line">        如果不存在异常，就执行拦截器的postHandle方法</span><br><span class="line">                     有ViewResolver组件根据ModelAndView对象得到实际的View</span><br><span class="line">                     渲染视图</span><br><span class="line">    5.执行拦截器的afterCompletion方法</span><br><span class="line">否则，查看xml配置文件中有没有&lt;mvc:default-servlet-handler/&gt;(用tomcat默认的servet处理)注解</span><br><span class="line">    如果配置了，且能处理，就成功</span><br><span class="line">              但不能处理，就到404页面,控制台没有报错</span><br><span class="line">    如果没配置，控制台:No mapping found for HTTP request with URI in DispatcherServlet</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring笔记</title>
    <url>/alex-next/2020/07/17/java%E5%90%8E%E7%AB%AF/spring/</url>
    <content><![CDATA[<p>项目gitee地址</p>
<blockquote>
<p><a href="https://gitee.com/alexander1/spring-notes" target="_blank" rel="noopener">https://gitee.com/alexander1/spring-notes</a></p>
<h1 id="一、Spring入门"><a href="#一、Spring入门" class="headerlink" title="一、Spring入门"></a>一、Spring入门</h1></blockquote>
<h2 id="1、导入pom依赖"><a href="#1、导入pom依赖" class="headerlink" title="1、导入pom依赖"></a>1、导入pom依赖</h2><p>需要导入spring-beans,spring-context,spring-core,spring-expression,commons-logging</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为方便起见，直接导入spring-mvc依赖</span></span><br><span class="line"><span class="comment">包含spring和springMVC的基础依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、编写xml配置文件"><a href="#2、编写xml配置文件" class="headerlink" title="2、编写xml配置文件"></a>2、编写xml配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要记得导入相关资源--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s1"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用set方法注入即setId()，而不是根据属性名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>10003<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3、编写测试类"><a href="#3、编写测试类" class="headerlink" title="3、编写测试类"></a>3、编写测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//ctrl+alt+u查看向上关系图</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//        Person person = (Person)ac.getBean("person");</span></span><br><span class="line">    <span class="comment">//与bean的id无关,但如果IOC容器中，有两个就会报错</span></span><br><span class="line">    <span class="comment">//        Person person = ac.getBean(Person.class);</span></span><br><span class="line">    Person person = ac.getBean(<span class="string">"personTwo"</span>, Person.class);</span><br><span class="line">    Person person1 = ac.getBean(<span class="string">"personTwo"</span>, Person.class);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">    System.out.println(person==person1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//spring中的bean默认是单例的</span></span><br><span class="line">    Person person2 = ac.getBean(<span class="string">"personOne"</span>, Person.class);</span><br><span class="line">    Person person3 = ac.getBean(<span class="string">"personOne"</span>, Person.class);</span><br><span class="line">    System.out.println(person2==person3);<span class="comment">//false</span></span><br><span class="line">    <span class="comment">//        ac.close();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、IOC容器和bean的配置"><a href="#二、IOC容器和bean的配置" class="headerlink" title="二、IOC容器和bean的配置"></a>二、IOC容器和bean的配置</h1><h2 id="1、给bean的属性赋值"><a href="#1、给bean的属性赋值" class="headerlink" title="1、给bean的属性赋值"></a>1、给bean的属性赋值</h2><h3 id="1）、setter注入"><a href="#1）、setter注入" class="headerlink" title="1）、setter注入"></a>1）、setter注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s1"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用set方法注入即setId()，而不是根据属性名注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在相应的Student类中要有setter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>10003<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2）、构造器注入"><a href="#2）、构造器注入" class="headerlink" title="2）、构造器注入"></a>2）、构造器注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s2"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在相应的Student类中要有构造器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"10086"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"李四"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"24"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3）、给级联属性赋值"><a href="#3）、给级联属性赋值" class="headerlink" title="3）、给级联属性赋值"></a>3）、给级联属性赋值</h3><h4 id="1）、p名称空间"><a href="#1）、p名称空间" class="headerlink" title="1）、p名称空间"></a>1）、p名称空间</h4><p>导入相关资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s4"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span> <span class="attr">p:id</span>=<span class="string">"10033"</span> <span class="attr">p:name</span>=<span class="string">"zs"</span> <span class="attr">p:age</span>=<span class="string">"20"</span> <span class="attr">p:score</span>=<span class="string">"85"</span> <span class="attr">p:sex</span>=<span class="string">"男"</span> <span class="attr">p:teacher-ref</span>=<span class="string">"teacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"10000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小芳"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2）、ref关键字"><a href="#2）、ref关键字" class="headerlink" title="2）、ref关键字"></a>2）、ref关键字</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        八种基本类型及其包装类和String 都是字面量</span></span><br><span class="line"><span class="comment">        获取引用类型</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s5"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1003"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--赋值，而不是新创建了一个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher.tname"</span> <span class="attr">value</span>=<span class="string">"小红"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"10000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小芳"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3）、内部bean"><a href="#3）、内部bean" class="headerlink" title="3）、内部bean"></a>3）、内部bean</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"s6"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1003"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--内部bean其他的bean不能引用--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"tt"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"111"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"ls"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、集合属性"><a href="#2、集合属性" class="headerlink" title="2、集合属性"></a>2、集合属性</h2><p>Teacher.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: alex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/7/17 19:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; cls;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;<span class="comment">//不能起sList,类似的一个小写后面跟大写</span></span><br><span class="line">    <span class="keyword">private</span> Integer[] salary;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; bossMap;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"tid="</span> + tid +</span><br><span class="line">                <span class="string">", tname='"</span> + tname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", cls="</span> + cls +</span><br><span class="line">                <span class="string">", students="</span> + students +</span><br><span class="line">                <span class="string">", salary="</span> + Arrays.toString(salary) +</span><br><span class="line">                <span class="string">", set="</span> + set +</span><br><span class="line">                <span class="string">", bossMap="</span> + bossMap +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getBossMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bossMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBossMap</span><span class="params">(Map&lt;String, String&gt; bossMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bossMap = bossMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer[] getSalary() &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(Integer[] salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Integer&gt; <span class="title">getSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;Integer&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getCls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCls</span><span class="params">(List&lt;String&gt; cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cls = cls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(Integer tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTname</span><span class="params">(String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(Integer tid, String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1）、list，array"><a href="#1）、list，array" class="headerlink" title="1）、list，array"></a>1）、list，array</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set和array类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"t3"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小名"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"salary"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组既能用array也能用list，因为list底层使用array实现的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2）、map"><a href="#2）、map" class="headerlink" title="2）、map"></a>2）、map</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--map数据--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"t4"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小名"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bossMap"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>彤<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1002<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>陈<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3）、util名称空间"><a href="#3）、util名称空间" class="headerlink" title="3）、util名称空间"></a>3）、util名称空间</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"t5"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小名"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">ref</span>=<span class="string">"students"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"t6"</span> <span class="attr">class</span>=<span class="string">"com.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tid"</span> <span class="attr">value</span>=<span class="string">"000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tname"</span> <span class="attr">value</span>=<span class="string">"小名"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bossMap"</span> <span class="attr">ref</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"students"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"s1"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"s2"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"s3"</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注：要导入名称空间</strong></p>
<h2 id="3、factoryBean"><a href="#3、factoryBean" class="headerlink" title="3、factoryBean"></a>3、factoryBean</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--工厂bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory"</span> <span class="attr">class</span>=<span class="string">"com.factoryBean.MyFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>MyFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Car</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.setBrand(<span class="string">"奥迪"</span>);</span><br><span class="line">        car.setPrice(<span class="number">150000.0</span>);</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Car.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"factory-bean.xml"</span>);</span><br><span class="line">    Object factory = ac.getBean(<span class="string">"factory"</span>);</span><br><span class="line">    <span class="comment">//        Object factory = ac.getBean("&amp;factory");获取工厂类自身</span></span><br><span class="line">    <span class="comment">//自动执行获取getObject</span></span><br><span class="line">    System.out.println(factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、bean的生命周期"><a href="#4、bean的生命周期" class="headerlink" title="4、bean的生命周期"></a>4、bean的生命周期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"One:创建对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Three:初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Five:销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Four:使用--Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Two:依赖注入"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>bean的后置处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterHandler</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在bean生命周期第三步初始化之前操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Person person = (Person) bean;</span><br><span class="line">        <span class="keyword">if</span> (person.getSex().equals(<span class="string">"男"</span>))&#123;</span><br><span class="line">            person.setName(<span class="string">"张无忌"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            person.setName(<span class="string">"赵敏"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在bean生命周期第三步初始化之后操作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.ioc.life.Person"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.ioc.life.AfterHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">结果：</span><br><span class="line">One:创建对象</span><br><span class="line">Two:依赖注入</span><br><span class="line">//postProcessBeforeInitialization</span><br><span class="line">Three:初始化</span><br><span class="line">//postProcessAfterInitialization</span><br><span class="line">Four:使用--Person&#123;id=1001, sex=&apos;男&apos;, name=&apos;张无忌&apos;&#125;</span><br><span class="line">Five:销毁</span><br></pre></td></tr></table></figure>
<h2 id="5、作用域"><a href="#5、作用域" class="headerlink" title="5、作用域"></a>5、作用域</h2><p>用scope指定，默认是singleton</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.ioc.scope.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">value</span>=<span class="string">"1001"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sname"</span> <span class="attr">value</span>=<span class="string">"张三"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//容器初始化的时候就创建单例模式的bean</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"scope.xml"</span>);</span><br><span class="line">    Student student1 = ac.getBean(<span class="string">"student"</span>, Student.class);</span><br><span class="line">    Student student2 = ac.getBean(<span class="string">"student"</span>, Student.class);</span><br><span class="line">    System.out.println(student1);</span><br><span class="line">    <span class="comment">//默认是单例模式</span></span><br><span class="line">    System.out.println(student1==student2);<span class="comment">//单例模式为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、自动装配-byName-byType"><a href="#6、自动装配-byName-byType" class="headerlink" title="6、自动装配(byName|byType)"></a>6、自动装配(byName|byType)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        autowire="byName|byType"</span></span><br><span class="line"><span class="comment">        byName根据bean的id和类属性名称匹配，自动装配</span></span><br><span class="line"><span class="comment">        byType根据属性类别自动赋值，具有兼容性，能为它本身、接口、父类赋值</span></span><br><span class="line"><span class="comment">                只能有一个这种类型的对象</span></span><br><span class="line"><span class="comment">        选用建议：当设置autowire属性，会作用于该bean中所有的非字面量属性，因此谁都不用</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"emp"</span> <span class="attr">class</span>=<span class="string">"com.ioc.autowire.Emp"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"1001"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"张三"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name="car" ref="car"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        &lt;property name="dept" ref="dept"/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"autowire.xml"</span>);</span><br><span class="line">    Emp emp = ac.getBean(<span class="string">"emp"</span>, Emp.class);</span><br><span class="line">    System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>Emp{id=1001, name=’张三’, car=Car{cid=666, cname=’奔驰’}, dept=Dept{did=7777, dname=’销售’}}</p>
<h2 id="7、连接数据库"><a href="#7、连接数据库" class="headerlink" title="7、连接数据库"></a>7、连接数据库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.加载资源文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="location" value="db.properties"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.加载资源文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"datasource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>db.properties放在类路径下面</p>
<h2 id="8、通过注解配置bean-扫描包-Autowired"><a href="#8、通过注解配置bean-扫描包-Autowired" class="headerlink" title="8、通过注解配置bean+扫描包+@Autowired"></a>8、通过注解配置bean+扫描包+@Autowired</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context-4.3.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描有注解的类</span></span><br><span class="line"><span class="comment">        会将加上注解的类作为spring的组件进行加载组件</span></span><br><span class="line"><span class="comment">        会自动在spring的配置文件中生成对应的bean,这些bean的id会以类的首字母小写为值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;context:include-filter/&gt;只扫描包含的。在使用时use-default-filters="false"一定要将默认的关闭</span></span><br><span class="line"><span class="comment">    &lt;context:exclude-filter/&gt;先扫描再排除。在使用时use-default-filters="true"</span></span><br><span class="line"><span class="comment">    可以同时出现多个include或exclude，但两个不能同时出现</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ioc.userMod"</span> <span class="attr">use-default-filters</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注解类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--具体类的类型--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;context:include-filter type="assignable" expression="com.com.ioc.userMod.controller.UserController"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Autowired只会赋值一个属性，消除set方法</span></span><br><span class="line">    <span class="comment">//autowire是对所有非字面量属性赋值(IOC容器中有才赋值)</span></span><br><span class="line">    <span class="comment">//userDao是UserServiceImpl的一个属性</span></span><br><span class="line">    <span class="comment">//@Autowired一开始是根据byType赋值</span></span><br><span class="line">    <span class="comment">//当byType实现不了装配时，再根据byName，要求IOC容器中有一个与bean的id与属性名一致</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    @Qualifier("userDaoImpl")</span></span><br><span class="line"><span class="comment">//    @Resource和@Autowired差不多，只不过默认byName,再byType</span></span><br><span class="line">    UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userDaoMybatisImpl"</span>)</span><br><span class="line">    <span class="comment">//将IOC容器中bean的id为userDaoMybatisImpl赋值给userDa11o</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDa11o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao=userDa11o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private UserDao userDao1 = new UserDaoImpl();</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext ac = new ClassPathXmlApplicationContext("user.xml");</span></span><br><span class="line"><span class="comment">//        UserServiceImpl user = ac.getBean("user", UserServiceImpl.class);</span></span><br><span class="line"><span class="comment">//        if (user!=null)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("yes");</span></span><br><span class="line"><span class="comment">//        &#125;else &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("no");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">if</span> (userDao==<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"UserServiceImpl...11"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"UserServiceImpl...22"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//先加载的是有注解的bean，接着再加载配置文件中的</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"user.xml"</span>);</span><br><span class="line">    <span class="comment">//默认是首字母小写</span></span><br><span class="line">    UserController userController = ac.getBean(<span class="string">"aaa"</span>,UserController.class);</span><br><span class="line">    System.out.println(userController);</span><br><span class="line">    <span class="comment">//由于兼容性，所以这里可以用接口类型接收</span></span><br><span class="line">    UserService userService = ac.getBean(<span class="string">"userServiceImpl"</span>, UserServiceImpl.class);</span><br><span class="line">    UserService user = ac.getBean(<span class="string">"user"</span>, UserServiceImpl.class);</span><br><span class="line">    UserService user1 = ac.getBean(<span class="string">"user"</span>, UserServiceImpl.class);</span><br><span class="line">    System.out.println(user==userService);<span class="comment">//false</span></span><br><span class="line">    System.out.println(user==user1);<span class="comment">//true，别搞混了</span></span><br><span class="line"></span><br><span class="line">    userService.addUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、AOP"><a href="#三、AOP" class="headerlink" title="三、AOP"></a>三、AOP</h1><h2 id="1、使用JDK实现动态代理"><a href="#1、使用JDK实现动态代理" class="headerlink" title="1、使用JDK实现动态代理"></a>1、使用JDK实现动态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtil</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MathImpl mathImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyUtil</span><span class="params">(MathImpl mathImpl)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mathImpl=mathImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态代理，所以代理对象要动态生成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前类的类加载器，用来加载代理对象所属类</span></span><br><span class="line">        ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line">        <span class="comment">//获取目标对象实现的所有接口的class</span></span><br><span class="line">        Class[] interfaces = mathImpl.getClass().getInterfaces();</span><br><span class="line">        <span class="comment">//返回的是MathImpl的一个实例</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">//这里的method就是代理对象实现的目标对象的方法</span></span><br><span class="line">            <span class="comment">//proxy:生成的动态代理类，method:对应的方法，args：方法的参数</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    MyLogger.before(method.getName(), Arrays.toString(args));</span><br><span class="line">                    <span class="comment">//动态代理对象实现功能</span></span><br><span class="line">                    Object res = method.invoke(mathImpl, args);</span><br><span class="line">                    MyLogger.after(method.getName(),res);</span><br><span class="line">                    <span class="keyword">return</span> res;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    MyLogger.throwing();</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"哪都有我..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//        MathI mathI = new MathImpl();</span></span><br><span class="line">    <span class="comment">//        int add = mathI.add(15, 12);</span></span><br><span class="line">    <span class="comment">//        System.out.println(add);</span></span><br><span class="line">    ProxyUtil proxy = <span class="keyword">new</span> ProxyUtil(<span class="keyword">new</span> MathImpl());</span><br><span class="line">    <span class="comment">//兄弟类不能相互转换,</span></span><br><span class="line">    <span class="comment">// proxy.getProxy()生成了实现了MathI接口的类$Proxy0与MathImpl是兄弟类，</span></span><br><span class="line">    <span class="comment">// 不具有兼容性</span></span><br><span class="line">    MathI math = (MathI)proxy.getProxy();</span><br><span class="line">    <span class="keyword">int</span> add = math.div(<span class="number">12</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//        System.out.println(add);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、Spring使用的用cglib实现的动态代理"><a href="#2、Spring使用的用cglib实现的动态代理" class="headerlink" title="2、Spring使用的用cglib实现的动态代理"></a>2、Spring使用的用cglib实现的动态代理</h2><h3 id="1）、注解版AOP"><a href="#1）、注解版AOP" class="headerlink" title="1）、注解版AOP"></a>1）、注解版AOP</h3><blockquote>
<p>注解方式是aspectJ里面实现的</p>
</blockquote>
<h4 id="导入相应的依赖"><a href="#导入相应的依赖" class="headerlink" title="导入相应的依赖"></a>导入相应的依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aspect--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用于解析切入点表达式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注当前类为切面</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">2</span>)<span class="comment">//定义切面作用的优先级，值越小，优先值越高，默认值为int的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(value = <span class="string">"execution(* com.spring.aop.*.*(..))"</span>)<span class="comment">//公共切入点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Before</span>: 将方法指定为前置通知</span></span><br><span class="line"><span class="comment">     * 必须设置value,其值为切入点表达式</span></span><br><span class="line"><span class="comment">     * 前置通知：作用于方法执行之前</span></span><br><span class="line"><span class="comment">     * 第一个*表示任意访问修饰符和返回值类型</span></span><br><span class="line"><span class="comment">     * 第二个*表示任意类</span></span><br><span class="line"><span class="comment">     * 第三个*表示类中任意方法</span></span><br><span class="line"><span class="comment">     * ..代表任意的参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Before(value = "execution(public int com.com.spring.aop.MathImpl.add(int,int))")</span></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"test()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;<span class="comment">//joinPoint为连接点</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();<span class="comment">//获取方法的参数</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();<span class="comment">//获取方法名</span></span><br><span class="line">        System.out.println(<span class="string">"method:"</span>+name+<span class="string">",arguments:"</span>+ Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知：作用于方法的finally语句块，不管有没有异常都会执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(value = <span class="string">"execution(* com.spring.aop.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"后置通知..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知：作用于方法执行之后</span></span><br><span class="line"><span class="comment">     * 可通过returning设置接收方法返回值的变量名</span></span><br><span class="line"><span class="comment">     * 要想在方法中使用，必须在方法的形参中设置和变量名相同的参数名的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"execution(* com.spring.aop.*.*(..))"</span>,returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturningMethod</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(<span class="string">"method:"</span>+methodName+<span class="string">",result:"</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterThrowing</span> 将方法标注为异常通知(例外通知)</span></span><br><span class="line"><span class="comment">     * 异常通知:作用于当方法抛出异常是</span></span><br><span class="line"><span class="comment">     * 可通过throwing设置接收方法返回的异常信息</span></span><br><span class="line"><span class="comment">     * 在参数列表中可以通过具体的异常类型，来对指定的异常信息进行操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(* com.spring.aop.*.*(..))"</span>,throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowingMethod</span><span class="params">(Exception ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有异常了...,异常为："</span>+ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Around(value = "execution(* com.com.spring.aop.*.*(..))")</span></span><br><span class="line"><span class="comment">//    public Object aroundMethod(ProceedingJoinPoint proceedingJoinPoint)&#123;</span></span><br><span class="line"><span class="comment">//        Object res = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            //前置通知</span></span><br><span class="line"><span class="comment">//            System.out.println("前置通知");</span></span><br><span class="line"><span class="comment">//            res = proceedingJoinPoint.proceed();//执行方法</span></span><br><span class="line"><span class="comment">//            //返回通知</span></span><br><span class="line"><span class="comment">//            System.out.println("返回通知");</span></span><br><span class="line"><span class="comment">//            return res;</span></span><br><span class="line"><span class="comment">//        &#125; catch (Throwable throwable) &#123;</span></span><br><span class="line"><span class="comment">//            throwable.printStackTrace();</span></span><br><span class="line"><span class="comment">//            //异常通知</span></span><br><span class="line"><span class="comment">//            System.out.println("异常通知");</span></span><br><span class="line"><span class="comment">//        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">//            //后置通知</span></span><br><span class="line"><span class="comment">//            System.out.println("后置通知");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return -1;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启aspectJ的自动代理功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.MyLoggerAspect"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"math"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.MathImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.aop"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testHandle"</span> <span class="attr">class</span>=<span class="string">"com.spring.aop.TestHandler"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2）、xml版AOP"><a href="#2）、xml版AOP" class="headerlink" title="2）、xml版AOP"></a>2）、xml版AOP</h3><blockquote>
<p>xml配置方式是spring原生的</p>
</blockquote>
<h4 id="切面类-1"><a href="#切面类-1" class="headerlink" title="切面类"></a>切面类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoggerAspectXML</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置通知"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.aopxml"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myLoggerAspectXML"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"cut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.spring.aopxml.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;aop:before method="before" pointcut="execution(* com.com.spring.aopxml.*.*(..))"&gt;&lt;/aop:before&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"cut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="四、JDBCTemplate数据库访问-事务管理"><a href="#四、JDBCTemplate数据库访问-事务管理" class="headerlink" title="四、JDBCTemplate数据库访问+事务管理"></a>四、JDBCTemplate数据库访问+事务管理</h1><h2 id="1、JDBCTemplate使用"><a href="#1、JDBCTemplate使用" class="headerlink" title="1、JDBCTemplate使用"></a>1、JDBCTemplate使用</h2><h3 id="1）、导入依赖"><a href="#1）、导入依赖" class="headerlink" title="1）、导入依赖"></a>1）、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    spring.version 版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;properties&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;spring.version&gt;5.1.9.RELEASE&lt;/spring.version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/properties&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        数据库--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring-jdbc 用于配置JdbcTemplate --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2）、xml配置文件"><a href="#2）、xml配置文件" class="headerlink" title="2）、xml配置文件"></a>2）、xml配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入属性文件--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name="location" value="db.properties"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过数据源配置JDBCTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"jdbc.xml"</span>);</span><br><span class="line">    JdbcTemplate jdbcTemplate = ac.getBean(<span class="string">"jdbcTemplate"</span>, JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;<span class="comment">//单个增删改</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update("insert into emp values(null,'张三',23,'男')");</span></span><br><span class="line"><span class="comment">//        String sql = "insert into emp values(null,?,?,?)";</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.update(sql,"李四",24,"女");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//PreparedStatement里的setString方法赋值字符串的时候，会自动添加单引号</span></span><br><span class="line">        String eids = <span class="string">"1,2,3"</span>;</span><br><span class="line"><span class="comment">//        String sql = "delete from emp where eid in(?)";//不能直接引用eids</span></span><br><span class="line">        <span class="comment">//但这种方式要考虑sql注入的问题</span></span><br><span class="line">        String sql = <span class="string">"delete from emp where eid in("</span>+eids+<span class="string">")"</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String sqls = "select * from emp where ename like '%?%'";//不能使用</span></span><br><span class="line">        String sqls = <span class="string">"select * from emp where ename like concat('%',?,'%')"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchUpdate</span><span class="params">()</span></span>&#123;<span class="comment">//批量增删改</span></span><br><span class="line">        String sql = <span class="string">"insert into emp values(null,?,?,?)"</span>;</span><br><span class="line">        List&lt;Object[]&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"a1"</span>,<span class="number">1</span>,<span class="string">"男"</span>&#125;);</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"a2"</span>,<span class="number">2</span>,<span class="string">"男"</span>&#125;);</span><br><span class="line">        list.add(<span class="keyword">new</span> Object[]&#123;<span class="string">"a3"</span>,<span class="number">3</span>,<span class="string">"男"</span>&#125;);</span><br><span class="line">        jdbcTemplate.batchUpdate(sql,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryForObject</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(sql,requiredType);用来获取单个的值</span></span><br><span class="line"><span class="comment">//        String sql = "select *  from emp where eid = ?";</span></span><br><span class="line"><span class="comment">//        jdbcTemplate.queryForObject(sql,rowMapper);用来获取单条数据</span></span><br><span class="line"><span class="comment">//        RowMapper&lt;Emp&gt; rowMapper = new BeanPropertyRowMapper&lt;&gt;(Emp.class);</span></span><br><span class="line"><span class="comment">//        Emp emp = jdbcTemplate.queryForObject(sql, new Object[]&#123;4&#125;, rowMapper);</span></span><br><span class="line"><span class="comment">//        System.out.println(emp);</span></span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">"select count(*) from emp"</span>;</span><br><span class="line">        Integer res = jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"select eid,ename,age,sex from emp"</span>;</span><br><span class="line">        RowMapper&lt;Emp&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Emp.class);</span><br><span class="line">        List&lt;Emp&gt; query = jdbcTemplate.query(sql, rowMapper);</span><br><span class="line">        System.out.println(query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、加入事务"><a href="#2、加入事务" class="headerlink" title="2、加入事务"></a>2、加入事务</h2><h3 id="xml文件配置"><a href="#xml文件配置" class="headerlink" title="xml文件配置"></a>xml文件配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.spring.book"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--创建数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--通过数据源配置JDBCTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启注解驱动，即对事务相关的注解进行扫描，解析含义并执行功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注解事务的使用"><a href="#注解事务的使用" class="headerlink" title="注解事务的使用"></a>注解事务的使用</h3><ul>
<li><p>@Transactional: 对方法中所有的操作作为一个事务进行管理</p>
<p>   在方法上使用，只对方法有效果</p>
<p>   在类上使用，对类中所有的方法都有效果</p>
<p>   @Transactional 中可以设置的属性:</p>
<ul>
<li><p>1.事务的传播方式propagation:A方法和B方法都有事务，当A在调用B时，会将A中的事务传播给B方法，B方法对于事务的的处理方式就是事务的传播行为</p>
<p>Propagation.REQUIRED(默认值):必须使用调用者的事务,即checkOut()的事务</p>
<p>Propagation.REQUIRES_NEW:将调用者的事务挂起，不使用调用者的事务，使用新的事务进行处理(buyBook()的事务)</p>
</li>
<li><p>2.事务的隔离级别isolation:在并发的情况下，操作数据的一种规定</p>
<ul>
<li>读未提交：脏读(读出数据后，可能未提交的回滚了),针对一个表中的一条数据的一个字段</li>
<li>读已提交：不可重复读(数据提交且不回滚，那么读出的数据不一致),针对一个表中的一条数据的一个字段</li>
<li>可重复读：幻读(但可以往表中新添数据，使读完之后和表中数据不一致),针对表里的一行数据</li>
<li>串行化(单线程)：性能低，消耗大</li>
</ul>
</li>
<li><p>3.timeout:在事务强制回滚前最多可以执行(等待)的时间</p>
</li>
<li><p>4.readOnly:当前事务中的一系列的操作是否为只读</p>
<ul>
<li>若设置为只读，不管事务中有没有写的操作，Mysql都会在请求访问数据的时候，不加锁，提高性能。</li>
<li>但是如果有写的操作时，建议一定不能设置为只读</li>
</ul>
</li>
<li><p>5.rollbackFor|rollbackForClassName|noRollbackFor|noRollbackForClassName:设置事务回滚的条件</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Transactional</span>: 对方法中所有的操作作为一个事务进行管理</span></span><br><span class="line"><span class="comment">     * 在方法上使用，只对方法有效果</span></span><br><span class="line"><span class="comment">     * 在类上使用，对类中所有的方法都有效果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Transactional</span> 中可以设置的属性:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1.事务的传播方式propagation:A方法和B方法都有事务，当A在调用B时，会将A中的事务传播给B方法，B方法对于事务的的处理方式就是事务的传播行为</span></span><br><span class="line"><span class="comment">     * Propagation.REQUIRED(默认值):必须使用调用者的事务,即checkOut()的事务</span></span><br><span class="line"><span class="comment">     * Propagation.REQUIRES_NEW:将调用者的事务挂起，不使用调用者的事务，使用新的事务进行处理(buyBook()的事务)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2.事务的隔离级别isolation:在并发的情况下，操作数据的一种规定</span></span><br><span class="line"><span class="comment">     *      读未提交：脏读(读出数据后，可能未提交的回滚了),针对一个表中的一条数据的一个字段</span></span><br><span class="line"><span class="comment">     *      读已提交：不可重复读(数据提交且不回滚，那么读出的数据不一致),针对一个表中的一条数据的一个字段</span></span><br><span class="line"><span class="comment">     *      可重复读：幻读(但可以往表中新添数据，使读完之后和表中数据不一致),针对表里的一行数据</span></span><br><span class="line"><span class="comment">     *      串行化(单线程)：性能低，消耗大</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3.timeout:在事务强制回滚前最多可以执行(等待)的时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 4.readOnly:当前事务中的一系列的操作是否为只读</span></span><br><span class="line"><span class="comment">     * 若设置为只读，不管事务中有没有写的操作，Mysql都会在请求访问数据的时候，不加锁，提高性能。</span></span><br><span class="line"><span class="comment">     * 但是如果有写的操作时，建议一定不能设置为只读</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 5.rollbackFor|rollbackForClassName|noRollbackFor|noRollbackForClassName:设置事务回滚的条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW,noRollbackFor = &#123;MyException.class,NullPointerException.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyBook</span><span class="params">(String bid, String uid)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            Thread.sleep(5000);</span></span><br><span class="line"><span class="comment">//        &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        Integer price = bookDao.selectPrice(bid);</span><br><span class="line">        bookDao.updateSt(bid);</span><br><span class="line">        bookDao.updateBalance(uid,price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、注解版Spring（简略）"><a href="#五、注解版Spring（简略）" class="headerlink" title="五、注解版Spring（简略）"></a>五、注解版Spring（简略）</h1><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><ul>
<li>@autowired 默认类型优先</li>
<li>@Resource 可以和@autowired一样自动装配，默认用名称装配</li>
<li>@Inject 和@Autowired功能一样</li>
<li>@autowired 是spring定义的</li>
<li>@Resource @Inject 是java规范</li>
</ul>
<h2 id="给容器中注册组件"><a href="#给容器中注册组件" class="headerlink" title="给容器中注册组件"></a>给容器中注册组件</h2><ul>
<li>1.包扫描+组件注解：@Controller [自己写的类]</li>
<li>2.@Bean [导入的第三方包里面的组件]</li>
<li>3.@Import[快速给容器中导入一个组件]<ul>
<li>1.导入组件，id默认是全类名</li>
<li>2.ImportSelector:返回需要导入的组件的全类名数组</li>
<li>3.ImportBeanDefinitionRegistrar:手动注册bean到容器中</li>
</ul>
</li>
<li><p>4.Spring提供的FactoryBean(工厂Bean)</p>
<ul>
<li><p>1.默认获取到的是工厂bean调用的getObject创建的对象</p>
</li>
<li><p>2.要获取工厂Bean对象，需要在id前面加一个&amp;</p>
</li>
</ul>
</li>
</ul>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul>
<li>1.自己手动指定</li>
<li>2.继承InitializingBean, DisposableBean</li>
<li><p>3.注解@PostConstruct,在bean创建完成并且属性赋值完成，来执行初始化方法</p>
<ul>
<li>.@PreDesdroy在容器销毁bean之前同志进行清理工作</li>
</ul>
</li>
<li><p>4.BeanPostProcessor bean的后置处理器</p>
<ul>
<li><p>postProcessBeforeInitialization:在初始化之前</p>
</li>
<li><p>postProcessAfterInitialization:在初始化之后</p>
</li>
<li><p>原理：</p>
</li>
<li><p>populateBean()给属性赋值</p>
</li>
<li><p>initializeBean初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">applyBeanPostProcessorBeforeInitialization</span><br><span class="line">invokeInitMethods</span><br><span class="line">applyBeanPostProcessorAfterInitialization</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>部署springboot项目到服务器上</title>
    <url>/alex-next/2021/05/01/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="一、免费领取阿里云ECS服务器"><a href="#一、免费领取阿里云ECS服务器" class="headerlink" title="一、免费领取阿里云ECS服务器"></a>一、免费领取阿里云ECS服务器</h2><p>先进入阿里云官网</p>
<p><img alt="1" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501192219.png"></p>
<p>然后看上面，开发者-&gt;成长计划</p>
<p><img alt="img" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501192440.png"></p>
<p>进去后，点学生专享-&gt;免费领取</p>
<p><img alt="1" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501192745.png"></p>
<p>然后点立即领取，要先做题，这些题都很简单。做完之后点领取(0元购买)，配置自己选择就行(我选的是ubuntu20.04)。</p>
<p>然后可以通过以下方式进入管理ECS面板。</p>
<p>拖到最后点击云服务器ECS</p>
<p><img alt="2" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501193248.png"></p>
<p>点击管理控制台即可进入</p>
<p><img alt="3" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501193806.png"></p>
<p>首次登录，需要先重置密码，点击管理-&gt;重置实例密码</p>
<p><img alt="4" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501194007.png"></p>
<p>重置之后，便可以尝试本地连接ECS，使用xshell6连接。下载地址:<a href="https://xshell.en.softonic.com/" target="_blank" rel="noopener">https://xshell.en.softonic.com/</a></p>
<p><img alt="5" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501194317.png"></p>
<p>然后输入用户名和刚才改过的密码就行。</p>
<p><img alt="6" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501194516.png"></p>
<p>这样就算成功了!!!</p>
<h2 id="二、配置jdk"><a href="#二、配置jdk" class="headerlink" title="二、配置jdk"></a>二、配置jdk</h2><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
<p>我下载的是jdk1.8，下载前需要注册一个oracle账号</p>
<p><img alt="7" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501195959.png"></p>
<p>选择linux版本，</p>
<p><img alt="8" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501200754.png"></p>
<p>下载好后使用xftp6传到服务器上。</p>
<p>进入xshell ，先解压压缩包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u11-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
<p>更改etc/profile或~/.bashrc    (G直接到最后一行,gg到第一行)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile或</span><br><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>添加java的配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br></pre></td></tr></table></figure>
<p>使环境生效</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile或</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<h2 id="三、配置tomcat-可选"><a href="#三、配置tomcat-可选" class="headerlink" title="三、配置tomcat(可选)"></a>三、配置tomcat(可选)</h2><p>若部署jar包可以忽略这一步。</p>
<p>部署war包需要配置tomcat。</p>
<p>下载Tomcat，下载地址：<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi</a></p>
<p><img alt="9" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501202527.png"></p>
<p>选择core下的linux版本</p>
<p>使用xftp传到服务器上</p>
<p>先将压缩包解压</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure>
<p>开权限（主要是为了之后执行startup.sh开启执行权限）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 -R apache-tomcat-8.5.31</span><br></pre></td></tr></table></figure>
<p>进入startup.sh，</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim startup.sh</span><br></pre></td></tr></table></figure>
<p>配置环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/jdk1.8.0_291</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:%&#123;JAVA_HOME&#125;/lib:%&#123;JRE_HOME&#125;/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/apache-tomcat-9.0.45</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo ./startup.sh</span><br></pre></td></tr></table></figure>
<p>测试：在xshell 输入 </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl localhost:8080</span><br></pre></td></tr></table></figure>
<p>或在浏览器中输入  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">公网ip:8080</span><br></pre></td></tr></table></figure>
<h2 id="四、配置mysql数据库-可选"><a href="#四、配置mysql数据库-可选" class="headerlink" title="四、配置mysql数据库(可选)"></a>四、配置mysql数据库(可选)</h2><p>① 可以考虑使用阿里云的rds云数据库，就不用在本地装MySQL（略）</p>
<p>② 在本地装mysql (8.0.23)</p>
<p>mysql在ubuntu的apt软件包存储库中，先更新服务器的包索引再安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>
<p>初始化配置</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1</span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords...</span><br><span class="line">Press y|Y for Yes, any other key for No: N (我的选项)</span><br><span class="line"></span><br><span class="line">#2</span><br><span class="line">Please set the password for root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br><span class="line"></span><br><span class="line">#3</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them...</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : N (我的选项)</span><br><span class="line"></span><br><span class="line">#4</span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&apos;localhost&apos;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y (我的选项)</span><br><span class="line"></span><br><span class="line">#5</span><br><span class="line">By default, MySQL comes with a database named &apos;test&apos; that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N (我的选项)</span><br><span class="line"></span><br><span class="line">#6</span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y (我的选项)</span><br></pre></td></tr></table></figure>
<p>检查mysql 服务状态</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure>
<p>之后，便可以使用根用户登陆了：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p</span><br></pre></td></tr></table></figure>
<p><img alt="2" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501204830.png"></p>
<p>由于ubuntu默认只允许本地访问，可以进行如下配置：</p>
<p>可以先把绑定端口关掉</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">注释掉<span class="built_in">bind</span>-address = 127.0.0.1， 即<span class="comment">#bind-address = 127.0.0.1</span></span><br><span class="line">重启服务</span><br><span class="line">sudo /etc/init.d/mysql restart</span><br><span class="line">查看端口状态</span><br><span class="line">netstat -apn |grep 3306</span><br><span class="line">此时应为：tcp6 0 0 :::3306 :::* LISTEN -</span><br></pre></td></tr></table></figure>
<p>修改用户表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">当远程访问出现not allowed的提示消息时，说明远程用户无权限，则需要修改用户表：</span><br><span class="line">1. 登录数据库</span><br><span class="line">mysql -u root -p</span><br><span class="line">2. 选择数据库</span><br><span class="line">use mysql;</span><br><span class="line">3. 修改root用户可以在所有机器登录（root只是举例，%表示所有机器）</span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line">4. 重启服务</span><br><span class="line">sudo /etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>
<h2 id="五、部署jar或war包"><a href="#五、部署jar或war包" class="headerlink" title="五、部署jar或war包"></a>五、部署jar或war包</h2><p>区别：</p>
<p>jar包的方式：不需要外置的tomcat，可以直接运行，如果关掉shell窗口服务就会停止，需要另外再配置</p>
<p>war包的方式：需要排除springboot自带的tomcat，关掉shell窗口服务不会停止。</p>
<h3 id="1-jar包"><a href="#1-jar包" class="headerlink" title="1.jar包"></a>1.jar包</h3><p><img alt="3" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501212806.png"></p>
<p>在pom.xml中加入打包工具</p>
<p><img alt="4" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501212851.png"></p>
<p>点击右上角边上maven，先clean，再package，生成出来的jar包在target文件夹下</p>
<p>然后丢到服务器上执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar covermanager-0.0.2-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>便可以运行了</p>
<h3 id="2-war包"><a href="#2-war包" class="headerlink" title="2.war包"></a>2.war包</h3><p>先让启动类继承<code>SpringBootServletInitializer</code>，并实现<code>configure</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CovermanagerApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(CovermanagerApplication.class, args);</span><br><span class="line">		System.out.println(<span class="string">"******************************启动成功********************************"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> builder.sources(CovermanagerApplication.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在依赖中排除springboot自带的tomcat</p>
<p><img alt="5" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501213351.png"></p>
<p>然后如jar包一样，clean之后在package，生成的war包在target文件夹下</p>
<p>将war包解压缩，并将文件名改为ROOT</p>
<p><img alt="6" data-src="https://gitee.com/alexander1/pic/raw/master/搭建服务器/20210501213540.png"></p>
<p>进入服务器的tomcat的webapps中，删除原有的ROOT/</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/apache-tomcat-9.0.45/webapps/</span><br><span class="line">rm -r ROOT/</span><br></pre></td></tr></table></figure>
<p>将解压后的ROOT包利用xftp传到服务器的<code>/usr/apache-tomcat-9.0.45/webapps/</code>目录下</p>
<p>然后进入<code>/usr/apache-tomcat-9.0.45/bin/</code>启动tomcat服务器即可</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具配置</category>
      </categories>
  </entry>
  <entry>
    <title>docker基础篇</title>
    <url>/alex-next/2021/08/29/java%E5%90%8E%E7%AB%AF/Docker%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="第一章-Docker简介"><a href="#第一章-Docker简介" class="headerlink" title="第一章 Docker简介"></a>第一章 Docker简介</h1><h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><h3 id="问题：为什么会有-docker-的出现"><a href="#问题：为什么会有-docker-的出现" class="headerlink" title="问题：为什么会有 docker 的出现"></a>问题：为什么会有 docker 的出现</h3><p>一款产 品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验<br><strong>Docker</strong>之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。<br>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装?也就是说，安装的时候，把原始环境-模-样地复制过来。开发人员利用Docker可以消除协作编码时“在我的机器上可正常工作”的问题。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811094546.png"></p>
<p>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说吧，<strong>Java/TomcatMySQL/JDBC</strong>驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在<strong>Windows</strong>上安装的这些环境，到了Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p>
<p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等java为例)。而为了让这程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，<strong>开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。</strong>Docker镜 像的设计<strong>，使得Docker得以打过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运.作。</strong></p>
<h3 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h3><p>Docker是基于Go语言实现的云开源项目。<br>Docker的主要目标是“<strong>Build, Ship[ and Run Any App,Anywhere</strong>“，也就是通过对应用组件的封装、分发、部署、运行等生命期的管理，使用户的APP (可以是一个WEB应用或数据库应用等等)及其运行环境能够做到“<strong>一次封装，到处运行</strong>”。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811094648.png"></p>
<p> Linux容器技术的出现就解决了这样一 一个问题，而Docker就是在它的基础上发展过来的。将应用运行在Docker容器上面，而Docker容器在任何操作系统上都是一-致的，这就实现了跨平台、跨服务器。<strong>只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作</strong></p>
<h3 id="一句话"><a href="#一句话" class="headerlink" title="一句话"></a>一句话</h3><p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p>
<h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><h3 id="之前的虚拟机技术"><a href="#之前的虚拟机技术" class="headerlink" title="之前的虚拟机技术"></a>之前的虚拟机技术</h3><p>虚拟机<strong>(virtual machine)</strong>就是带环境安装的一种解决方案。</p>
<p>它可以在一种操作系统里面运行另一种作系统，比如在<strong>Windows系统里面运行Linux系统</strong>。应用程序对此毫无感知，因为虚拟机看上去跟真实系统- -模-样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095046.png"></p>
<p>虚拟机的缺点:</p>
<p>1、资源占用多</p>
<p>2、冗余步骤多</p>
<p>3、启动慢</p>
<h3 id="容器虚拟化技术"><a href="#容器虚拟化技术" class="headerlink" title="容器虚拟化技术"></a>容器虚拟化技术</h3><p>由于前面虛拟机存在这些缺点，<strong>Linux</strong> 发展出了另一种虚拟化技术: <strong>Linux 容器</strong>(Linux Containers,缩为LXC)。</p>
<p><strong>Linux容器不是模拟一个完整的操作系统</strong>，而是对进程进行隔离。有了容器，就可以将软件运行所的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。.</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095112.png"></p>
<p>比较了<strong>Docker</strong>和传统虚拟化方式的不同之处:</p>
<p>1、传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程;</p>
<p>2、而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，<strong>而且也没有进行硬件虚拟</strong>。因此容器要比传统虚拟机为轻便。</p>
<p>3、每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会相互影响，能区分计算资源。</p>
<h3 id="开发-运维-DevOps"><a href="#开发-运维-DevOps" class="headerlink" title="开发/运维(DevOps)"></a>开发/运维(DevOps)</h3><p>一次构建、随处运行，</p>
<h4 id="更快速的应用交付和部署"><a href="#更快速的应用交付和部署" class="headerlink" title="更快速的应用交付和部署"></a>更快速的应用交付和部署</h4><p>​        传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化<br>之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测<br>试验证时间。</p>
<h4 id="更便捷的升级和扩缩容"><a href="#更便捷的升级和扩缩容" class="headerlink" title="更便捷的升级和扩缩容"></a>更便捷的升级和扩缩容</h4><p>​        随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成-块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</p>
<h4 id="更简单的系统运维"><a href="#更简单的系统运维" class="headerlink" title="更简单的系统运维"></a>更简单的系统运维</h4><p>​        应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度—致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</p>
<h4 id="更高效的计算资源利用"><a href="#更高效的计算资源利用" class="headerlink" title="更高效的计算资源利用"></a>更高效的计算资源利用</h4><p>​    <strong>Docker是内核级虚拟化</strong>，其不像传统的虚拟化技术一样 需要额外的Hypervisor支持，所以在-台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</p>
<h3 id="企业级"><a href="#企业级" class="headerlink" title="企业级"></a>企业级</h3><p>新浪</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095119.png"></p>
<p>美团</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095124.png"></p>
<p>蘑菇街</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095129.png"></p>
<h3 id="去哪下"><a href="#去哪下" class="headerlink" title="去哪下"></a>去哪下</h3><h4 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h4><p>docker官网： <a href="https://www.docker.com/" target="_blank" rel="noopener">https://www.docker.com/</a></p>
<p>docker中文网站: <a href="https://www.docker-cn.com/" target="_blank" rel="noopener">https://www.docker-cn.com/</a></p>
<h4 id="2、仓库"><a href="#2、仓库" class="headerlink" title="2、仓库"></a>2、仓库</h4><p>Docker Hub官网：<a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p>
<h1 id="第二章-Docker安装"><a href="#第二章-Docker安装" class="headerlink" title="第二章 Docker安装"></a>第二章 Docker安装</h1><h2 id="前提说明"><a href="#前提说明" class="headerlink" title="前提说明"></a>前提说明</h2><p><strong>CentOS Docker安装</strong><br>Docker支持以下的CentOS版本:<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit)或更高的版本</p>
<p><strong>前提条件</strong><br>目前，CentOS 仅发行版本中的内核支持Docker。<br>Docker运行在CentOS 7.上，要求系统为64位、系统内核版本为3.10以上。<br>Docker运行在CentOS-6.5或更高的版本的CentOS上，要求系统为64位、系<strong>统内核版本为2.6.32-431或者更高版本。</strong></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095135.png"></p>
<h2 id="Docker-的基本组成"><a href="#Docker-的基本组成" class="headerlink" title="Docker 的基本组成"></a>Docker 的基本组成</h2><h3 id="docker架构图"><a href="#docker架构图" class="headerlink" title="docker架构图"></a>docker架构图</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095139.svg"></p>
<h3 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像( image )"></a>镜像( image )</h3><p>Docker镜像(lmage)就是-一个只读的模板。镜像可以用来创建Docker容器，个镜像可以创建很多容器</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095144.png"></p>
<h3 id="容器-container"><a href="#容器-container" class="headerlink" title="容器( container)"></a>容器( container)</h3><p>Docker利用容器(Container) 独立运行的一个或一组应用。<strong>容器是用镜像创建的运行实例。</strong><br>它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。<br><strong>可以把容器看做是一个简 易版的Linux环境</strong>(包括root用户权限、进程空间、用户空间和网络空间等)和运行在其中的应用程序。<br>容器的定义和镜像几乎一模一样，也是一堆层的统一视角， 唯- -区别在于容器的最上面那-层是可读可写的。</p>
<h3 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库( repository)"></a>仓库( repository)</h3><p>仓库(<strong>Repository</strong>) 是<strong>集中存放镜像</strong>文件的场所。<br>仓库(<strong>Repository</strong>)和仓库注册服务器(<strong>Registry</strong>) 是有区别的。仓库注册服务器上往往存放着多个仓库，每个仓库中又包含了多镜像，<br>每个镜像有不同的标签(tag) 。</p>
<p>仓库分为公开仓库(<strong>Public</strong>) 和私有仓库(<strong>Private</strong>) 两种形式。<br><strong>最大的公开仓库是Docker Hub(ttps://hub. docker.com/)</strong><br>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云、网易云等</p>
<h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结 ()"></a>小总结 ()</h3><p>需要正确的理解仓储/镜像/容器这几个概念:</p>
<p>Docker本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一-个可交付的运行环境，这个打好的运行环境就似乎image镜像文件。只有通过这个镜像文件才能生成Docker容器。image文件可以看作是容器的模板。Docker根据image文件生成容器的实例。同一个image文件，可以生成多个同时运行的容器实例。</p>
<p>image文件生成的容器实例，本身也是一一个文件，称为镜像文件。</p>
<p>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一-个对应的运行实例，也就是我们的容器至于仓储，就是放了一堆镜像的地方，我们可以把镜像发布到仓储中，需要的时候从仓储中拉下来就可以了。|</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="Centos6-8安装Docker"><a href="#Centos6-8安装Docker" class="headerlink" title="Centos6.8安装Docker"></a>Centos6.8安装Docker</h3><p>1、yum install -y epel-release</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095150.png"></p>
<p>2、yum install -y docker-io</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095156.png"></p>
<p>3、安装后的配置文件： etc/sysconfig/docker</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095201.png"></p>
<p>4、启动 Docker后台服务: service docker start</p>
<p>5、docker version 验证</p>
<h3 id="Centos7-0安装Docker"><a href="#Centos7-0安装Docker" class="headerlink" title="Centos7.0安装Docker"></a>Centos7.0安装Docker</h3><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">https://docs.docker.com/engine/install/centos/</a></p>
<h2 id="永远的helloworld"><a href="#永远的helloworld" class="headerlink" title="永远的helloworld"></a>永远的helloworld</h2><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><p>是什么</p>
<p>​    <a href="https://promotion.aliyun.com/ntms/act/kubernetes.html" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p>
<p>注册一个属于自己的阿里云账户( 可复用淘宝账号)</p>
<p>获得加速器地址连接</p>
<p>​    登录阿里云开发者平台</p>
<p>​    获取加速器地址</p>
<p>配置本机Docker运行镜像加速器</p>
<p>​    鉴于国内网络问题，后续拉取Docker镜像十分缓慢，我们可以需要配置加速器来解决，<br>我使用的是阿里云的本人自己账号的镜像地址(需要自己注册有一个属于你自己的): ht:po/. mirror aliyuncns .com</p>
<ul>
<li>vim /etc/sysconfig/docker<br>将获得的自己账户下的阿里云加速地址配置进<br>other_ args-=”—registry-mirror=<a href="https://你自" target="_blank" rel="noopener">https://你自</a> 己的账号加速信息.mirror .aliyuncs.com</li>
</ul>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095235.png"></p>
<p>重新启动 Docker 后台服务：service docker restart</p>
<p>Linux系统下配置完加速器需要检查是否生效</p>
<h3 id="网易云加速"><a href="#网易云加速" class="headerlink" title="网易云加速"></a>网易云加速</h3><p>基本上同上述阿里云</p>
<p>启动Docker后台容器(测试运行 hello-world )</p>
<p>​    docker run hello world</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095239.png"></p>
<p>run干了什么</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095244.png"></p>
<h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><h3 id="Docker是怎样工作的"><a href="#Docker是怎样工作的" class="headerlink" title="Docker是怎样工作的"></a>Docker是怎样工作的</h3><p>Docker是一个Client-Server结构的系统，Docker守 护进程运行在主机上，然后通过Socket连 接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。<strong>容器，是一个运行时环境，就是我们前面说到的集装箱。</strong></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095248.png"></p>
<h3 id="为什么Docker比较比vm快"><a href="#为什么Docker比较比vm快" class="headerlink" title="为什么Docker比较比vm快"></a>为什么Docker比较比vm快</h3><p>1、<strong>docker</strong>有着比虚拟机更少的抽象层。由亍docker不需要<strong>Hypervisor</strong>实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。<br>2、<strong>docker</strong>利用的是宿主机的内核,而不需要<strong>Guest OS</strong>。因此,当新建一个 容器时,docker不需要和虚拟机一样 重新加载- - 个操作系统内核仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建—个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一-个docker容器只需要几秒钟。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095252.png"></p>
<h1 id="第三章-Docker常用命令"><a href="#第三章-Docker常用命令" class="headerlink" title="第三章 Docker常用命令"></a>第三章 Docker常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker Version</span><br><span class="line"></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line">docker --help</span><br><span class="line">	自己查看官网解释，高手都是自己练出来的，百度上只不过是翻译了下，加了点例子</span><br></pre></td></tr></table></figure>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images-列出本机上的镜像"><a href="#docker-images-列出本机上的镜像" class="headerlink" title="docker images 列出本机上的镜像"></a>docker images 列出本机上的镜像</h3><h3 id="OPTIONS-说明："><a href="#OPTIONS-说明：" class="headerlink" title="OPTIONS 说明："></a><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095259.png">OPTIONS 说明：</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">-a 列出本地所有的镜像(含中间映射层)</span><br><span class="line">-q 只显示镜像ID</span><br><span class="line">--digests 显示镜像的摘要信息</span><br><span class="line">--no-trunc 显示完整的镜像信息</span><br></pre></td></tr></table></figure>
<h3 id="docker-search-某个XXX镜像的名字"><a href="#docker-search-某个XXX镜像的名字" class="headerlink" title="docker search 某个XXX镜像的名字"></a>docker search 某个XXX镜像的名字</h3><p>​    网站 www.dockerhub.com</p>
<p>​    docker search [OPTIONS] 镜像名字</p>
<p>​    OPTIONS 说明</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">--no-trun 显示完整的镜像描述</span><br><span class="line">-s 列出收藏数不小于指定值的镜像</span><br><span class="line">--automated 只列出 automated build类型的镜像</span><br></pre></td></tr></table></figure>
<h3 id="docker-pull-某个镜像的名字"><a href="#docker-pull-某个镜像的名字" class="headerlink" title="docker pull 某个镜像的名字"></a>docker pull 某个镜像的名字</h3><p>​    下载镜像</p>
<p>​     docker pull 镜像名字[:TAG]</p>
<h3 id="docker-rmi-某个XXX镜像的名字ID"><a href="#docker-rmi-某个XXX镜像的名字ID" class="headerlink" title="docker rmi 某个XXX镜像的名字ID"></a>docker rmi 某个XXX镜像的名字ID</h3><p>​    删除镜像</p>
<p>​    删除单个 docker rm -f 镜像ID</p>
<p>​    删除多个 docker rm -f 镜像名1:TAG 镜像名2:TAG</p>
<p>​    删除多个 docker rmi -f ${docker images -qa}</p>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有镜像才能创建容器，这是根本前提(下载一个Centos镜像演示)</p>
<p>​    docker pull centos</p>
<h3 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h3><p>​    docker run [OPTIONS] IMAGE [COMMAND][ARG]</p>
<p>​    OPTIONS 说明 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OPTIONS说明(常用) :有些是一个减号，有些是两个减号</span><br><span class="line">--name=<span class="string">"容器新名字"</span>:为容器指定一个名称;</span><br><span class="line">-d:后台运行容器，并返回容器ID， 也即启动守护式容器;</span><br><span class="line">-i:以交互模式运行容器，通常与-t同时使用;</span><br><span class="line">-t:为容器重新分配一个伪输入终端，通常与-i同时使用;</span><br><span class="line">-P:随机端口映射;</span><br><span class="line">-p:指定端口映射，有以下四种格式</span><br><span class="line">ip:hostPort:containerPort</span><br><span class="line">ip::containerPort</span><br><span class="line">hostPort:containerPort</span><br><span class="line">containerPort</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095306.png"></p>
<h3 id="列出当前所有正在运行的容器"><a href="#列出当前所有正在运行的容器" class="headerlink" title="列出当前所有正在运行的容器"></a>列出当前所有<strong>正在运行</strong>的容器</h3><p>​    dockers ps [OPTIONS]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OPTIONS说明(常用) :</span><br><span class="line">-a :列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">-|:显示最近创建的容器。</span><br><span class="line">-n:显示最近n个创建的容器。</span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line">--no-trunc :不截断输出。</span><br></pre></td></tr></table></figure>
<h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><p>两种退出方式</p>
<p>​    exit 容器不停止退出，bash窗口停止</p>
<p>​    ctrl+P+Q 容器不停止，bash窗口不停止</p>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>docker start 容器ID或容器签名</p>
<h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><p>docker restart 容器ID或容器签名</p>
<h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><p>docker stop 容器ID或容器签名</p>
<h3 id="强制停止容器"><a href="#强制停止容器" class="headerlink" title="强制停止容器"></a>强制停止容器</h3><p>docker kill 容器ID或容器签名</p>
<h3 id="删除已停止的容器"><a href="#删除已停止的容器" class="headerlink" title="删除已停止的容器"></a>删除已停止的容器</h3><p>docker rm 容器ID  -f</p>
<p>​    一次性删除多个容器</p>
<p>​    docker rm -f $(docker ps -a -q)</p>
<p>​    docker ps -a -q | xargs docker rm</p>
<h2 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h2><h3 id="启动守护式容器"><a href="#启动守护式容器" class="headerlink" title="启动守护式容器"></a>启动守护式容器</h3><p>使用镜像centos:latest以后台模式启动一个容器<br>docker run -d centos</p>
<p>问题:然后docker ps -a进行查看,<strong>会发现容器已经退出</strong><br>很重要的要说明的一点: <strong>Docker容器后台运行,就必须有一个前台进程.</strong><br>容器运行的命令如果不是那些<strong>一直挂起的命令</strong> (比如运行top，tail) ，就是会自动退出的。<br>这个是<strong>docker</strong>的机制问题,比如你的web容器，我们以<strong>nginx</strong>为例，正常情况下,我们配置启动服务只需要启动响应的<strong>service</strong>即可。例如<br>service nginx start<br>但是,这样做,<strong>nginx</strong>为后台进程模式运行,就导致<strong>docker</strong>前台没有运行的应用,这样的容器后台启动后，会立即自杀因为他觉得他没事可做了.所以，最佳的解决方案是将你要运行的程序以前台进程的形式运行</p>
<h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><p>docker logs -f -t —tail 容器ID </p>
<p>​    -t 是加入时间戳</p>
<p>​    -f 跟随最新的日志打印</p>
<p>​    —tail 数字显示最后多少条</p>
<h3 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h3><p>docker top 容器ID</p>
<h3 id="查看容器内部细节"><a href="#查看容器内部细节" class="headerlink" title="查看容器内部细节"></a>查看容器内部细节</h3><p>docker inspect 容器ID</p>
<h3 id="进入正在运行的容器并以命令行交互"><a href="#进入正在运行的容器并以命令行交互" class="headerlink" title="进入正在运行的容器并以命令行交互"></a>进入正在运行的容器并以命令行交互</h3><p>docker exec -it 容器ID bashShell</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095314.png"></p>
<p>重新进入docker attach 容器ID</p>
<p>上述两个区别</p>
<p>attach 直接进入容器启动命令的终端，不会启动新的进程</p>
<p>exec 实在容器中打开新的终端，并且可以穷的那个新的进程</p>
<h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><p>docker cp 容器ID:容器内路径 目的主机路径</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095318.png"></p>
<h2 id="小总结-1"><a href="#小总结-1" class="headerlink" title="小总结"></a>小总结</h2><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095323.png"></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095333.png"></p>
<h1 id="第四章-Docker-镜像"><a href="#第四章-Docker-镜像" class="headerlink" title="第四章 Docker 镜像"></a>第四章 Docker 镜像</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<h3 id="UnionFS-联合文件系统"><a href="#UnionFS-联合文件系统" class="headerlink" title="UnionFS(联合文件系统)"></a>UnionFS(联合文件系统)</h3><p>UnionFS (状节又件示统)<br>UnionFS (联合文件系统) : Union文件系统(UnionFS)是一一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修作为一 次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a singlevirtualfilesystem)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)可以制作各种具.体的应用镜像。</p>
<p>特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文<br>件系统会包含所有底层的文件和目录</p>
<h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p><strong>Docker镜像加载原理:</strong><br>    <strong>docker</strong>的镜像实际上由一层一层的文件系统组成，这种层级的文件系统<strong>UnionFS。</strong></p>
<p><strong>botfs(boot file system)</strong>主要包含<strong>bootloader</strong>和<strong>kernel</strong>, <strong>bootloader</strong>主 要是引导加载<strong>kernel</strong>, <strong>Linux</strong>刚启动时会加载bootfs文件系统，在<strong>Docker</strong>镜像的最底层是<strong>bootfs</strong>。这一-层与我们典型的<strong>Linux/Unix</strong>系统是- - -样的，包含boot加载器和内核。当boot加载完成之 后整个内核就都在内存中了，此时内存的使用权己由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p><strong>rootfs (root file system)，</strong>在<strong>bootfs</strong>之 上。 包含的就是典型Linux系统中的<strong>/dev, /proc, /bin, /etc</strong>等标准目录和文件。<strong>rootfs</strong>就 是各种不同的操作系统发行版，比如<strong>Ubuntu</strong>，<strong>Centos</strong>等等。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095340.png"></p>
<p>平时我们安装的虚拟机的Centos都是好几个G ，为什么docker这里才要200m</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095345.png"></p>
<p>对于一个精简的<strong>OS, rootfs</strong>可 以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用<strong>Host</strong>的<strong>kernel</strong>,自只需要提供rootfs就行了。由此可见对于不同的<strong>linux</strong>发行版, <strong>bootfs</strong>基本是一致的, <strong>rootfs</strong>会有差别，因此不同的发行版可以公用<strong>bootfs</strong>。</p>
<h3 id="分层的镜像"><a href="#分层的镜像" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095349.png"></p>
<h3 id="分层的镜像-1"><a href="#分层的镜像-1" class="headerlink" title="分层的镜像"></a>分层的镜像</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095353.png"></p>
<h3 id="为什么-Docker纪念馆想要采用这种分层结构"><a href="#为什么-Docker纪念馆想要采用这种分层结构" class="headerlink" title="为什么 Docker纪念馆想要采用这种分层结构"></a>为什么 Docker纪念馆想要采用这种分层结构</h3><p>最大的一个好处就是-<strong>共享资源</strong><br>比如:<strong>有多个镜像都从相同的base镜像构建而来</strong>，那么宿主机只需在磁盘上保存一份<strong>base</strong>镜像,<br>同时内存中也只需加载一份<strong>base</strong>镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到<strong>镜像的顶部</strong>，这一层通常被称为<strong>容器层</strong>，容器层之下都叫<strong>镜像层</strong></p>
<h2 id="Docker镜像Commit操作"><a href="#Docker镜像Commit操作" class="headerlink" title="Docker镜像Commit操作"></a>Docker镜像Commit操作</h2><p>docker commit 提交容器副本使之称为一个新的镜像</p>
<p>docker commit -m=”提交的描述信息” -a=”作者” 容器ID 要创建的目标镜像名:[标签名]</p>
<h3 id="案例演示："><a href="#案例演示：" class="headerlink" title="案例演示："></a>案例演示：</h3><p>1、从Hub上下载tomcat镜像到本地并成功运行</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095358.png"></p>
<p>docker run -d -p 8080:8080 tomcat</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-p主机端口：docker容器端口</span><br><span class="line">-P:随机分配端口</span><br><span class="line">i:交互</span><br><span class="line">t:终端</span><br></pre></td></tr></table></figure>
<p>2、故意删除上一步镜像生产tomcat容器的文档</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095404.png"></p>
<p>3、也即当前的tomcat运行实例是一个没有文档内容的容器，以他为模板commit一个没有doc的tomcat新镜像 atguigu/tomcat02</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095408.png"></p>
<p>4、启动我们的新镜像并和原来的对比</p>
<p>​    启动atuigu/tomcat02 没有doc</p>
<p>​    启动原来tomcat他有doc</p>
<h1 id="第五章-Docker容器数据卷"><a href="#第五章-Docker容器数据卷" class="headerlink" title="第五章 Docker容器数据卷"></a>第五章 Docker容器数据卷</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p>先来看看<strong>Docker</strong>的理念:<br><em>将运用与运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对数据的要求希望是持久化的
</em>容器之间希望有可能共享数据<br><strong>Docker</strong>容器产生的数据，如果不通过<strong>docker</strong> <strong>commit</strong>生成新的镜像，使得数据做为镜像的一部分保存下来，<br>那么当容器删除后，数据自然也就没有了。<br>为了能保存数据在docker中我们使用卷。|</p>
<p>一句话：有点类似我们Redis里面的rdb和aof文件</p>
<h2 id="能干嘛-1"><a href="#能干嘛-1" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>卷就是目录或文件，存在于一个或多个容器中，由<strong>docker</strong>挂载到容器，但不属于联合文件系统，因此能够绕过Union FileSystem提供一些用 于持续存储或共享数据的特性:<br>卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不 会在容器删除时删除其挂载的数据卷</p>
<p>特点:<br>1:数据卷可在容器之间共享或重用数据<br>2:卷中的更改可以直接生效<br>3:数据卷中的更改不会包含在镜像的更新中<br>4:数据卷的生命周期一直持续到没有容器使用它为止</p>
<p><strong>容器的持久化</strong></p>
<p><strong>容器间继承+共享数据</strong></p>
<h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h3 id="容器内添加"><a href="#容器内添加" class="headerlink" title="容器内添加"></a>容器内添加</h3><h4 id="直接命令添加"><a href="#直接命令添加" class="headerlink" title="直接命令添加"></a>直接命令添加</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095414.png"></p>
<p>docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名</p>
<p>查看数据卷是否挂载成功</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095419.png"></p>
<p>容器和宿主机之间数据共享</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095423.png"></p>
<p>容器停止退出后，主机修改后的数据是否同步</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095427.png"></p>
<p>命令(带权限)</p>
<p>​    docker run -it -v /宿主机绝对路径目录:/容器内目录<strong>:ro</strong> 镜像名</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095430.png"></p>
<h4 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h4><p>根目录下新建mydocker文件夹并进入</p>
<p>可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095434.png"></p>
<p>File构建</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095438.png"></p>
<p>build后生成镜像</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095446.png"></p>
<p>获得一个新镜像zzyy/centos</p>
<p>run容器</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095450.png"></p>
<p>通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录在哪</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095454.png"></p>
<p><strong>主机对应默认地址</strong></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095458.png"></p>
<p>备注</p>
<p>Docker挂载主机目录Docker访问出现cannot open directory . Permission denied<br>解决办法:在挂载目录后多加一个—privileged=true参数即可</p>
<h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><h3 id="是什么-2"><a href="#是什么-2" class="headerlink" title="是什么"></a>是什么</h3><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器.</p>
<h3 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h3><p>以上一步新建的zzyy/centos为模板并运行容器 doc1/doc2/doc3</p>
<p>他们已经具有容器卷</p>
<p>​    /dataVolumeContainer1</p>
<p>​    /dataVolumeContainer2</p>
<h3 id="容器间传递共享-—volumes-from"><a href="#容器间传递共享-—volumes-from" class="headerlink" title="容器间传递共享(—volumes -from)"></a>容器间传递共享(—volumes -from)</h3><h4 id="先启动一个父容器doc1"><a href="#先启动一个父容器doc1" class="headerlink" title="先启动一个父容器doc1"></a>先启动一个父容器doc1</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095502.png"></p>
<p>启动后在 dataVolumeContainer1中新增内容</p>
<h4 id="doc2-doc3-继承doc1"><a href="#doc2-doc3-继承doc1" class="headerlink" title="doc2/doc3 继承doc1"></a>doc2/doc3 继承doc1</h4><p>​    <strong>—volumes -from</strong></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095506.png"></p>
<p>doc2/doc3 分别在dataVolumeContainer2各自新增内容</p>
<h4 id="回到doc1可以看到02-03各自添加的都能共享了"><a href="#回到doc1可以看到02-03各自添加的都能共享了" class="headerlink" title="回到doc1可以看到02/03各自添加的都能共享了"></a>回到doc1可以看到02/03各自添加的都能共享了</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095510.png"></p>
<h4 id="删除doc1-doc2修改后doc3是否可以访问"><a href="#删除doc1-doc2修改后doc3是否可以访问" class="headerlink" title="删除doc1 doc2修改后doc3是否可以访问"></a>删除doc1 doc2修改后doc3是否可以访问</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095515.png"></p>
<h4 id="删除doc02后doc3是否访问"><a href="#删除doc02后doc3是否访问" class="headerlink" title="删除doc02后doc3是否访问"></a>删除doc02后doc3是否访问</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095519.png"></p>
<p>在进一步</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095523.png"></p>
<h4 id="新建doc04继承doc03-然后删除doc03"><a href="#新建doc04继承doc03-然后删除doc03" class="headerlink" title="新建doc04继承doc03 然后删除doc03"></a>新建doc04继承doc03 然后删除doc03</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095527.png"></p>
<p><strong>结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</strong></p>
<h1 id="第六章-DockerFile解析"><a href="#第六章-DockerFile解析" class="headerlink" title="第六章 DockerFile解析"></a>第六章 DockerFile解析</h1><h2 id="是什么-3"><a href="#是什么-3" class="headerlink" title="是什么"></a>是什么</h2><h3 id="Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本"><a href="#Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本" class="headerlink" title="Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本"></a>Dockerfile是用来构建Docker镜像的构建文件，由一系列命令和参数构成的脚本</h3><h3 id="构建三步骤"><a href="#构建三步骤" class="headerlink" title="构建三步骤"></a>构建三步骤</h3><p>​    编写Dockerfile文件</p>
<p>​    docker build</p>
<p>​    docker run</p>
<h3 id="文件什么样？？？"><a href="#文件什么样？？？" class="headerlink" title="文件什么样？？？"></a>文件什么样？？？</h3><p>​    熟悉的Centos为例</p>
<p><a href="http://hub.docker.com/_/centos" target="_blank" rel="noopener">http://hub.docker.com/_/centos</a></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095531.png"></p>
<h2 id="DockerFile构建过程解析"><a href="#DockerFile构建过程解析" class="headerlink" title="DockerFile构建过程解析"></a>DockerFile构建过程解析</h2><p>Dockerfile内容基础知识</p>
<p>1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数<br>2、 指令按照从.上到下，顺序执行<br>3、#表示注释<br>4、每条指令都会创建一个新的镜像层，并对镜像进行提交</p>
<h3 id="Docker执行Dockerfile的大致流程"><a href="#Docker执行Dockerfile的大致流程" class="headerlink" title="Docker执行Dockerfile的大致流程"></a>Docker执行Dockerfile的大致流程</h3><p>1、 docker 从基础镜像运行一个容器<br>2、执行一-条指令并对容器作出修改<br>3、执行类似docker commit的操作提交- -个新的镜像层<br>4、docker再基 于刚提交的镜像运行一一个新容器<br>5、执行dockerfile中的 下一条指令直到所有指令都执行完成</p>
<h3 id="小总结-2"><a href="#小总结-2" class="headerlink" title="小总结"></a>小总结</h3><p>从应用软件的角度来看，Dockerfile、 Docker镜像与Docker容器分别代表软件的三个不同阶段，<br>Dockerfile是软件的原材料<br>Docker镜像是软件的交付品<br>Docker容器则可以认为是软件的运行态。<br>Dockerfile面向开发，Docker镜 像成为交付标准，Docker容 器则涉及部署与运维，三者缺- -不可，合力充当Docker体系的基石。</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095538.png"></p>
<p>1、Dockerfile，需要定义一个Dockerfile，Dockerfile定 义了进程需要的一切东西。Dockerfile涉 及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;<br>2、Docker镜像，在用Dockerfile定义一文件之后，docker build时会产生- -个Docker镜像，当运行Docker镜像时，会真正开始提供服务;<br>3、Docker容器，容器是直接提供服务的。</p>
<h2 id="DockerFile体系结构-保留字指令"><a href="#DockerFile体系结构-保留字指令" class="headerlink" title="DockerFile体系结构(保留字指令)"></a>DockerFile体系结构(保留字指令)</h2><p><img style="zoom:200%;" data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095546.png"></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095551.png"></p>
<p>小总结</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095555.png"></p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="Base-镜像-scratch"><a href="#Base-镜像-scratch" class="headerlink" title="Base 镜像(scratch)"></a>Base 镜像(scratch)</h3><p>Docker Hub中 99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095559.png"></p>
<h3 id="自定义镜像mycentos"><a href="#自定义镜像mycentos" class="headerlink" title="自定义镜像mycentos"></a>自定义镜像mycentos</h3><h4 id="1、编写"><a href="#1、编写" class="headerlink" title="1、编写"></a>1、编写</h4><p>​    Hub默认Centos镜像是什么情况</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095603.png"></p>
<p>准备Dockerfile文件</p>
<p>myCentOS内容Dockerfile</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095607.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER ZZYY&lt;zzyy167@126.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo "success--------------ok"</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="2、构建"><a href="#2、构建" class="headerlink" title="2、构建"></a>2、构建</h4><p>docker build -t 新镜像名字:TAG .</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095613.png"></p>
<h4 id="3、运行"><a href="#3、运行" class="headerlink" title="3、运行"></a>3、运行</h4><p>docker run -it 新镜像名字:TAG </p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095617.png"></p>
<h4 id="4、列出镜像的变更历史"><a href="#4、列出镜像的变更历史" class="headerlink" title="4、列出镜像的变更历史"></a>4、列出镜像的变更历史</h4><p>docker history 镜像名</p>
<p>CMD/ENTRYPOINT 镜像案例</p>
<p>都是指定一个容器启动时要运行的命令</p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>​    Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被dockerrun之后的参数替换</p>
<p>​    Case</p>
<p>​    tomcat的讲解演示 docker run -it -p 8080:8080 tomcat ls -l</p>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>​    docker run 之后的参数会被当做参数传递给 ENTRYPOINT 之后形成新的命令组合</p>
<p>​    Case </p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095622.png"></p>
<p>制作CMD版可以查询IP信息的容器</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095625.png"></p>
<h4 id="curl的命令解释"><a href="#curl的命令解释" class="headerlink" title="curl的命令解释"></a>curl的命令解释</h4><p><strong>curl</strong>命令可以用来执行下载、发送各种<strong>HTTP</strong>请求，指定<strong>HTTP</strong>头部等操作。</p>
<p>如果系统没有<strong>curl</strong>可以使用<strong>yum install curl</strong>安装，也可以下载安装。<br><strong>curl是将下载文件输出到stdout</strong><br>使用命令: curl <a href="http://www" target="_blank" rel="noopener">http://www</a> .baidu.com<br>执行后，www.baidu.com的html就会显示在屏幕上了</p>
<p>这是最简单的使用方法。用这个命令获得了htp://curl.haxx.se指向的页面，同样，如果这里的URL指向的是—个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数-i</p>
<p>WHY</p>
<p>我们可以看到可执行文件找不到的报错，<strong>executable file not found。</strong><br>之前我们说过，<strong>跟在镜像名后面的是command,运行时会替换CMD的默认值。</strong><br>因此这里的-i替换了原来的CMD，而不是添加在原来的curl -s htp://ip.cn后面。而-i 根本不是命令，所以自然找不到。<br>那么如果我们希望加入-i这参数，我们就必须重新完整的输入这个命令:<br><strong>$ docker run myip curl -s <a href="http://ip.cn" target="_blank" rel="noopener">http://ip.cn</a> -i</strong></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095631.png"></p>
<h3 id="自定义镜像Tomcat"><a href="#自定义镜像Tomcat" class="headerlink" title="自定义镜像Tomcat"></a>自定义镜像Tomcat</h3><h4 id="1、mkdir-p-zzyy-mydockerfile-tomcat9"><a href="#1、mkdir-p-zzyy-mydockerfile-tomcat9" class="headerlink" title="1、mkdir -p /zzyy/mydockerfile/tomcat9"></a>1、mkdir -p /zzyy/mydockerfile/tomcat9</h4><h4 id="2、在上述目录下-touch-c-txt"><a href="#2、在上述目录下-touch-c-txt" class="headerlink" title="2、在上述目录下 touch c.txt"></a>2、在上述目录下 touch c.txt</h4><h4 id="3、将jdk和tomcat安装的压缩包拷贝进上一步目录"><a href="#3、将jdk和tomcat安装的压缩包拷贝进上一步目录" class="headerlink" title="3、将jdk和tomcat安装的压缩包拷贝进上一步目录"></a>3、将jdk和tomcat安装的压缩包拷贝进上一步目录</h4><h4 id="4、在zzyyuse-mydockerfile-tomcat9目录下新建Dockerfile文件"><a href="#4、在zzyyuse-mydockerfile-tomcat9目录下新建Dockerfile文件" class="headerlink" title="4、在zzyyuse/mydockerfile/tomcat9目录下新建Dockerfile文件"></a>4、在zzyyuse/mydockerfile/tomcat9目录下新建Dockerfile文件</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> zzyy&lt;zzyybs@ <span class="number">126</span>.com&gt;</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c .txt拷贝到容器/usr/local/路径下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> c.txt /usr/<span class="built_in">local</span>/cincontainer.txt</span></span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u171-linux x64.tar .gz /usr/<span class="built_in">local</span>/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-9.0.8.tar.gz /usr/ocal/</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#设置工 作访问时候的WORKDIR路径， 登录落脚点</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment">#配:置java与tomcat环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_ HOME /usr/localjdk1 .<span class="number">8.0</span>_ <span class="number">171</span></span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_ HOME/lib/dt.jar:$JAVA_ HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_ HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_ BASE /usr/ocal/apache-tomcat-<span class="number">9.0</span>.<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_ HOME/bin:$CATALINA_ HOME/ib:$CATALINA_ HOME/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment"># ENTRYPOINT ["/usrl/local/apache-tomcat-9.0.8/bin/startup.sh" ]</span></span><br><span class="line"><span class="comment"># CMD ["/usr/local/apache-tomcat-9.0.8/bin/catalina.sh","run"]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/bin/startup.sh &amp;&amp; tail -F /usr/<span class="built_in">local</span>/apache-tomcat-9.0.8/<span class="keyword">in</span>/logs/catalina.out</span></span><br></pre></td></tr></table></figure>
<p>目录内容</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095636.png"></p>
<h4 id="5、构建"><a href="#5、构建" class="headerlink" title="5、构建"></a>5、构建</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095640.png"></p>
<p>构建完成</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095643.png"></p>
<h4 id="6、run"><a href="#6、run" class="headerlink" title="6、run"></a>6、run</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 9080:8080 -name myt9</span></span><br><span class="line"> -v /zyuse/mydockerfiletomcat9/test:/usrlocal/apache-tomcat9.<span class="number">0.8</span>/webapps/test</span><br><span class="line"> -v /zzyyuse/mydockerfile/tomcat9/tomcat9logs/:/usrlocal/apache-tomcat-<span class="number">9.0</span>.<span class="number">8</span>/logs -privileged=true zzyytomcat9</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095647.png"></p>
<p>备注</p>
<p>Docker挂载主机目录Docker访问出现cannot open directory : Permission denied解决办法:在挂载目录后多加一个—privileged=true参数即可</p>
<h4 id="7、验证"><a href="#7、验证" class="headerlink" title="7、验证"></a>7、验证</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095652.png"></p>
<h4 id="8、综合前-述容器卷测试的web服务test发布"><a href="#8、综合前-述容器卷测试的web服务test发布" class="headerlink" title="8、综合前 述容器卷测试的web服务test发布"></a>8、综合前 述容器卷测试的web服务test发布</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095656.png"></p>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1 .0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmIns:xsi</span>=<span class="string">"http://www.w3.org/2001/XML Schema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmIns</span>=<span class="string">"http://java sun.com/xm/ns/javaee"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaL</span> <span class="attr">ocation</span>=<span class="string">"http://java. sun.com/xml/ns/javaee htp:/:/java. sun.com/xml/ns/javaee/web-app_ 2_ _5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>a.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC“<span class="comment">//W3C//DTD HTML 4.01 Transitional//EN" http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here &lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">welcome-</span><br><span class="line">&lt;%=<span class="string">"i am in docker tomcat self "</span>%&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;% System.out,.printIn(<span class="string">"==========docker tomcat self"</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/htmI&gt;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC“//W3C//DTD HTML 4.01 Transitional//EN" http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">welcome-</span><br><span class="line"><span class="tag">&lt;<span class="name">%="i</span> <span class="attr">am</span> <span class="attr">in</span> <span class="attr">docker</span> <span class="attr">tomcat</span> <span class="attr">self</span> "%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">System.out</span>,<span class="attr">.printIn</span>("==========<span class="string">docker</span> <span class="attr">tomcat</span> <span class="attr">self</span>");%&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">htmI</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="小总结-3"><a href="#小总结-3" class="headerlink" title="小总结"></a>小总结</h2><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095705.png"></p>
<h1 id="第七章-Docker常用安装"><a href="#第七章-Docker常用安装" class="headerlink" title="第七章 Docker常用安装"></a>第七章 Docker常用安装</h1><h2 id="总体步骤"><a href="#总体步骤" class="headerlink" title="总体步骤"></a>总体步骤</h2><blockquote>
<p>搜索镜像</p>
<p>拉取镜像</p>
<p>查看镜像</p>
<p>启动镜像</p>
<p>停止容器</p>
<p>移除容器</p>
</blockquote>
<h2 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h2><h3 id="docker-hub-上查找mysql镜像"><a href="#docker-hub-上查找mysql镜像" class="headerlink" title="docker hub 上查找mysql镜像"></a>docker hub 上查找mysql镜像</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095710.png"></p>
<h3 id="从-docker-hub-阿里云加速器-拉取mysql镜像到本地标签为5-6"><a href="#从-docker-hub-阿里云加速器-拉取mysql镜像到本地标签为5-6" class="headerlink" title="从 docker hub(阿里云加速器)拉取mysql镜像到本地标签为5.6"></a>从 docker hub(阿里云加速器)拉取mysql镜像到本地标签为5.6</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095713.png"></p>
<h3 id="使用mysql5-6镜像创建容器-也叫运行镜像"><a href="#使用mysql5-6镜像创建容器-也叫运行镜像" class="headerlink" title="使用mysql5.6镜像创建容器(也叫运行镜像)"></a>使用mysql5.6镜像创建容器(也叫运行镜像)</h3><p>使用mysql镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 12345:3306 --name mysql </span><br><span class="line">-v /ggcc/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-v /ggcc/mysql/logs:/logs </span><br><span class="line">-v /ggcc/mysql/data:/var/lib/mysql </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.6</span><br><span class="line">----------------------------------------------</span><br><span class="line">命令说明:</span><br><span class="line">-p 12345:3306:将主机的12345端口映射到docker容器的3306端口。</span><br><span class="line">-name mysq:运行服务名字</span><br><span class="line">-V /ggcc/mysql/conf:/etc/mysql/conf.d :将主机/zzyyuse/mysq|录下的conf/my.cnf挂载到容器的/etc/mysql/conf.d</span><br><span class="line">-v /ggcc/mysqlogs/logs: 将主机/zzyyuse/mysq|目 录下的logs 目录挂载到容器的/logs。</span><br><span class="line">-V /ggcc/mysqldata:/var/lib/mysql :将主机lzzyyuse/mysql目录下的data目录挂载到容器的/var/lib/mysql .</span><br><span class="line">-e MYSQL_ ROOT_ PASSWORD=123456: 初始化root用户的密码。.</span><br><span class="line">-d mysql:5.6:后台程序运行mysql5.6 </span><br><span class="line">----------------------------------------------</span><br><span class="line">docker exec -it Mysql运行成功后的容器ID /bin/bash</span><br><span class="line">----------------------------------------------</span><br><span class="line">数据备份小测试</span><br><span class="line">docker exec mysql服务容器ID sh -c 'exec mysqldump --all-databases -uroot -p"123456"' &gt;/ggcc/all-database.sql</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095717.png"></p>
<h3 id="数据备份测试"><a href="#数据备份测试" class="headerlink" title="数据备份测试"></a>数据备份测试</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095721.png"></p>
<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><h3 id="从docker-hu上-阿里云加速器-拉取redis镜像到本地标签为：3-2"><a href="#从docker-hu上-阿里云加速器-拉取redis镜像到本地标签为：3-2" class="headerlink" title="从docker hu上(阿里云加速器)拉取redis镜像到本地标签为：3.2"></a>从docker hu上(阿里云加速器)拉取redis镜像到本地标签为：3.2</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095728.png"></p>
<h3 id="使用redis3-2镜像创建容器-也叫运行镜像"><a href="#使用redis3-2镜像创建容器-也叫运行镜像" class="headerlink" title="使用redis3.2镜像创建容器(也叫运行镜像)"></a>使用redis3.2镜像创建容器(也叫运行镜像)</h3><p>​    使用镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 -v /ggcc/myredis/data:/data -v /ggcc/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure>
<h3 id="在主机-ggcc-myredis-conf-redis-conf目录上新建redis-conf文件"><a href="#在主机-ggcc-myredis-conf-redis-conf目录上新建redis-conf文件" class="headerlink" title="在主机/ggcc/myredis/conf/redis.conf目录上新建redis.conf文件"></a>在主机/ggcc/myredis/conf/redis.conf目录上新建redis.conf文件</h3><p>vim /ggcc/myredis/conf/redis.conf/redis.conf</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># Redis configuration file example.</span><br><span class="line">#</span><br><span class="line"># Note that in order to read the configuration file, Redis must be</span><br><span class="line"># started with the file path as first argument:</span><br><span class="line">#</span><br><span class="line"># ./redis-server /path/to/redis.conf</span><br><span class="line"></span><br><span class="line"># Note on units: when memory size is needed, it is possible to specify</span><br><span class="line"># it in the usual form of 1k 5GB 4M and so forth:</span><br><span class="line">#</span><br><span class="line"># 1k =&gt; 1000 bytes</span><br><span class="line"># 1kb =&gt; 1024 bytes</span><br><span class="line"># 1m =&gt; 1000000 bytes</span><br><span class="line"># 1mb =&gt; 1024*1024 bytes</span><br><span class="line"># 1g =&gt; 1000000000 bytes</span><br><span class="line"># 1gb =&gt; 1024*1024*1024 bytes</span><br><span class="line">#</span><br><span class="line"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span><br><span class="line"></span><br><span class="line">################################## INCLUDES ###################################</span><br><span class="line"></span><br><span class="line"># Include one or more other config files here.  This is useful if you</span><br><span class="line"># have a standard template that goes to all Redis servers but also need</span><br><span class="line"># to customize a few per-server settings.  Include files can include</span><br><span class="line"># other files, so use this wisely.</span><br><span class="line">#</span><br><span class="line"># Notice option "include" won't be rewritten by command "CONFIG REWRITE"</span><br><span class="line"># from admin or Redis Sentinel. Since Redis always uses the last processed</span><br><span class="line"># line as value of a configuration directive, you'd better put includes</span><br><span class="line"># at the beginning of this file to avoid overwriting config change at runtime.</span><br><span class="line">#</span><br><span class="line"># If instead you are interested in using includes to override configuration</span><br><span class="line"># options, it is better to use include as the last line.</span><br><span class="line">#</span><br><span class="line"># include /path/to/local.conf</span><br><span class="line"># include /path/to/other.conf</span><br><span class="line"></span><br><span class="line">################################## MODULES #####################################</span><br><span class="line"></span><br><span class="line"># Load modules at startup. If the server is not able to load modules</span><br><span class="line"># it will abort. It is possible to use multiple loadmodule directives.</span><br><span class="line">#</span><br><span class="line"># loadmodule /path/to/my_module.so</span><br><span class="line"># loadmodule /path/to/other_module.so</span><br><span class="line"></span><br><span class="line">################################## NETWORK #####################################</span><br><span class="line"></span><br><span class="line"># By default, if no "bind" configuration directive is specified, Redis listens</span><br><span class="line"># for connections from all the network interfaces available on the server.</span><br><span class="line"># It is possible to listen to just one or multiple selected interfaces using</span><br><span class="line"># the "bind" configuration directive, followed by one or more IP addresses.</span><br><span class="line">#</span><br><span class="line"># Examples:</span><br><span class="line">#</span><br><span class="line"># bind 192.168.1.100 10.0.0.1</span><br><span class="line"># bind 127.0.0.1 ::1</span><br><span class="line">#</span><br><span class="line"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span><br><span class="line"># internet, binding to all the interfaces is dangerous and will expose the</span><br><span class="line"># instance to everybody on the internet. So by default we uncomment the</span><br><span class="line"># following bind directive, that will force Redis to listen only into</span><br><span class="line"># the IPv4 loopback interface address (this means Redis will be able to</span><br><span class="line"># accept connections only from clients running into the same computer it</span><br><span class="line"># is running).</span><br><span class="line">#</span><br><span class="line"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span><br><span class="line"># JUST COMMENT THE FOLLOWING LINE.</span><br><span class="line"># ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">#bind 127.0.0.1</span><br><span class="line"></span><br><span class="line"># Protected mode is a layer of security protection, in order to avoid that</span><br><span class="line"># Redis instances left open on the internet are accessed and exploited.</span><br><span class="line">#</span><br><span class="line"># When protected mode is on and if:</span><br><span class="line">#</span><br><span class="line"># 1) The server is not binding explicitly to a set of addresses using the</span><br><span class="line">#    "bind" directive.</span><br><span class="line"># 2) No password is configured.</span><br><span class="line">#</span><br><span class="line"># The server only accepts connections from clients connecting from the</span><br><span class="line"># IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span><br><span class="line"># sockets.</span><br><span class="line">#</span><br><span class="line"># By default protected mode is enabled. You should disable it only if</span><br><span class="line"># you are sure you want clients from other hosts to connect to Redis</span><br><span class="line"># even if no authentication is configured, nor a specific set of interfaces</span><br><span class="line"># are explicitly listed using the "bind" directive.</span><br><span class="line"><span class="keyword">protected</span>-mode yes</span><br><span class="line"></span><br><span class="line"># Accept connections on the specified port, default is 6379 (IANA #815344).</span><br><span class="line"># If port 0 is specified Redis will not listen on a TCP socket.</span><br><span class="line">port <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"># TCP listen() backlog.</span><br><span class="line">#</span><br><span class="line"># In high requests-per-second environments you need an high backlog in order</span><br><span class="line"># to avoid slow clients connections issues. Note that the Linux kernel</span><br><span class="line"># will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span><br><span class="line"># make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span><br><span class="line"># in order to get the desired effect.</span><br><span class="line">tcp-backlog <span class="number">511</span></span><br><span class="line"></span><br><span class="line"># Unix socket.</span><br><span class="line">#</span><br><span class="line"># Specify the path for the Unix socket that will be used to listen for</span><br><span class="line"># incoming connections. There is no default, so Redis will not listen</span><br><span class="line"># on a unix socket when not specified.</span><br><span class="line">#</span><br><span class="line"># unixsocket /tmp/redis.sock</span><br><span class="line"># unixsocketperm 700</span><br><span class="line"></span><br><span class="line"># Close the connection after a client is idle for N seconds (0 to disable)</span><br><span class="line">timeout <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># TCP keepalive.</span><br><span class="line">#</span><br><span class="line"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span><br><span class="line"># of communication. This is useful for two reasons:</span><br><span class="line">#</span><br><span class="line"># 1) Detect dead peers.</span><br><span class="line"># 2) Take the connection alive from the point of view of network</span><br><span class="line">#    equipment in the middle.</span><br><span class="line">#</span><br><span class="line"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span><br><span class="line"># Note that to close the connection the double of the time is needed.</span><br><span class="line"># On other kernels the period depends on the kernel configuration.</span><br><span class="line">#</span><br><span class="line"># A reasonable value for this option is 300 seconds, which is the new</span><br><span class="line"># Redis default starting with Redis 3.2.1.</span><br><span class="line">tcp-keepalive <span class="number">300</span></span><br><span class="line"></span><br><span class="line">################################# TLS/SSL #####################################</span><br><span class="line"></span><br><span class="line"># By default, TLS/SSL is disabled. To enable it, the "tls-port" configuration</span><br><span class="line"># directive can be used to define TLS-listening ports. To enable TLS on the</span><br><span class="line"># default port, use:</span><br><span class="line">#</span><br><span class="line"># port 0</span><br><span class="line"># tls-port 6379</span><br><span class="line"></span><br><span class="line"># Configure a X.509 certificate and private key to use for authenticating the</span><br><span class="line"># server to connected clients, masters or cluster peers.  These files should be</span><br><span class="line"># PEM formatted.</span><br><span class="line">#</span><br><span class="line"># tls-cert-file redis.crt </span><br><span class="line"># tls-key-file redis.key</span><br><span class="line"></span><br><span class="line"># Configure a DH parameters file to enable Diffie-Hellman (DH) key exchange:</span><br><span class="line">#</span><br><span class="line"># tls-dh-params-file redis.dh</span><br><span class="line"></span><br><span class="line"># Configure a CA certificate(s) bundle or directory to authenticate TLS/SSL</span><br><span class="line"># clients and peers.  Redis requires an explicit configuration of at least one</span><br><span class="line"># of these, and will not implicitly use the system wide configuration.</span><br><span class="line">#</span><br><span class="line"># tls-ca-cert-file ca.crt</span><br><span class="line"># tls-ca-cert-dir /etc/ssl/certs</span><br><span class="line"></span><br><span class="line"># By default, clients (including replica servers) on a TLS port are required</span><br><span class="line"># to authenticate using valid client side certificates.</span><br><span class="line">#</span><br><span class="line"># If "no" is specified, client certificates are not required and not accepted.</span><br><span class="line"># If "optional" is specified, client certificates are accepted and must be</span><br><span class="line"># valid if provided, but are not required.</span><br><span class="line">#</span><br><span class="line"># tls-auth-clients no</span><br><span class="line"># tls-auth-clients optional</span><br><span class="line"></span><br><span class="line"># By default, a Redis replica does not attempt to establish a TLS connection</span><br><span class="line"># with its master.</span><br><span class="line">#</span><br><span class="line"># Use the following directive to enable TLS on replication links.</span><br><span class="line">#</span><br><span class="line"># tls-replication yes</span><br><span class="line"></span><br><span class="line"># By default, the Redis Cluster bus uses a plain TCP connection. To enable</span><br><span class="line"># TLS for the bus protocol, use the following directive:</span><br><span class="line">#</span><br><span class="line"># tls-cluster yes</span><br><span class="line"></span><br><span class="line"># Explicitly specify TLS versions to support. Allowed values are case insensitive</span><br><span class="line"># and include "TLSv1", "TLSv1.1", "TLSv1.2", "TLSv1.3" (OpenSSL &gt;= 1.1.1) or</span><br><span class="line"># any combination. To enable only TLSv1.2 and TLSv1.3, use:</span><br><span class="line">#</span><br><span class="line"># tls-protocols "TLSv1.2 TLSv1.3"</span><br><span class="line"></span><br><span class="line"># Configure allowed ciphers.  See the ciphers(1ssl) manpage for more information</span><br><span class="line"># about the syntax of this string.</span><br><span class="line">#</span><br><span class="line"># Note: this configuration applies only to &lt;= TLSv1.2.</span><br><span class="line">#</span><br><span class="line"># tls-ciphers DEFAULT:!MEDIUM</span><br><span class="line"></span><br><span class="line"># Configure allowed TLSv1.3 ciphersuites.  See the ciphers(1ssl) manpage for more</span><br><span class="line"># information about the syntax of this string, and specifically for TLSv1.3</span><br><span class="line"># ciphersuites.</span><br><span class="line">#</span><br><span class="line"># tls-ciphersuites TLS_CHACHA20_POLY1305_SHA256</span><br><span class="line"></span><br><span class="line"># When choosing a cipher, use the server's preference instead of the client</span><br><span class="line"># preference. By default, the server follows the client's preference.</span><br><span class="line">#</span><br><span class="line"># tls-prefer-server-ciphers yes</span><br><span class="line"></span><br><span class="line"># By default, TLS session caching is enabled to allow faster and less expensive</span><br><span class="line"># reconnections by clients that support it. Use the following directive to disable</span><br><span class="line"># caching.</span><br><span class="line">#</span><br><span class="line"># tls-session-caching no</span><br><span class="line"></span><br><span class="line"># Change the default number of TLS sessions cached. A zero value sets the cache</span><br><span class="line"># to unlimited size. The default size is 20480.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-size 5000</span><br><span class="line"></span><br><span class="line"># Change the default timeout of cached TLS sessions. The default timeout is 300</span><br><span class="line"># seconds.</span><br><span class="line">#</span><br><span class="line"># tls-session-cache-timeout 60</span><br><span class="line"></span><br><span class="line">################################# GENERAL #####################################</span><br><span class="line"></span><br><span class="line"># By default Redis does not run as a daemon. Use 'yes' if you need it.</span><br><span class="line"># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"># If you run Redis from upstart or systemd, Redis can interact with your</span><br><span class="line"># supervision tree. Options:</span><br><span class="line">#   supervised no      - no supervision interaction</span><br><span class="line">#   supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span><br><span class="line">#   supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span><br><span class="line">#   supervised auto    - detect upstart or systemd method based on</span><br><span class="line">#                        UPSTART_JOB or NOTIFY_SOCKET environment variables</span><br><span class="line"># Note: these supervision methods only signal "process is ready."</span><br><span class="line">#       They do not enable continuous liveness pings back to your supervisor.</span><br><span class="line">supervised no</span><br><span class="line"></span><br><span class="line"># If a pid file is specified, Redis writes it where specified at startup</span><br><span class="line"># and removes it at exit.</span><br><span class="line">#</span><br><span class="line"># When the server runs non daemonized, no pid file is created if none is</span><br><span class="line"># specified in the configuration. When the server is daemonized, the pid file</span><br><span class="line"># is used even if not specified, defaulting to "/var/run/redis.pid".</span><br><span class="line">#</span><br><span class="line"># Creating a pid file is best effort: if Redis is not able to create it</span><br><span class="line"># nothing bad happens, the server will start and run normally.</span><br><span class="line">pidfile /<span class="keyword">var</span>/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"># Specify the server verbosity level.</span><br><span class="line"># This can be one of:</span><br><span class="line"># debug (a lot of information, useful for development/testing)</span><br><span class="line"># verbose (many rarely useful info, but not a mess like the debug level)</span><br><span class="line"># notice (moderately verbose, what you want in production probably)</span><br><span class="line"># warning (only very important / critical messages are logged)</span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"># Specify the log file name. Also the empty string can be used to force</span><br><span class="line"># Redis to log on the standard output. Note that if you use standard</span><br><span class="line"># output for logging but daemonize, logs will be sent to /dev/null</span><br><span class="line">logfile <span class="string">""</span></span><br><span class="line"></span><br><span class="line"># To enable logging to the system logger, just set 'syslog-enabled' to yes,</span><br><span class="line"># and optionally update the other syslog parameters to suit your needs.</span><br><span class="line"># syslog-enabled no</span><br><span class="line"></span><br><span class="line"># Specify the syslog identity.</span><br><span class="line"># syslog-ident redis</span><br><span class="line"></span><br><span class="line"># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span><br><span class="line"># syslog-facility local0</span><br><span class="line"></span><br><span class="line"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="line"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="line"># dbid is a number between 0 and 'databases'-1</span><br><span class="line">databases <span class="number">16</span></span><br><span class="line"></span><br><span class="line"># By default Redis shows an ASCII art logo only when started to log to the</span><br><span class="line"># standard output and if the standard output is a TTY. Basically this means</span><br><span class="line"># that normally a logo is displayed only in interactive sessions.</span><br><span class="line">#</span><br><span class="line"># However it is possible to force the pre-4.0 behavior and always show a</span><br><span class="line"># ASCII art logo in startup logs by setting the following option to yes.</span><br><span class="line">always-show-logo yes</span><br><span class="line"></span><br><span class="line">################################ SNAPSHOTTING  ################################</span><br><span class="line">#</span><br><span class="line"># Save the DB on disk:</span><br><span class="line">#</span><br><span class="line">#   save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">#</span><br><span class="line">#   Will save the DB if both the given number of seconds and the given</span><br><span class="line">#   number of write operations against the DB occurred.</span><br><span class="line">#</span><br><span class="line">#   In the example below the behaviour will be to save:</span><br><span class="line">#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">#   after 60 sec if at least 10000 keys changed</span><br><span class="line">#</span><br><span class="line">#   Note: you can disable saving completely by commenting out all "save" lines.</span><br><span class="line">#</span><br><span class="line">#   It is also possible to remove all the previously configured save</span><br><span class="line">#   points by adding a save directive with a single empty string argument</span><br><span class="line">#   like in the following example:</span><br><span class="line">#</span><br><span class="line">#   save ""</span><br><span class="line"></span><br><span class="line">save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"># By default Redis will stop accepting writes if RDB snapshots are enabled</span><br><span class="line"># (at least one save point) and the latest background save failed.</span><br><span class="line"># This will make the user aware (in a hard way) that data is not persisting</span><br><span class="line"># on disk properly, otherwise chances are that no one will notice and some</span><br><span class="line"># disaster will happen.</span><br><span class="line">#</span><br><span class="line"># If the background saving process will start working again Redis will</span><br><span class="line"># automatically allow writes again.</span><br><span class="line">#</span><br><span class="line"># However if you have setup your proper monitoring of the Redis server</span><br><span class="line"># and persistence, you may want to disable this feature so that Redis will</span><br><span class="line"># continue to work as usual even if there are problems with disk,</span><br><span class="line"># permissions, and so forth.</span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"># Compress string objects using LZF when dump .rdb databases?</span><br><span class="line"># For default that's set to 'yes' as it's almost always a win.</span><br><span class="line"># If you want to save some CPU in the saving child set it to 'no' but</span><br><span class="line"># the dataset will likely be bigger if you have compressible values or keys.</span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span><br><span class="line"># This makes the format more resistant to corruption but there is a performance</span><br><span class="line"># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span><br><span class="line"># for maximum performances.</span><br><span class="line">#</span><br><span class="line"># RDB files created with checksum disabled have a checksum of zero that will</span><br><span class="line"># tell the loading code to skip the check.</span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"># Remove RDB files used by replication in instances without persistence</span><br><span class="line"># enabled. By default this option is disabled, however there are environments</span><br><span class="line"># where for regulations or other security concerns, RDB files persisted on</span><br><span class="line"># disk by masters in order to feed replicas, or stored on disk by replicas</span><br><span class="line"># in order to load them for the initial synchronization, should be deleted</span><br><span class="line"># ASAP. Note that this option ONLY WORKS in instances that have both AOF</span><br><span class="line"># and RDB persistence disabled, otherwise is completely ignored.</span><br><span class="line">#</span><br><span class="line"># An alternative (and sometimes better) way to obtain the same effect is</span><br><span class="line"># to use diskless replication on both master and replicas instances. However</span><br><span class="line"># in the case of replicas, diskless is not always an option.</span><br><span class="line">rdb-del-sync-files no</span><br><span class="line"></span><br><span class="line"># The working directory.</span><br><span class="line">#</span><br><span class="line"># The DB will be written inside this directory, with the filename specified</span><br><span class="line"># above using the 'dbfilename' configuration directive.</span><br><span class="line">#</span><br><span class="line"># The Append Only File will also be created inside this directory.</span><br><span class="line">#</span><br><span class="line"># Note that you must specify a directory here, not a file name.</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line">################################# REPLICATION #################################</span><br><span class="line"></span><br><span class="line"># Master-Replica replication. Use replicaof to make a Redis instance a copy of</span><br><span class="line"># another Redis server. A few things to understand ASAP about Redis replication.</span><br><span class="line">#</span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line">#   |      Master      | ---&gt; |    Replica    |</span><br><span class="line">#   | (receive writes) |      |  (exact copy) |</span><br><span class="line">#   +------------------+      +---------------+</span><br><span class="line">#</span><br><span class="line"># 1) Redis replication is asynchronous, but you can configure a master to</span><br><span class="line">#    stop accepting writes if it appears to be not connected with at least</span><br><span class="line">#    a given number of replicas.</span><br><span class="line"># 2) Redis replicas are able to perform a partial resynchronization with the</span><br><span class="line">#    master if the replication link is lost for a relatively small amount of</span><br><span class="line">#    time. You may want to configure the replication backlog size (see the next</span><br><span class="line">#    sections of this file) with a sensible value depending on your needs.</span><br><span class="line"># 3) Replication is automatic and does not need user intervention. After a</span><br><span class="line">#    network partition replicas automatically try to reconnect to masters</span><br><span class="line">#    and resynchronize with them.</span><br><span class="line">#</span><br><span class="line"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line"># If the master is password protected (using the "requirepass" configuration</span><br><span class="line"># directive below) it is possible to tell the replica to authenticate before</span><br><span class="line"># starting the replication synchronization process, otherwise the master will</span><br><span class="line"># refuse the replica request.</span><br><span class="line">#</span><br><span class="line"># masterauth &lt;master-password&gt;</span><br><span class="line">#</span><br><span class="line"># However this is not enough if you are using Redis ACLs (for Redis version</span><br><span class="line"># 6 or greater), and the default user is not capable of running the PSYNC</span><br><span class="line"># command and/or other commands needed for replication. In this case it's</span><br><span class="line"># better to configure a special user to use with replication, and specify the</span><br><span class="line"># masteruser configuration as such:</span><br><span class="line">#</span><br><span class="line"># masteruser &lt;username&gt;</span><br><span class="line">#</span><br><span class="line"># When masteruser is specified, the replica will authenticate against its</span><br><span class="line"># master using the new AUTH form: AUTH &lt;username&gt; &lt;password&gt;.</span><br><span class="line"></span><br><span class="line"># When a replica loses its connection with the master, or when the replication</span><br><span class="line"># is still in progress, the replica can act in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) if replica-serve-stale-data is set to 'yes' (the default) the replica will</span><br><span class="line">#    still reply to client requests, possibly with out of date data, or the</span><br><span class="line">#    data set may just be empty if this is the first synchronization.</span><br><span class="line">#</span><br><span class="line"># 2) if replica-serve-stale-data is set to 'no' the replica will reply with</span><br><span class="line">#    an error "SYNC with master in progress" to all the kind of commands</span><br><span class="line">#    but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span><br><span class="line">#    SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span><br><span class="line">#    COMMAND, POST, HOST: and LATENCY.</span><br><span class="line">#</span><br><span class="line">replica-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"># You can configure a replica instance to accept writes or not. Writing against</span><br><span class="line"># a replica instance may be useful to store some ephemeral data (because data</span><br><span class="line"># written on a replica will be easily deleted after resync with the master) but</span><br><span class="line"># may also cause problems if clients are writing to it because of a</span><br><span class="line"># misconfiguration.</span><br><span class="line">#</span><br><span class="line"># Since Redis 2.6 by default replicas are read-only.</span><br><span class="line">#</span><br><span class="line"># Note: read only replicas are not designed to be exposed to untrusted clients</span><br><span class="line"># on the internet. It's just a protection layer against misuse of the instance.</span><br><span class="line"># Still a read only replica exports by default all the administrative commands</span><br><span class="line"># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span><br><span class="line"># security of read only replicas using 'rename-command' to shadow all the</span><br><span class="line"># administrative / dangerous commands.</span><br><span class="line">replica-read-only yes</span><br><span class="line"></span><br><span class="line"># Replication SYNC strategy: disk or socket.</span><br><span class="line">#</span><br><span class="line"># New replicas and reconnecting replicas that are not able to continue the</span><br><span class="line"># replication process just receiving differences, need to do what is called a</span><br><span class="line"># "full synchronization". An RDB file is transmitted from the master to the</span><br><span class="line"># replicas.</span><br><span class="line">#</span><br><span class="line"># The transmission can happen in two different ways:</span><br><span class="line">#</span><br><span class="line"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span><br><span class="line">#                 file on disk. Later the file is transferred by the parent</span><br><span class="line">#                 process to the replicas incrementally.</span><br><span class="line"># 2) Diskless: The Redis master creates a new process that directly writes the</span><br><span class="line">#              RDB file to replica sockets, without touching the disk at all.</span><br><span class="line">#</span><br><span class="line"># With disk-backed replication, while the RDB file is generated, more replicas</span><br><span class="line"># can be queued and served with the RDB file as soon as the current child</span><br><span class="line"># producing the RDB file finishes its work. With diskless replication instead</span><br><span class="line"># once the transfer starts, new replicas arriving will be queued and a new</span><br><span class="line"># transfer will start when the current one terminates.</span><br><span class="line">#</span><br><span class="line"># When diskless replication is used, the master waits a configurable amount of</span><br><span class="line"># time (in seconds) before starting the transfer in the hope that multiple</span><br><span class="line"># replicas will arrive and the transfer can be parallelized.</span><br><span class="line">#</span><br><span class="line"># With slow disks and fast (large bandwidth) networks, diskless replication</span><br><span class="line"># works better.</span><br><span class="line">repl-diskless-sync no</span><br><span class="line"></span><br><span class="line"># When diskless replication is enabled, it is possible to configure the delay</span><br><span class="line"># the server waits in order to spawn the child that transfers the RDB via socket</span><br><span class="line"># to the replicas.</span><br><span class="line">#</span><br><span class="line"># This is important since once the transfer starts, it is not possible to serve</span><br><span class="line"># new replicas arriving, that will be queued for the next RDB transfer, so the</span><br><span class="line"># server waits a delay in order to let more replicas arrive.</span><br><span class="line">#</span><br><span class="line"># The delay is specified in seconds, and by default is 5 seconds. To disable</span><br><span class="line"># it entirely just set it to 0 seconds and the transfer will start ASAP.</span><br><span class="line">repl-diskless-sync-delay <span class="number">5</span></span><br><span class="line"></span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line"># WARNING: RDB diskless load is experimental. Since in this setup the replica</span><br><span class="line"># does not immediately store an RDB on disk, it may cause data loss during</span><br><span class="line"># failovers. RDB diskless load + Redis modules not handling I/O reads may also</span><br><span class="line"># cause Redis to abort in case of I/O errors during the initial synchronization</span><br><span class="line"># stage with the master. Use only if your do what you are doing.</span><br><span class="line"># -----------------------------------------------------------------------------</span><br><span class="line">#</span><br><span class="line"># Replica can load the RDB it reads from the replication link directly from the</span><br><span class="line"># socket, or store the RDB to a file and read that file after it was completely</span><br><span class="line"># recived from the master.</span><br><span class="line">#</span><br><span class="line"># In many cases the disk is slower than the network, and storing and loading</span><br><span class="line"># the RDB file may increase replication time (and even increase the master's</span><br><span class="line"># Copy on Write memory and salve buffers).</span><br><span class="line"># However, parsing the RDB file directly from the socket may mean that we have</span><br><span class="line"># to flush the contents of the current database before the full rdb was</span><br><span class="line"># received. For this reason we have the following options:</span><br><span class="line">#</span><br><span class="line"># "disabled"    - Don't use diskless load (store the rdb file to the disk first)</span><br><span class="line"># "on-empty-db" - Use diskless load only when it is completely safe.</span><br><span class="line"># "swapdb"      - Keep a copy of the current db contents in RAM while parsing</span><br><span class="line">#                 the data directly from the socket. note that this requires</span><br><span class="line">#                 sufficient memory, if you don't have it, you risk an OOM kill.</span><br><span class="line">repl-diskless-load disabled</span><br><span class="line"></span><br><span class="line"># Replicas send PINGs to server in a predefined interval. It's possible to</span><br><span class="line"># change this interval with the repl_ping_replica_period option. The default</span><br><span class="line"># value is 10 seconds.</span><br><span class="line">#</span><br><span class="line"># repl-ping-replica-period 10</span><br><span class="line"></span><br><span class="line"># The following option sets the replication timeout for:</span><br><span class="line">#</span><br><span class="line"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span><br><span class="line"># 2) Master timeout from the point of view of replicas (data, pings).</span><br><span class="line"># 3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span><br><span class="line">#</span><br><span class="line"># It is important to make sure that this value is greater than the value</span><br><span class="line"># specified for repl-ping-replica-period otherwise a timeout will be detected</span><br><span class="line"># every time there is low traffic between the master and the replica.</span><br><span class="line">#</span><br><span class="line"># repl-timeout 60</span><br><span class="line"></span><br><span class="line"># Disable TCP_NODELAY on the replica socket after SYNC?</span><br><span class="line">#</span><br><span class="line"># If you select "yes" Redis will use a smaller number of TCP packets and</span><br><span class="line"># less bandwidth to send data to replicas. But this can add a delay for</span><br><span class="line"># the data to appear on the replica side, up to 40 milliseconds with</span><br><span class="line"># Linux kernels using a default configuration.</span><br><span class="line">#</span><br><span class="line"># If you select "no" the delay for data to appear on the replica side will</span><br><span class="line"># be reduced but more bandwidth will be used for replication.</span><br><span class="line">#</span><br><span class="line"># By default we optimize for low latency, but in very high traffic conditions</span><br><span class="line"># or when the master and replicas are many hops away, turning this to "yes" may</span><br><span class="line"># be a good idea.</span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"># Set the replication backlog size. The backlog is a buffer that accumulates</span><br><span class="line"># replica data when replicas are disconnected for some time, so that when a</span><br><span class="line"># replica wants to reconnect again, often a full resync is not needed, but a</span><br><span class="line"># partial resync is enough, just passing the portion of data the replica</span><br><span class="line"># missed while disconnected.</span><br><span class="line">#</span><br><span class="line"># The bigger the replication backlog, the longer the time the replica can be</span><br><span class="line"># disconnected and later be able to perform a partial resynchronization.</span><br><span class="line">#</span><br><span class="line"># The backlog is only allocated once there is at least a replica connected.</span><br><span class="line">#</span><br><span class="line"># repl-backlog-size 1mb</span><br><span class="line"></span><br><span class="line"># After a master has no longer connected replicas for some time, the backlog</span><br><span class="line"># will be freed. The following option configures the amount of seconds that</span><br><span class="line"># need to elapse, starting from the time the last replica disconnected, for</span><br><span class="line"># the backlog buffer to be freed.</span><br><span class="line">#</span><br><span class="line"># Note that replicas never free the backlog for timeout, since they may be</span><br><span class="line"># promoted to masters later, and should be able to correctly "partially</span><br><span class="line"># resynchronize" with the replicas: hence they should always accumulate backlog.</span><br><span class="line">#</span><br><span class="line"># A value of 0 means to never release the backlog.</span><br><span class="line">#</span><br><span class="line"># repl-backlog-ttl 3600</span><br><span class="line"></span><br><span class="line"># The replica priority is an integer number published by Redis in the INFO</span><br><span class="line"># output. It is used by Redis Sentinel in order to select a replica to promote</span><br><span class="line"># into a master if the master is no longer working correctly.</span><br><span class="line">#</span><br><span class="line"># A replica with a low priority number is considered better for promotion, so</span><br><span class="line"># for instance if there are three replicas with priority 10, 100, 25 Sentinel</span><br><span class="line"># will pick the one with priority 10, that is the lowest.</span><br><span class="line">#</span><br><span class="line"># However a special priority of 0 marks the replica as not able to perform the</span><br><span class="line"># role of master, so a replica with priority of 0 will never be selected by</span><br><span class="line"># Redis Sentinel for promotion.</span><br><span class="line">#</span><br><span class="line"># By default the priority is 100.</span><br><span class="line">replica-priority <span class="number">100</span></span><br><span class="line"></span><br><span class="line"># It is possible for a master to stop accepting writes if there are less than</span><br><span class="line"># N replicas connected, having a lag less or equal than M seconds.</span><br><span class="line">#</span><br><span class="line"># The N replicas need to be in "online" state.</span><br><span class="line">#</span><br><span class="line"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span><br><span class="line"># the last ping received from the replica, that is usually sent every second.</span><br><span class="line">#</span><br><span class="line"># This option does not GUARANTEE that N replicas will accept the write, but</span><br><span class="line"># will limit the window of exposure for lost writes in case not enough replicas</span><br><span class="line"># are available, to the specified number of seconds.</span><br><span class="line">#</span><br><span class="line"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span><br><span class="line">#</span><br><span class="line"># min-replicas-to-write 3</span><br><span class="line"># min-replicas-max-lag 10</span><br><span class="line">#</span><br><span class="line"># Setting one or the other to 0 disables the feature.</span><br><span class="line">#</span><br><span class="line"># By default min-replicas-to-write is set to 0 (feature disabled) and</span><br><span class="line"># min-replicas-max-lag is set to 10.</span><br><span class="line"></span><br><span class="line"># A Redis master is able to list the address and port of the attached</span><br><span class="line"># replicas in different ways. For example the "INFO replication" section</span><br><span class="line"># offers this information, which is used, among other tools, by</span><br><span class="line"># Redis Sentinel in order to discover replica instances.</span><br><span class="line"># Another place where this info is available is in the output of the</span><br><span class="line"># "ROLE" command of a master.</span><br><span class="line">#</span><br><span class="line"># The listed IP and address normally reported by a replica is obtained</span><br><span class="line"># in the following way:</span><br><span class="line">#</span><br><span class="line">#   IP: The address is auto detected by checking the peer address</span><br><span class="line">#   of the socket used by the replica to connect with the master.</span><br><span class="line">#</span><br><span class="line">#   Port: The port is communicated by the replica during the replication</span><br><span class="line">#   handshake, and is normally the port that the replica is using to</span><br><span class="line">#   listen for connections.</span><br><span class="line">#</span><br><span class="line"># However when port forwarding or Network Address Translation (NAT) is</span><br><span class="line"># used, the replica may be actually reachable via different IP and port</span><br><span class="line"># pairs. The following two options can be used by a replica in order to</span><br><span class="line"># report to its master a specific set of IP and port, so that both INFO</span><br><span class="line"># and ROLE will report those values.</span><br><span class="line">#</span><br><span class="line"># There is no need to use both the options if you need to override just</span><br><span class="line"># the port or the IP address.</span><br><span class="line">#</span><br><span class="line"># replica-announce-ip 5.5.5.5</span><br><span class="line"># replica-announce-port 1234</span><br><span class="line"></span><br><span class="line">############################### KEYS TRACKING #################################</span><br><span class="line"></span><br><span class="line"># Redis implements server assisted support for client side caching of values.</span><br><span class="line"># This is implemented using an invalidation table that remembers, using</span><br><span class="line"># 16 millions of slots, what clients may have certain subsets of keys. In turn</span><br><span class="line"># this is used in order to send invalidation messages to clients. Please</span><br><span class="line"># to understand more about the feature check this page:</span><br><span class="line">#</span><br><span class="line">#   https://redis.io/topics/client-side-caching</span><br><span class="line">#</span><br><span class="line"># When tracking is enabled for a client, all the read only queries are assumed</span><br><span class="line"># to be cached: this will force Redis to store information in the invalidation</span><br><span class="line"># table. When keys are modified, such information is flushed away, and</span><br><span class="line"># invalidation messages are sent to the clients. However if the workload is</span><br><span class="line"># heavily dominated by reads, Redis could use more and more memory in order</span><br><span class="line"># to track the keys fetched by many clients.</span><br><span class="line">#</span><br><span class="line"># For this reason it is possible to configure a maximum fill value for the</span><br><span class="line"># invalidation table. By default it is set to 1M of keys, and once this limit</span><br><span class="line"># is reached, Redis will start to evict keys in the invalidation table</span><br><span class="line"># even if they were not modified, just to reclaim memory: this will in turn</span><br><span class="line"># force the clients to invalidate the cached values. Basically the table</span><br><span class="line"># maximum size is a trade off between the memory you want to spend server</span><br><span class="line"># side to track information about who cached what, and the ability of clients</span><br><span class="line"># to retain cached objects in memory.</span><br><span class="line">#</span><br><span class="line"># If you set the value to 0, it means there are no limits, and Redis will</span><br><span class="line"># retain as many keys as needed in the invalidation table.</span><br><span class="line"># In the "stats" INFO section, you can find information about the number of</span><br><span class="line"># keys in the invalidation table at every given moment.</span><br><span class="line">#</span><br><span class="line"># Note: when key tracking is used in broadcasting mode, no memory is used</span><br><span class="line"># in the server side so this setting is useless.</span><br><span class="line">#</span><br><span class="line"># tracking-table-max-keys 1000000</span><br><span class="line"></span><br><span class="line">################################## SECURITY ###################################</span><br><span class="line"></span><br><span class="line"># Warning: since Redis is pretty fast an outside user can try up to</span><br><span class="line"># 1 million passwords per second against a modern box. This means that you</span><br><span class="line"># should use very strong passwords, otherwise they will be very easy to break.</span><br><span class="line"># Note that because the password is really a shared secret between the client</span><br><span class="line"># and the server, and should not be memorized by any human, the password</span><br><span class="line"># can be easily a long string from /dev/urandom or whatever, so by using a</span><br><span class="line"># long and unguessable password no brute force attack will be possible.</span><br><span class="line"></span><br><span class="line"># Redis ACL users are defined in the following format:</span><br><span class="line">#</span><br><span class="line">#   user &lt;username&gt; ... acl rules ...</span><br><span class="line">#</span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line">#   user worker +@list +@connection ~jobs:* on &gt;ffa9203c493aa99</span><br><span class="line">#</span><br><span class="line"># The special username "default" is used for new connections. If this user</span><br><span class="line"># has the "nopass" rule, then new connections will be immediately authenticated</span><br><span class="line"># as the "default" user without the need of any password provided via the</span><br><span class="line"># AUTH command. Otherwise if the "default" user is not flagged with "nopass"</span><br><span class="line"># the connections will start in not authenticated state, and will require</span><br><span class="line"># AUTH (or the HELLO command AUTH option) in order to be authenticated and</span><br><span class="line"># start to work.</span><br><span class="line">#</span><br><span class="line"># The ACL rules that describe what an user can do are the following:</span><br><span class="line">#</span><br><span class="line">#  on           Enable the user: it is possible to authenticate as this user.</span><br><span class="line">#  off          Disable the user: it's no longer possible to authenticate</span><br><span class="line">#               with this user, however the already authenticated connections</span><br><span class="line">#               will still work.</span><br><span class="line">#  +&lt;command&gt;   Allow the execution of that command</span><br><span class="line">#  -&lt;command&gt;   Disallow the execution of that command</span><br><span class="line">#  +@&lt;category&gt; Allow the execution of all the commands in such category</span><br><span class="line">#               with valid categories are like @admin, @set, @sortedset, ...</span><br><span class="line">#               and so forth, see the full list in the server.c file where</span><br><span class="line">#               the Redis command table is described and defined.</span><br><span class="line">#               The special category @all means all the commands, but currently</span><br><span class="line">#               present in the server, and that will be loaded in the future</span><br><span class="line">#               via modules.</span><br><span class="line">#  +&lt;command&gt;|subcommand    Allow a specific subcommand of an otherwise</span><br><span class="line">#                           disabled command. Note that this form is not</span><br><span class="line">#                           allowed as negative like -DEBUG|SEGFAULT, but</span><br><span class="line">#                           only additive starting with "+".</span><br><span class="line">#  allcommands  Alias for +@all. Note that it implies the ability to execute</span><br><span class="line">#               all the future commands loaded via the modules system.</span><br><span class="line">#  nocommands   Alias for -@all.</span><br><span class="line">#  ~&lt;pattern&gt;   Add a pattern of keys that can be mentioned as part of</span><br><span class="line">#               commands. For instance ~* allows all the keys. The pattern</span><br><span class="line">#               is a glob-style pattern like the one of KEYS.</span><br><span class="line">#               It is possible to specify multiple patterns.</span><br><span class="line">#  allkeys      Alias for ~*</span><br><span class="line">#  resetkeys    Flush the list of allowed keys patterns.</span><br><span class="line">#  &gt;&lt;password&gt;  Add this passowrd to the list of valid password for the user.</span><br><span class="line">#               For example &gt;mypass will add "mypass" to the list.</span><br><span class="line">#               This directive clears the "nopass" flag (see later).</span><br><span class="line">#  &lt;&lt;password&gt;  Remove this password from the list of valid passwords.</span><br><span class="line">#  nopass       All the set passwords of the user are removed, and the user</span><br><span class="line">#               is flagged as requiring no password: it means that every</span><br><span class="line">#               password will work against this user. If this directive is</span><br><span class="line">#               used for the default user, every new connection will be</span><br><span class="line">#               immediately authenticated with the default user without</span><br><span class="line">#               any explicit AUTH command required. Note that the "resetpass"</span><br><span class="line">#               directive will clear this condition.</span><br><span class="line">#  resetpass    Flush the list of allowed passwords. Moreover removes the</span><br><span class="line">#               "nopass" status. After "resetpass" the user has no associated</span><br><span class="line">#               passwords and there is no way to authenticate without adding</span><br><span class="line">#               some password (or setting it as "nopass" later).</span><br><span class="line">#  reset        Performs the following actions: resetpass, resetkeys, off,</span><br><span class="line">#               -@all. The user returns to the same state it has immediately</span><br><span class="line">#               after its creation.</span><br><span class="line">#</span><br><span class="line"># ACL rules can be specified in any order: for instance you can start with</span><br><span class="line"># passwords, then flags, or key patterns. However note that the additive</span><br><span class="line"># and subtractive rules will CHANGE MEANING depending on the ordering.</span><br><span class="line"># For instance see the following example:</span><br><span class="line">#</span><br><span class="line">#   user alice on +@all -DEBUG ~* &gt;somepassword</span><br><span class="line">#</span><br><span class="line"># This will allow "alice" to use all the commands with the exception of the</span><br><span class="line"># DEBUG command, since +@all added all the commands to the set of the commands</span><br><span class="line"># alice can use, and later DEBUG was removed. However if we invert the order</span><br><span class="line"># of two ACL rules the result will be different:</span><br><span class="line">#</span><br><span class="line">#   user alice on -DEBUG +@all ~* &gt;somepassword</span><br><span class="line">#</span><br><span class="line"># Now DEBUG was removed when alice had yet no commands in the set of allowed</span><br><span class="line"># commands, later all the commands are added, so the user will be able to</span><br><span class="line"># execute everything.</span><br><span class="line">#</span><br><span class="line"># Basically ACL rules are processed left-to-right.</span><br><span class="line">#</span><br><span class="line"># For more information about ACL configuration please refer to</span><br><span class="line"># the Redis web site at https://redis.io/topics/acl</span><br><span class="line"></span><br><span class="line"># ACL LOG</span><br><span class="line">#</span><br><span class="line"># The ACL Log tracks failed commands and authentication events associated</span><br><span class="line"># with ACLs. The ACL Log is useful to troubleshoot failed commands blocked </span><br><span class="line"># by ACLs. The ACL Log is stored in memory. You can reclaim memory with </span><br><span class="line"># ACL LOG RESET. Define the maximum entry length of the ACL Log below.</span><br><span class="line">acllog-max-len <span class="number">128</span></span><br><span class="line"></span><br><span class="line"># Using an external ACL file</span><br><span class="line">#</span><br><span class="line"># Instead of configuring users here in this file, it is possible to use</span><br><span class="line"># a stand-alone file just listing users. The two methods cannot be mixed:</span><br><span class="line"># if you configure users here and at the same time you activate the exteranl</span><br><span class="line"># ACL file, the server will refuse to start.</span><br><span class="line">#</span><br><span class="line"># The format of the external ACL user file is exactly the same as the</span><br><span class="line"># format that is used inside redis.conf to describe users.</span><br><span class="line">#</span><br><span class="line"># aclfile /etc/redis/users.acl</span><br><span class="line"></span><br><span class="line"># IMPORTANT NOTE: starting with Redis 6 "requirepass" is just a compatiblity</span><br><span class="line"># layer on top of the new ACL system. The option effect will be just setting</span><br><span class="line"># the password for the default user. Clients will still authenticate using</span><br><span class="line"># AUTH &lt;password&gt; as usually, or more explicitly with AUTH default &lt;password&gt;</span><br><span class="line"># if they follow the new protocol: both will work.</span><br><span class="line">#</span><br><span class="line"># requirepass foobared</span><br><span class="line"></span><br><span class="line"># Command renaming (DEPRECATED).</span><br><span class="line">#</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line"># WARNING: avoid using this option if possible. Instead use ACLs to remove</span><br><span class="line"># commands from the default user, and put them only in some admin user you</span><br><span class="line"># create for administrative purposes.</span><br><span class="line"># ------------------------------------------------------------------------</span><br><span class="line">#</span><br><span class="line"># It is possible to change the name of dangerous commands in a shared</span><br><span class="line"># environment. For instance the CONFIG command may be renamed into something</span><br><span class="line"># hard to guess so that it will still be available for internal-use tools</span><br><span class="line"># but not available for general clients.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span><br><span class="line">#</span><br><span class="line"># It is also possible to completely kill a command by renaming it into</span><br><span class="line"># an empty string:</span><br><span class="line">#</span><br><span class="line"># rename-command CONFIG ""</span><br><span class="line">#</span><br><span class="line"># Please note that changing the name of commands that are logged into the</span><br><span class="line"># AOF file or transmitted to replicas may cause problems.</span><br><span class="line"></span><br><span class="line">################################### CLIENTS ####################################</span><br><span class="line"></span><br><span class="line"># Set the max number of connected clients at the same time. By default</span><br><span class="line"># this limit is set to 10000 clients, however if the Redis server is not</span><br><span class="line"># able to configure the process file limit to allow for the specified limit</span><br><span class="line"># the max number of allowed clients is set to the current file limit</span><br><span class="line"># minus 32 (as Redis reserves a few file descriptors for internal uses).</span><br><span class="line">#</span><br><span class="line"># Once the limit is reached Redis will close all the new connections sending</span><br><span class="line"># an error 'max number of clients reached'.</span><br><span class="line">#</span><br><span class="line"># IMPORTANT: When Redis Cluster is used, the max number of connections is also</span><br><span class="line"># shared with the cluster bus: every node in the cluster will use two</span><br><span class="line"># connections, one incoming and another outgoing. It is important to size the</span><br><span class="line"># limit accordingly in case of very large clusters.</span><br><span class="line">#</span><br><span class="line"># maxclients 10000</span><br><span class="line"></span><br><span class="line">############################## MEMORY MANAGEMENT ################################</span><br><span class="line"></span><br><span class="line"># Set a memory usage limit to the specified amount of bytes.</span><br><span class="line"># When the memory limit is reached Redis will try to remove keys</span><br><span class="line"># according to the eviction policy selected (see maxmemory-policy).</span><br><span class="line">#</span><br><span class="line"># If Redis can't remove keys according to the policy, or if the policy is</span><br><span class="line"># set to 'noeviction', Redis will start to reply with errors to commands</span><br><span class="line"># that would use more memory, like SET, LPUSH, and so on, and will continue</span><br><span class="line"># to reply to read-only commands like GET.</span><br><span class="line">#</span><br><span class="line"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span><br><span class="line"># set a hard memory limit for an instance (using the 'noeviction' policy).</span><br><span class="line">#</span><br><span class="line"># WARNING: If you have replicas attached to an instance with maxmemory on,</span><br><span class="line"># the size of the output buffers needed to feed the replicas are subtracted</span><br><span class="line"># from the used memory count, so that network problems / resyncs will</span><br><span class="line"># not trigger a loop where keys are evicted, and in turn the output</span><br><span class="line"># buffer of replicas is full with DELs of keys evicted triggering the deletion</span><br><span class="line"># of more keys, and so forth until the database is completely emptied.</span><br><span class="line">#</span><br><span class="line"># In short... if you have replicas attached it is suggested that you set a lower</span><br><span class="line"># limit for maxmemory so that there is some free RAM on the system for replica</span><br><span class="line"># output buffers (but this is not needed if the policy is 'noeviction').</span><br><span class="line">#</span><br><span class="line"># maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line"># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</span><br><span class="line"># is reached. You can select one from the following behaviors:</span><br><span class="line">#</span><br><span class="line"># volatile-lru -&gt; Evict using approximated LRU, only keys with an expire set.</span><br><span class="line"># allkeys-lru -&gt; Evict any key using approximated LRU.</span><br><span class="line"># volatile-lfu -&gt; Evict using approximated LFU, only keys with an expire set.</span><br><span class="line"># allkeys-lfu -&gt; Evict any key using approximated LFU.</span><br><span class="line"># volatile-random -&gt; Remove a random key having an expire set.</span><br><span class="line"># allkeys-random -&gt; Remove a random key, any key.</span><br><span class="line"># volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span><br><span class="line"># noeviction -&gt; Don't evict anything, just return an error on write operations.</span><br><span class="line">#</span><br><span class="line"># LRU means Least Recently Used</span><br><span class="line"># LFU means Least Frequently Used</span><br><span class="line">#</span><br><span class="line"># Both LRU, LFU and volatile-ttl are implemented using approximated</span><br><span class="line"># randomized algorithms.</span><br><span class="line">#</span><br><span class="line"># Note: with any of the above policies, Redis will return an error on write</span><br><span class="line">#       operations, when there are no suitable keys for eviction.</span><br><span class="line">#</span><br><span class="line">#       At the date of writing these commands are: set setnx setex append</span><br><span class="line">#       incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span><br><span class="line">#       sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span><br><span class="line">#       zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span><br><span class="line">#       getset mset msetnx exec sort</span><br><span class="line">#</span><br><span class="line"># The default is:</span><br><span class="line">#</span><br><span class="line"># maxmemory-policy noeviction</span><br><span class="line"></span><br><span class="line"># LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span><br><span class="line"># algorithms (in order to save memory), so you can tune it for speed or</span><br><span class="line"># accuracy. For default Redis will check five keys and pick the one that was</span><br><span class="line"># used less recently, you can change the sample size using the following</span><br><span class="line"># configuration directive.</span><br><span class="line">#</span><br><span class="line"># The default of 5 produces good enough results. 10 Approximates very closely</span><br><span class="line"># true LRU but costs more CPU. 3 is faster but not very accurate.</span><br><span class="line">#</span><br><span class="line"># maxmemory-samples 5</span><br><span class="line"></span><br><span class="line"># Starting from Redis 5, by default a replica will ignore its maxmemory setting</span><br><span class="line"># (unless it is promoted to master after a failover or manually). It means</span><br><span class="line"># that the eviction of keys will be just handled by the master, sending the</span><br><span class="line"># DEL commands to the replica as keys evict in the master side.</span><br><span class="line">#</span><br><span class="line"># This behavior ensures that masters and replicas stay consistent, and is usually</span><br><span class="line"># what you want, however if your replica is writable, or you want the replica</span><br><span class="line"># to have a different memory setting, and you are sure all the writes performed</span><br><span class="line"># to the replica are idempotent, then you may change this default (but be sure</span><br><span class="line"># to understand what you are doing).</span><br><span class="line">#</span><br><span class="line"># Note that since the replica by default does not evict, it may end using more</span><br><span class="line"># memory than the one set via maxmemory (there are certain buffers that may</span><br><span class="line"># be larger on the replica, or data structures may sometimes take more memory</span><br><span class="line"># and so forth). So make sure you monitor your replicas and make sure they</span><br><span class="line"># have enough memory to never hit a real out-of-memory condition before the</span><br><span class="line"># master hits the configured maxmemory setting.</span><br><span class="line">#</span><br><span class="line"># replica-ignore-maxmemory yes</span><br><span class="line"></span><br><span class="line"># Redis reclaims expired keys in two ways: upon access when those keys are</span><br><span class="line"># found to be expired, and also in background, in what is called the</span><br><span class="line"># "active expire key". The key space is slowly and interactively scanned</span><br><span class="line"># looking for expired keys to reclaim, so that it is possible to free memory</span><br><span class="line"># of keys that are expired and will never be accessed again in a short time.</span><br><span class="line">#</span><br><span class="line"># The default effort of the expire cycle will try to avoid having more than</span><br><span class="line"># ten percent of expired keys still in memory, and will try to avoid consuming</span><br><span class="line"># more than 25% of total memory and to add latency to the system. However</span><br><span class="line"># it is possible to increase the expire "effort" that is normally set to</span><br><span class="line"># "1", to a greater value, up to the value "10". At its maximum value the</span><br><span class="line"># system will use more CPU, longer cycles (and technically may introduce</span><br><span class="line"># more latency), and will tollerate less already expired keys still present</span><br><span class="line"># in the system. It's a tradeoff betweeen memory, CPU and latecy.</span><br><span class="line">#</span><br><span class="line"># active-expire-effort 1</span><br><span class="line"></span><br><span class="line">############################# LAZY FREEING ####################################</span><br><span class="line"></span><br><span class="line"># Redis has two primitives to delete keys. One is called DEL and is a blocking</span><br><span class="line"># deletion of the object. It means that the server stops processing new commands</span><br><span class="line"># in order to reclaim all the memory associated with an object in a synchronous</span><br><span class="line"># way. If the key deleted is associated with a small object, the time needed</span><br><span class="line"># in order to execute the DEL command is very small and comparable to most other</span><br><span class="line"># O(1) or O(log_N) commands in Redis. However if the key is associated with an</span><br><span class="line"># aggregated value containing millions of elements, the server can block for</span><br><span class="line"># a long time (even seconds) in order to complete the operation.</span><br><span class="line">#</span><br><span class="line"># For the above reasons Redis also offers non blocking deletion primitives</span><br><span class="line"># such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span><br><span class="line"># FLUSHDB commands, in order to reclaim memory in background. Those commands</span><br><span class="line"># are executed in constant time. Another thread will incrementally free the</span><br><span class="line"># object in the background as fast as possible.</span><br><span class="line">#</span><br><span class="line"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span><br><span class="line"># It's up to the design of the application to understand when it is a good</span><br><span class="line"># idea to use one or the other. However the Redis server sometimes has to</span><br><span class="line"># delete keys or flush the whole database as a side effect of other operations.</span><br><span class="line"># Specifically Redis deletes objects independently of a user call in the</span><br><span class="line"># following scenarios:</span><br><span class="line">#</span><br><span class="line"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span><br><span class="line">#    in order to make room for new data, without going over the specified</span><br><span class="line">#    memory limit.</span><br><span class="line"># 2) Because of expire: when a key with an associated time to live (see the</span><br><span class="line">#    EXPIRE command) must be deleted from memory.</span><br><span class="line"># 3) Because of a side effect of a command that stores data on a key that may</span><br><span class="line">#    already exist. For example the RENAME command may delete the old key</span><br><span class="line">#    content when it is replaced with another one. Similarly SUNIONSTORE</span><br><span class="line">#    or SORT with STORE option may delete existing keys. The SET command</span><br><span class="line">#    itself removes any old content of the specified key in order to replace</span><br><span class="line">#    it with the specified string.</span><br><span class="line"># 4) During replication, when a replica performs a full resynchronization with</span><br><span class="line">#    its master, the content of the whole database is removed in order to</span><br><span class="line">#    load the RDB file just transferred.</span><br><span class="line">#</span><br><span class="line"># In all the above cases the default is to delete objects in a blocking way,</span><br><span class="line"># like if DEL was called. However you can configure each case specifically</span><br><span class="line"># in order to instead release memory in a non-blocking way like if UNLINK</span><br><span class="line"># was called, using the following configuration directives.</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"></span><br><span class="line"># It is also possible, for the case when to replace the user code DEL calls</span><br><span class="line"># with UNLINK calls is not easy, to modify the default behavior of the DEL</span><br><span class="line"># command to act exactly like UNLINK, using the following configuration</span><br><span class="line"># directive:</span><br><span class="line"></span><br><span class="line">lazyfree-lazy-user-del no</span><br><span class="line"></span><br><span class="line">################################ THREADED I/O #################################</span><br><span class="line"></span><br><span class="line"># Redis is mostly single threaded, however there are certain threaded</span><br><span class="line"># operations such as UNLINK, slow I/O accesses and other things that are</span><br><span class="line"># performed on side threads.</span><br><span class="line">#</span><br><span class="line"># Now it is also possible to handle Redis clients socket reads and writes</span><br><span class="line"># in different I/O threads. Since especially writing is so slow, normally</span><br><span class="line"># Redis users use pipelining in order to speedup the Redis performances per</span><br><span class="line"># core, and spawn multiple instances in order to scale more. Using I/O</span><br><span class="line"># threads it is possible to easily speedup two times Redis without resorting</span><br><span class="line"># to pipelining nor sharding of the instance.</span><br><span class="line">#</span><br><span class="line"># By default threading is disabled, we suggest enabling it only in machines</span><br><span class="line"># that have at least 4 or more cores, leaving at least one spare core.</span><br><span class="line"># Using more than 8 threads is unlikely to help much. We also recommend using</span><br><span class="line"># threaded I/O only if you actually have performance problems, with Redis</span><br><span class="line"># instances being able to use a quite big percentage of CPU time, otherwise</span><br><span class="line"># there is no point in using this feature.</span><br><span class="line">#</span><br><span class="line"># So for instance if you have a four cores boxes, try to use 2 or 3 I/O</span><br><span class="line"># threads, if you have a 8 cores, try to use 6 threads. In order to</span><br><span class="line"># enable I/O threads use the following configuration directive:</span><br><span class="line">#</span><br><span class="line"># io-threads 4</span><br><span class="line">#</span><br><span class="line"># Setting io-threads to 1 will just use the main thread as usually.</span><br><span class="line"># When I/O threads are enabled, we only use threads for writes, that is</span><br><span class="line"># to thread the write(2) syscall and transfer the client buffers to the</span><br><span class="line"># socket. However it is also possible to enable threading of reads and</span><br><span class="line"># protocol parsing using the following configuration directive, by setting</span><br><span class="line"># it to yes:</span><br><span class="line">#</span><br><span class="line"># io-threads-do-reads no</span><br><span class="line">#</span><br><span class="line"># Usually threading reads doesn't help much.</span><br><span class="line">#</span><br><span class="line"># NOTE 1: This configuration directive cannot be changed at runtime via</span><br><span class="line"># CONFIG SET. Aso this feature currently does not work when SSL is</span><br><span class="line"># enabled.</span><br><span class="line">#</span><br><span class="line"># NOTE 2: If you want to test the Redis speedup using redis-benchmark, make</span><br><span class="line"># sure you also run the benchmark itself in threaded mode, using the</span><br><span class="line"># --threads option to match the number of Redis theads, otherwise you'll not</span><br><span class="line"># be able to notice the improvements.</span><br><span class="line"></span><br><span class="line">############################ KERNEL OOM CONTROL ##############################</span><br><span class="line"></span><br><span class="line"># On Linux, it is possible to hint the kernel OOM killer on what processes</span><br><span class="line"># should be killed first when out of memory.</span><br><span class="line">#</span><br><span class="line"># Enabling this feature makes Redis actively control the oom_score_adj value</span><br><span class="line"># for all its processes, depending on their role. The default scores will</span><br><span class="line"># attempt to have background child processes killed before all others, and</span><br><span class="line"># replicas killed before masters.</span><br><span class="line"></span><br><span class="line">oom-score-adj no</span><br><span class="line"></span><br><span class="line"># When oom-score-adj is used, this directive controls the specific values used</span><br><span class="line"># for master, replica and background child processes. Values range -1000 to</span><br><span class="line"># 1000 (higher means more likely to be killed).</span><br><span class="line">#</span><br><span class="line"># Unprivileged processes (not root, and without CAP_SYS_RESOURCE capabilities)</span><br><span class="line"># can freely increase their value, but not decrease it below its initial</span><br><span class="line"># settings.</span><br><span class="line">#</span><br><span class="line"># Values are used relative to the initial value of oom_score_adj when the server</span><br><span class="line"># starts. Because typically the initial value is 0, they will often match the</span><br><span class="line"># absolute values.</span><br><span class="line"></span><br><span class="line">oom-score-adj-values <span class="number">0</span> <span class="number">200</span> <span class="number">800</span></span><br><span class="line"></span><br><span class="line">############################## APPEND ONLY MODE ###############################</span><br><span class="line"></span><br><span class="line"># By default Redis asynchronously dumps the dataset on disk. This mode is</span><br><span class="line"># good enough in many applications, but an issue with the Redis process or</span><br><span class="line"># a power outage may result into a few minutes of writes lost (depending on</span><br><span class="line"># the configured save points).</span><br><span class="line">#</span><br><span class="line"># The Append Only File is an alternative persistence mode that provides</span><br><span class="line"># much better durability. For instance using the default data fsync policy</span><br><span class="line"># (see later in the config file) Redis can lose just one second of writes in a</span><br><span class="line"># dramatic event like a server power outage, or a single write if something</span><br><span class="line"># wrong with the Redis process itself happens, but the operating system is</span><br><span class="line"># still running correctly.</span><br><span class="line">#</span><br><span class="line"># AOF and RDB persistence can be enabled at the same time without problems.</span><br><span class="line"># If the AOF is enabled on startup Redis will load the AOF, that is the file</span><br><span class="line"># with the better durability guarantees.</span><br><span class="line">#</span><br><span class="line"># Please check http://redis.io/topics/persistence for more information.</span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># The name of the append only file (default: "appendonly.aof")</span><br><span class="line"></span><br><span class="line">appendfilename <span class="string">"appendonly.aof"</span></span><br><span class="line"></span><br><span class="line"># The fsync() call tells the Operating System to actually write data on disk</span><br><span class="line"># instead of waiting for more data in the output buffer. Some OS will really flush</span><br><span class="line"># data on disk, some other OS will just try to do it ASAP.</span><br><span class="line">#</span><br><span class="line"># Redis supports three different modes:</span><br><span class="line">#</span><br><span class="line"># no: don't fsync, just let the OS flush the data when it wants. Faster.</span><br><span class="line"># always: fsync after every write to the append only log. Slow, Safest.</span><br><span class="line"># everysec: fsync only one time every second. Compromise.</span><br><span class="line">#</span><br><span class="line"># The default is "everysec", as that's usually the right compromise between</span><br><span class="line"># speed and data safety. It's up to you to understand if you can relax this to</span><br><span class="line"># "no" that will let the operating system flush the output buffer when</span><br><span class="line"># it wants, for better performances (but if you can live with the idea of</span><br><span class="line"># some data loss consider the default persistence mode that's snapshotting),</span><br><span class="line"># or on the contrary, use "always" that's very slow but a bit safer than</span><br><span class="line"># everysec.</span><br><span class="line">#</span><br><span class="line"># More details please check the following article:</span><br><span class="line"># http://antirez.com/post/redis-persistence-demystified.html</span><br><span class="line">#</span><br><span class="line"># If unsure, use "everysec".</span><br><span class="line"></span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># When the AOF fsync policy is set to always or everysec, and a background</span><br><span class="line"># saving process (a background save or AOF log background rewriting) is</span><br><span class="line"># performing a lot of I/O against the disk, in some Linux configurations</span><br><span class="line"># Redis may block too long on the fsync() call. Note that there is no fix for</span><br><span class="line"># this currently, as even performing fsync in a different thread will block</span><br><span class="line"># our synchronous write(2) call.</span><br><span class="line">#</span><br><span class="line"># In order to mitigate this problem it's possible to use the following option</span><br><span class="line"># that will prevent fsync() from being called in the main process while a</span><br><span class="line"># BGSAVE or BGREWRITEAOF is in progress.</span><br><span class="line">#</span><br><span class="line"># This means that while another child is saving, the durability of Redis is</span><br><span class="line"># the same as "appendfsync none". In practical terms, this means that it is</span><br><span class="line"># possible to lose up to 30 seconds of log in the worst scenario (with the</span><br><span class="line"># default Linux settings).</span><br><span class="line">#</span><br><span class="line"># If you have latency problems turn this to "yes". Otherwise leave it as</span><br><span class="line"># "no" that is the safest pick from the point of view of durability.</span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># Automatic rewrite of the append only file.</span><br><span class="line"># Redis is able to automatically rewrite the log file implicitly calling</span><br><span class="line"># BGREWRITEAOF when the AOF log size grows by the specified percentage.</span><br><span class="line">#</span><br><span class="line"># This is how it works: Redis remembers the size of the AOF file after the</span><br><span class="line"># latest rewrite (if no rewrite has happened since the restart, the size of</span><br><span class="line"># the AOF at startup is used).</span><br><span class="line">#</span><br><span class="line"># This base size is compared to the current size. If the current size is</span><br><span class="line"># bigger than the specified percentage, the rewrite is triggered. Also</span><br><span class="line"># you need to specify a minimal size for the AOF file to be rewritten, this</span><br><span class="line"># is useful to avoid rewriting the AOF file even if the percentage increase</span><br><span class="line"># is reached but it is still pretty small.</span><br><span class="line">#</span><br><span class="line"># Specify a percentage of zero in order to disable the automatic AOF</span><br><span class="line"># rewrite feature.</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">auto-aof-rewrite-min-size <span class="number">64</span>mb</span><br><span class="line"></span><br><span class="line"># An AOF file may be found to be truncated at the end during the Redis</span><br><span class="line"># startup process, when the AOF data gets loaded back into memory.</span><br><span class="line"># This may happen when the system where Redis is running</span><br><span class="line"># crashes, especially when an ext4 filesystem is mounted without the</span><br><span class="line"># data=ordered option (however this can't happen when Redis itself</span><br><span class="line"># crashes or aborts but the operating system still works correctly).</span><br><span class="line">#</span><br><span class="line"># Redis can either exit with an error when this happens, or load as much</span><br><span class="line"># data as possible (the default now) and start if the AOF file is found</span><br><span class="line"># to be truncated at the end. The following option controls this behavior.</span><br><span class="line">#</span><br><span class="line"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span><br><span class="line"># the Redis server starts emitting a log to inform the user of the event.</span><br><span class="line"># Otherwise if the option is set to no, the server aborts with an error</span><br><span class="line"># and refuses to start. When the option is set to no, the user requires</span><br><span class="line"># to fix the AOF file using the "redis-check-aof" utility before to restart</span><br><span class="line"># the server.</span><br><span class="line">#</span><br><span class="line"># Note that if the AOF file will be found to be corrupted in the middle</span><br><span class="line"># the server will still exit with an error. This option only applies when</span><br><span class="line"># Redis will try to read more data from the AOF file but not enough bytes</span><br><span class="line"># will be found.</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># When rewriting the AOF file, Redis is able to use an RDB preamble in the</span><br><span class="line"># AOF file for faster rewrites and recoveries. When this option is turned</span><br><span class="line"># on the rewritten AOF file is composed of two different stanzas:</span><br><span class="line">#</span><br><span class="line">#   [RDB file][AOF tail]</span><br><span class="line">#</span><br><span class="line"># When loading Redis recognizes that the AOF file starts with the "REDIS"</span><br><span class="line"># string and loads the prefixed RDB file, and continues loading the AOF</span><br><span class="line"># tail.</span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"></span><br><span class="line">################################ LUA SCRIPTING  ###############################</span><br><span class="line"></span><br><span class="line"># Max execution time of a Lua script in milliseconds.</span><br><span class="line">#</span><br><span class="line"># If the maximum execution time is reached Redis will log that a script is</span><br><span class="line"># still in execution after the maximum allowed time and will start to</span><br><span class="line"># reply to queries with an error.</span><br><span class="line">#</span><br><span class="line"># When a long running script exceeds the maximum execution time only the</span><br><span class="line"># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span><br><span class="line"># used to stop a script that did not yet called write commands. The second</span><br><span class="line"># is the only way to shut down the server in the case a write command was</span><br><span class="line"># already issued by the script but the user doesn't want to wait for the natural</span><br><span class="line"># termination of the script.</span><br><span class="line">#</span><br><span class="line"># Set it to 0 or a negative value for unlimited execution without warnings.</span><br><span class="line">lua-time-limit <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">################################ REDIS CLUSTER  ###############################</span><br><span class="line"></span><br><span class="line"># Normal Redis instances can't be part of a Redis Cluster; only nodes that are</span><br><span class="line"># started as cluster nodes can. In order to start a Redis instance as a</span><br><span class="line"># cluster node enable the cluster support uncommenting the following:</span><br><span class="line">#</span><br><span class="line"># cluster-enabled yes</span><br><span class="line"></span><br><span class="line"># Every cluster node has a cluster configuration file. This file is not</span><br><span class="line"># intended to be edited by hand. It is created and updated by Redis nodes.</span><br><span class="line"># Every Redis Cluster node requires a different cluster configuration file.</span><br><span class="line"># Make sure that instances running in the same system do not have</span><br><span class="line"># overlapping cluster configuration file names.</span><br><span class="line">#</span><br><span class="line"># cluster-config-file nodes-6379.conf</span><br><span class="line"></span><br><span class="line"># Cluster node timeout is the amount of milliseconds a node must be unreachable</span><br><span class="line"># for it to be considered in failure state.</span><br><span class="line"># Most other internal time limits are multiple of the node timeout.</span><br><span class="line">#</span><br><span class="line"># cluster-node-timeout 15000</span><br><span class="line"></span><br><span class="line"># A replica of a failing master will avoid to start a failover if its data</span><br><span class="line"># looks too old.</span><br><span class="line">#</span><br><span class="line"># There is no simple way for a replica to actually have an exact measure of</span><br><span class="line"># its "data age", so the following two checks are performed:</span><br><span class="line">#</span><br><span class="line"># 1) If there are multiple replicas able to failover, they exchange messages</span><br><span class="line">#    in order to try to give an advantage to the replica with the best</span><br><span class="line">#    replication offset (more data from the master processed).</span><br><span class="line">#    Replicas will try to get their rank by offset, and apply to the start</span><br><span class="line">#    of the failover a delay proportional to their rank.</span><br><span class="line">#</span><br><span class="line"># 2) Every single replica computes the time of the last interaction with</span><br><span class="line">#    its master. This can be the last ping or command received (if the master</span><br><span class="line">#    is still in the "connected" state), or the time that elapsed since the</span><br><span class="line">#    disconnection with the master (if the replication link is currently down).</span><br><span class="line">#    If the last interaction is too old, the replica will not try to failover</span><br><span class="line">#    at all.</span><br><span class="line">#</span><br><span class="line"># The point "2" can be tuned by user. Specifically a replica will not perform</span><br><span class="line"># the failover if, since the last interaction with the master, the time</span><br><span class="line"># elapsed is greater than:</span><br><span class="line">#</span><br><span class="line">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span><br><span class="line">#</span><br><span class="line"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span><br><span class="line"># is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span><br><span class="line"># replica will not try to failover if it was not able to talk with the master</span><br><span class="line"># for longer than 310 seconds.</span><br><span class="line">#</span><br><span class="line"># A large replica-validity-factor may allow replicas with too old data to failover</span><br><span class="line"># a master, while a too small value may prevent the cluster from being able to</span><br><span class="line"># elect a replica at all.</span><br><span class="line">#</span><br><span class="line"># For maximum availability, it is possible to set the replica-validity-factor</span><br><span class="line"># to a value of 0, which means, that replicas will always try to failover the</span><br><span class="line"># master regardless of the last time they interacted with the master.</span><br><span class="line"># (However they'll always try to apply a delay proportional to their</span><br><span class="line"># offset rank).</span><br><span class="line">#</span><br><span class="line"># Zero is the only value able to guarantee that when all the partitions heal</span><br><span class="line"># the cluster will always be able to continue.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-validity-factor 10</span><br><span class="line"></span><br><span class="line"># Cluster replicas are able to migrate to orphaned masters, that are masters</span><br><span class="line"># that are left without working replicas. This improves the cluster ability</span><br><span class="line"># to resist to failures as otherwise an orphaned master can't be failed over</span><br><span class="line"># in case of failure if it has no working replicas.</span><br><span class="line">#</span><br><span class="line"># Replicas migrate to orphaned masters only if there are still at least a</span><br><span class="line"># given number of other working replicas for their old master. This number</span><br><span class="line"># is the "migration barrier". A migration barrier of 1 means that a replica</span><br><span class="line"># will migrate only if there is at least 1 other working replica for its master</span><br><span class="line"># and so forth. It usually reflects the number of replicas you want for every</span><br><span class="line"># master in your cluster.</span><br><span class="line">#</span><br><span class="line"># Default is 1 (replicas migrate only if their masters remain with at least</span><br><span class="line"># one replica). To disable migration just set it to a very large value.</span><br><span class="line"># A value of 0 can be set but is useful only for debugging and dangerous</span><br><span class="line"># in production.</span><br><span class="line">#</span><br><span class="line"># cluster-migration-barrier 1</span><br><span class="line"></span><br><span class="line"># By default Redis Cluster nodes stop accepting queries if they detect there</span><br><span class="line"># is at least an hash slot uncovered (no available node is serving it).</span><br><span class="line"># This way if the cluster is partially down (for example a range of hash slots</span><br><span class="line"># are no longer covered) all the cluster becomes, eventually, unavailable.</span><br><span class="line"># It automatically returns available as soon as all the slots are covered again.</span><br><span class="line">#</span><br><span class="line"># However sometimes you want the subset of the cluster which is working,</span><br><span class="line"># to continue to accept queries for the part of the key space that is still</span><br><span class="line"># covered. In order to do so, just set the cluster-require-full-coverage</span><br><span class="line"># option to no.</span><br><span class="line">#</span><br><span class="line"># cluster-require-full-coverage yes</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, prevents replicas from trying to failover its</span><br><span class="line"># master during master failures. However the master can still perform a</span><br><span class="line"># manual failover, if forced to do so.</span><br><span class="line">#</span><br><span class="line"># This is useful in different scenarios, especially in the case of multiple</span><br><span class="line"># data center operations, where we want one side to never be promoted if not</span><br><span class="line"># in the case of a total DC failure.</span><br><span class="line">#</span><br><span class="line"># cluster-replica-no-failover no</span><br><span class="line"></span><br><span class="line"># This option, when set to yes, allows nodes to serve read traffic while the</span><br><span class="line"># the cluster is in a down state, as long as it believes it owns the slots. </span><br><span class="line">#</span><br><span class="line"># This is useful for two cases.  The first case is for when an application </span><br><span class="line"># doesn't require consistency of data during node failures or network partitions.</span><br><span class="line"># One example of this is a cache, where as long as the node has the data it</span><br><span class="line"># should be able to serve it. </span><br><span class="line">#</span><br><span class="line"># The second use case is for configurations that don't meet the recommended  </span><br><span class="line"># three shards but want to enable cluster mode and scale later. A </span><br><span class="line"># master outage in a 1 or 2 shard configuration causes a read/write outage to the</span><br><span class="line"># entire cluster without this option set, with it set there is only a write outage.</span><br><span class="line"># Without a quorum of masters, slot ownership will not change automatically. </span><br><span class="line">#</span><br><span class="line"># cluster-allow-reads-when-down no</span><br><span class="line"></span><br><span class="line"># In order to setup your cluster make sure to read the documentation</span><br><span class="line"># available at http://redis.io web site.</span><br><span class="line"></span><br><span class="line">########################## CLUSTER DOCKER/NAT support  ########################</span><br><span class="line"></span><br><span class="line"># In certain deployments, Redis Cluster nodes address discovery fails, because</span><br><span class="line"># addresses are NAT-ted or because ports are forwarded (the typical case is</span><br><span class="line"># Docker and other containers).</span><br><span class="line">#</span><br><span class="line"># In order to make Redis Cluster working in such environments, a static</span><br><span class="line"># configuration where each node knows its public address is needed. The</span><br><span class="line"># following two options are used for this scope, and are:</span><br><span class="line">#</span><br><span class="line"># * cluster-announce-ip</span><br><span class="line"># * cluster-announce-port</span><br><span class="line"># * cluster-announce-bus-port</span><br><span class="line">#</span><br><span class="line"># Each instruct the node about its address, client port, and cluster message</span><br><span class="line"># bus port. The information is then published in the header of the bus packets</span><br><span class="line"># so that other nodes will be able to correctly map the address of the node</span><br><span class="line"># publishing the information.</span><br><span class="line">#</span><br><span class="line"># If the above options are not used, the normal Redis Cluster auto-detection</span><br><span class="line"># will be used instead.</span><br><span class="line">#</span><br><span class="line"># Note that when remapped, the bus port may not be at the fixed offset of</span><br><span class="line"># clients port + 10000, so you can specify any port and bus-port depending</span><br><span class="line"># on how they get remapped. If the bus-port is not set, a fixed offset of</span><br><span class="line"># 10000 will be used as usually.</span><br><span class="line">#</span><br><span class="line"># Example:</span><br><span class="line">#</span><br><span class="line"># cluster-announce-ip 10.1.1.5</span><br><span class="line"># cluster-announce-port 6379</span><br><span class="line"># cluster-announce-bus-port 6380</span><br><span class="line"></span><br><span class="line">################################## SLOW LOG ###################################</span><br><span class="line"></span><br><span class="line"># The Redis Slow Log is a system to log queries that exceeded a specified</span><br><span class="line"># execution time. The execution time does not include the I/O operations</span><br><span class="line"># like talking with the client, sending the reply and so forth,</span><br><span class="line"># but just the time needed to actually execute the command (this is the only</span><br><span class="line"># stage of command execution where the thread is blocked and can not serve</span><br><span class="line"># other requests in the meantime).</span><br><span class="line">#</span><br><span class="line"># You can configure the slow log with two parameters: one tells Redis</span><br><span class="line"># what is the execution time, in microseconds, to exceed in order for the</span><br><span class="line"># command to get logged, and the other parameter is the length of the</span><br><span class="line"># slow log. When a new command is logged the oldest one is removed from the</span><br><span class="line"># queue of logged commands.</span><br><span class="line"></span><br><span class="line"># The following time is expressed in microseconds, so 1000000 is equivalent</span><br><span class="line"># to one second. Note that a negative number disables the slow log, while</span><br><span class="line"># a value of zero forces the logging of every command.</span><br><span class="line">slowlog-log-slower-than <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"># There is no limit to this length. Just be aware that it will consume memory.</span><br><span class="line"># You can reclaim memory used by the slow log with SLOWLOG RESET.</span><br><span class="line">slowlog-max-len <span class="number">128</span></span><br><span class="line"></span><br><span class="line">################################ LATENCY MONITOR ##############################</span><br><span class="line"></span><br><span class="line"># The Redis latency monitoring subsystem samples different operations</span><br><span class="line"># at runtime in order to collect data related to possible sources of</span><br><span class="line"># latency of a Redis instance.</span><br><span class="line">#</span><br><span class="line"># Via the LATENCY command this information is available to the user that can</span><br><span class="line"># print graphs and obtain reports.</span><br><span class="line">#</span><br><span class="line"># The system only logs operations that were performed in a time equal or</span><br><span class="line"># greater than the amount of milliseconds specified via the</span><br><span class="line"># latency-monitor-threshold configuration directive. When its value is set</span><br><span class="line"># to zero, the latency monitor is turned off.</span><br><span class="line">#</span><br><span class="line"># By default latency monitoring is disabled since it is mostly not needed</span><br><span class="line"># if you don't have latency issues, and collecting data has a performance</span><br><span class="line"># impact, that while very small, can be measured under big load. Latency</span><br><span class="line"># monitoring can easily be enabled at runtime using the command</span><br><span class="line"># "CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;" if needed.</span><br><span class="line">latency-monitor-threshold <span class="number">0</span></span><br><span class="line"></span><br><span class="line">############################# EVENT NOTIFICATION ##############################</span><br><span class="line"></span><br><span class="line"># Redis can notify Pub/Sub clients about events happening in the key space.</span><br><span class="line"># This feature is documented at http://redis.io/topics/notifications</span><br><span class="line">#</span><br><span class="line"># For instance if keyspace events notification is enabled, and a client</span><br><span class="line"># performs a DEL operation on key "foo" stored in the Database 0, two</span><br><span class="line"># messages will be published via Pub/Sub:</span><br><span class="line">#</span><br><span class="line"># PUBLISH __keyspace@0__:foo del</span><br><span class="line"># PUBLISH __keyevent@0__:del foo</span><br><span class="line">#</span><br><span class="line"># It is possible to select the events that Redis will notify among a set</span><br><span class="line"># of classes. Every class is identified by a single character:</span><br><span class="line">#</span><br><span class="line">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span><br><span class="line">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span><br><span class="line">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span><br><span class="line">#  $     String commands</span><br><span class="line">#  l     List commands</span><br><span class="line">#  s     Set commands</span><br><span class="line">#  h     Hash commands</span><br><span class="line">#  z     Sorted set commands</span><br><span class="line">#  x     Expired events (events generated every time a key expires)</span><br><span class="line">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span><br><span class="line">#  t     Stream commands</span><br><span class="line">#  m     Key-miss events (Note: It is not included in the 'A' class)</span><br><span class="line">#  A     Alias for g$lshzxet, so that the "AKE" string means all the events</span><br><span class="line">#        (Except key-miss events which are excluded from 'A' due to their</span><br><span class="line">#         unique nature).</span><br><span class="line">#</span><br><span class="line">#  The "notify-keyspace-events" takes as argument a string that is composed</span><br><span class="line">#  of zero or multiple characters. The empty string means that notifications</span><br><span class="line">#  are disabled.</span><br><span class="line">#</span><br><span class="line">#  Example: to enable list and generic events, from the point of view of the</span><br><span class="line">#           event name, use:</span><br><span class="line">#</span><br><span class="line">#  notify-keyspace-events Elg</span><br><span class="line">#</span><br><span class="line">#  Example 2: to get the stream of the expired keys subscribing to channel</span><br><span class="line">#             name __keyevent@0__:expired use:</span><br><span class="line">#</span><br><span class="line">#  notify-keyspace-events Ex</span><br><span class="line">#</span><br><span class="line">#  By default all notifications are disabled because most users don't need</span><br><span class="line">#  this feature and the feature has some overhead. Note that if you don't</span><br><span class="line">#  specify at least one of K or E, no events will be delivered.</span><br><span class="line">notify-keyspace-events <span class="string">""</span></span><br><span class="line"></span><br><span class="line">############################### GOPHER SERVER #################################</span><br><span class="line"></span><br><span class="line"># Redis contains an implementation of the Gopher protocol, as specified in</span><br><span class="line"># the RFC 1436 (https://www.ietf.org/rfc/rfc1436.txt).</span><br><span class="line">#</span><br><span class="line"># The Gopher protocol was very popular in the late '90s. It is an alternative</span><br><span class="line"># to the web, and the implementation both server and client side is so simple</span><br><span class="line"># that the Redis server has just 100 lines of code in order to implement this</span><br><span class="line"># support.</span><br><span class="line">#</span><br><span class="line"># What do you do with Gopher nowadays? Well Gopher never *really* died, and</span><br><span class="line"># lately there is a movement in order for the Gopher more hierarchical content</span><br><span class="line"># composed of just plain text documents to be resurrected. Some want a simpler</span><br><span class="line"># internet, others believe that the mainstream internet became too much</span><br><span class="line"># controlled, and it's cool to create an alternative space for people that</span><br><span class="line"># want a bit of fresh air.</span><br><span class="line">#</span><br><span class="line"># Anyway for the 10nth birthday of the Redis, we gave it the Gopher protocol</span><br><span class="line"># as a gift.</span><br><span class="line">#</span><br><span class="line"># --- HOW IT WORKS? ---</span><br><span class="line">#</span><br><span class="line"># The Redis Gopher support uses the inline protocol of Redis, and specifically</span><br><span class="line"># two kind of inline requests that were anyway illegal: an empty request</span><br><span class="line"># or any request that starts with "/" (there are no Redis commands starting</span><br><span class="line"># with such a slash). Normal RESP2/RESP3 requests are completely out of the</span><br><span class="line"># path of the Gopher protocol implementation and are served as usually as well.</span><br><span class="line">#</span><br><span class="line"># If you open a connection to Redis when Gopher is enabled and send it</span><br><span class="line"># a string like "/foo", if there is a key named "/foo" it is served via the</span><br><span class="line"># Gopher protocol.</span><br><span class="line">#</span><br><span class="line"># In order to create a real Gopher "hole" (the name of a Gopher site in Gopher</span><br><span class="line"># talking), you likely need a script like the following:</span><br><span class="line">#</span><br><span class="line">#   https://github.com/antirez/gopher2redis</span><br><span class="line">#</span><br><span class="line"># --- SECURITY WARNING ---</span><br><span class="line">#</span><br><span class="line"># If you plan to put Redis on the internet in a publicly accessible address</span><br><span class="line"># to server Gopher pages MAKE SURE TO SET A PASSWORD to the instance.</span><br><span class="line"># Once a password is set:</span><br><span class="line">#</span><br><span class="line">#   1. The Gopher server (when enabled, not by default) will still serve</span><br><span class="line">#      content via Gopher.</span><br><span class="line">#   2. However other commands cannot be called before the client will</span><br><span class="line">#      authenticate.</span><br><span class="line">#</span><br><span class="line"># So use the 'requirepass' option to protect your instance.</span><br><span class="line">#</span><br><span class="line"># To enable Gopher support uncomment the following line and set</span><br><span class="line"># the option from no (the default) to yes.</span><br><span class="line">#</span><br><span class="line"># gopher-enabled no</span><br><span class="line"></span><br><span class="line">############################### ADVANCED CONFIG ###############################</span><br><span class="line"></span><br><span class="line"># Hashes are encoded using a memory efficient data structure when they have a</span><br><span class="line"># small number of entries, and the biggest entry does not exceed a given</span><br><span class="line"># threshold. These thresholds can be configured using the following directives.</span><br><span class="line">hash-max-ziplist-entries <span class="number">512</span></span><br><span class="line">hash-max-ziplist-value <span class="number">64</span></span><br><span class="line"></span><br><span class="line"># Lists are also encoded in a special way to save a lot of space.</span><br><span class="line"># The number of entries allowed per internal list node can be specified</span><br><span class="line"># as a fixed maximum size or a maximum number of elements.</span><br><span class="line"># For a fixed maximum size, use -5 through -1, meaning:</span><br><span class="line"># -5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span><br><span class="line"># -4: max size: 32 Kb  &lt;-- not recommended</span><br><span class="line"># -3: max size: 16 Kb  &lt;-- probably not recommended</span><br><span class="line"># -2: max size: 8 Kb   &lt;-- good</span><br><span class="line"># -1: max size: 4 Kb   &lt;-- good</span><br><span class="line"># Positive numbers mean store up to _exactly_ that number of elements</span><br><span class="line"># per list node.</span><br><span class="line"># The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span><br><span class="line"># but if your use case is unique, adjust the settings as necessary.</span><br><span class="line">list-max-ziplist-size -<span class="number">2</span></span><br><span class="line"></span><br><span class="line"># Lists may also be compressed.</span><br><span class="line"># Compress depth is the number of quicklist ziplist nodes from *each* side of</span><br><span class="line"># the list to *exclude* from compression.  The head and tail of the list</span><br><span class="line"># are always uncompressed for fast push/pop operations.  Settings are:</span><br><span class="line"># 0: disable all list compression</span><br><span class="line"># 1: depth 1 means "don't start compressing until after 1 node into the list,</span><br><span class="line">#    going from either the head or tail"</span><br><span class="line">#    So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span><br><span class="line">#    [head], [tail] will always be uncompressed; inner nodes will compress.</span><br><span class="line"># 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span><br><span class="line">#    2 here means: don't compress head or head-&gt;next or tail-&gt;prev or tail,</span><br><span class="line">#    but compress all nodes between them.</span><br><span class="line"># 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span><br><span class="line"># etc.</span><br><span class="line">list-compress-depth <span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Sets have a special encoding in just one case: when a set is composed</span><br><span class="line"># of just strings that happen to be integers in radix 10 in the range</span><br><span class="line"># of 64 bit signed integers.</span><br><span class="line"># The following configuration setting sets the limit in the size of the</span><br><span class="line"># set in order to use this special memory saving encoding.</span><br><span class="line">set-max-intset-entries <span class="number">512</span></span><br><span class="line"></span><br><span class="line"># Similarly to hashes and lists, sorted sets are also specially encoded in</span><br><span class="line"># order to save a lot of space. This encoding is only used when the length and</span><br><span class="line"># elements of a sorted set are below the following limits:</span><br><span class="line">zset-max-ziplist-entries <span class="number">128</span></span><br><span class="line">zset-max-ziplist-value <span class="number">64</span></span><br><span class="line"></span><br><span class="line"># HyperLogLog sparse representation bytes limit. The limit includes the</span><br><span class="line"># 16 bytes header. When an HyperLogLog using the sparse representation crosses</span><br><span class="line"># this limit, it is converted into the dense representation.</span><br><span class="line">#</span><br><span class="line"># A value greater than 16000 is totally useless, since at that point the</span><br><span class="line"># dense representation is more memory efficient.</span><br><span class="line">#</span><br><span class="line"># The suggested value is ~ 3000 in order to have the benefits of</span><br><span class="line"># the space efficient encoding without slowing down too much PFADD,</span><br><span class="line"># which is O(N) with the sparse encoding. The value can be raised to</span><br><span class="line"># ~ 10000 when CPU is not a concern, but space is, and the data set is</span><br><span class="line"># composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span><br><span class="line">hll-sparse-max-bytes <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"># Streams macro node max size / items. The stream data structure is a radix</span><br><span class="line"># tree of big nodes that encode multiple items inside. Using this configuration</span><br><span class="line"># it is possible to configure how big a single node can be in bytes, and the</span><br><span class="line"># maximum number of items it may contain before switching to a new node when</span><br><span class="line"># appending new stream entries. If any of the following settings are set to</span><br><span class="line"># zero, the limit is ignored, so for instance it is possible to set just a</span><br><span class="line"># max entires limit by setting max-bytes to 0 and max-entries to the desired</span><br><span class="line"># value.</span><br><span class="line">stream-node-max-bytes <span class="number">4096</span></span><br><span class="line">stream-node-max-entries <span class="number">100</span></span><br><span class="line"></span><br><span class="line"># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span><br><span class="line"># order to help rehashing the main Redis hash table (the one mapping top-level</span><br><span class="line"># keys to values). The hash table implementation Redis uses (see dict.c)</span><br><span class="line"># performs a lazy rehashing: the more operation you run into a hash table</span><br><span class="line"># that is rehashing, the more rehashing "steps" are performed, so if the</span><br><span class="line"># server is idle the rehashing is never complete and some more memory is used</span><br><span class="line"># by the hash table.</span><br><span class="line">#</span><br><span class="line"># The default is to use this millisecond 10 times every second in order to</span><br><span class="line"># actively rehash the main dictionaries, freeing memory when possible.</span><br><span class="line">#</span><br><span class="line"># If unsure:</span><br><span class="line"># use "activerehashing no" if you have hard latency requirements and it is</span><br><span class="line"># not a good thing in your environment that Redis can reply from time to time</span><br><span class="line"># to queries with 2 milliseconds delay.</span><br><span class="line">#</span><br><span class="line"># use "activerehashing yes" if you don't have such hard requirements but</span><br><span class="line"># want to free memory asap when possible.</span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"># The client output buffer limits can be used to force disconnection of clients</span><br><span class="line"># that are not reading data from the server fast enough for some reason (a</span><br><span class="line"># common reason is that a Pub/Sub client can't consume messages as fast as the</span><br><span class="line"># publisher can produce them).</span><br><span class="line">#</span><br><span class="line"># The limit can be set differently for the three different classes of clients:</span><br><span class="line">#</span><br><span class="line"># normal -&gt; normal clients including MONITOR clients</span><br><span class="line"># replica  -&gt; replica clients</span><br><span class="line"># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span><br><span class="line">#</span><br><span class="line"># The syntax of every client-output-buffer-limit directive is the following:</span><br><span class="line">#</span><br><span class="line"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span><br><span class="line">#</span><br><span class="line"># A client is immediately disconnected once the hard limit is reached, or if</span><br><span class="line"># the soft limit is reached and remains reached for the specified number of</span><br><span class="line"># seconds (continuously).</span><br><span class="line"># So for instance if the hard limit is 32 megabytes and the soft limit is</span><br><span class="line"># 16 megabytes / 10 seconds, the client will get disconnected immediately</span><br><span class="line"># if the size of the output buffers reach 32 megabytes, but will also get</span><br><span class="line"># disconnected if the client reaches 16 megabytes and continuously overcomes</span><br><span class="line"># the limit for 10 seconds.</span><br><span class="line">#</span><br><span class="line"># By default normal clients are not limited because they don't receive data</span><br><span class="line"># without asking (in a push way), but just after a request, so only</span><br><span class="line"># asynchronous clients may create a scenario where data is requested faster</span><br><span class="line"># than it can read.</span><br><span class="line">#</span><br><span class="line"># Instead there is a default limit for pubsub and replica clients, since</span><br><span class="line"># subscribers and replicas receive data in a push fashion.</span><br><span class="line">#</span><br><span class="line"># Both the hard or the soft limit can be disabled by setting them to zero.</span><br><span class="line">client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">client-output-buffer-limit replica <span class="number">256</span>mb <span class="number">64</span>mb <span class="number">60</span></span><br><span class="line">client-output-buffer-limit pubsub <span class="number">32</span>mb <span class="number">8</span>mb <span class="number">60</span></span><br><span class="line"></span><br><span class="line"># Client query buffers accumulate new commands. They are limited to a fixed</span><br><span class="line"># amount by default in order to avoid that a protocol desynchronization (for</span><br><span class="line"># instance due to a bug in the client) will lead to unbound memory usage in</span><br><span class="line"># the query buffer. However you can configure it here if you have very special</span><br><span class="line"># needs, such us huge multi/exec requests or alike.</span><br><span class="line">#</span><br><span class="line"># client-query-buffer-limit 1gb</span><br><span class="line"></span><br><span class="line"># In the Redis protocol, bulk requests, that are, elements representing single</span><br><span class="line"># strings, are normally limited ot 512 mb. However you can change this limit</span><br><span class="line"># here, but must be 1mb or greater</span><br><span class="line">#</span><br><span class="line"># proto-max-bulk-len 512mb</span><br><span class="line"></span><br><span class="line"># Redis calls an internal function to perform many background tasks, like</span><br><span class="line"># closing connections of clients in timeout, purging expired keys that are</span><br><span class="line"># never requested, and so forth.</span><br><span class="line">#</span><br><span class="line"># Not all tasks are performed with the same frequency, but Redis checks for</span><br><span class="line"># tasks to perform according to the specified "hz" value.</span><br><span class="line">#</span><br><span class="line"># By default "hz" is set to 10. Raising the value will use more CPU when</span><br><span class="line"># Redis is idle, but at the same time will make Redis more responsive when</span><br><span class="line"># there are many keys expiring at the same time, and timeouts may be</span><br><span class="line"># handled with more precision.</span><br><span class="line">#</span><br><span class="line"># The range is between 1 and 500, however a value over 100 is usually not</span><br><span class="line"># a good idea. Most users should use the default of 10 and raise this up to</span><br><span class="line"># 100 only in environments where very low latency is required.</span><br><span class="line">hz <span class="number">10</span></span><br><span class="line"></span><br><span class="line"># Normally it is useful to have an HZ value which is proportional to the</span><br><span class="line"># number of clients connected. This is useful in order, for instance, to</span><br><span class="line"># avoid too many clients are processed for each background task invocation</span><br><span class="line"># in order to avoid latency spikes.</span><br><span class="line">#</span><br><span class="line"># Since the default HZ value by default is conservatively set to 10, Redis</span><br><span class="line"># offers, and enables by default, the ability to use an adaptive HZ value</span><br><span class="line"># which will temporary raise when there are many connected clients.</span><br><span class="line">#</span><br><span class="line"># When dynamic HZ is enabled, the actual configured HZ will be used</span><br><span class="line"># as a baseline, but multiples of the configured HZ value will be actually</span><br><span class="line"># used as needed once more clients are connected. In this way an idle</span><br><span class="line"># instance will use very little CPU time while a busy instance will be</span><br><span class="line"># more responsive.</span><br><span class="line">dynamic-hz yes</span><br><span class="line"></span><br><span class="line"># When a child rewrites the AOF file, if the following option is enabled</span><br><span class="line"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"># big latency spikes.</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"># When redis saves RDB file, if the following option is enabled</span><br><span class="line"># the file will be fsync-ed every 32 MB of data generated. This is useful</span><br><span class="line"># in order to commit the file to the disk more incrementally and avoid</span><br><span class="line"># big latency spikes.</span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"></span><br><span class="line"># Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span><br><span class="line"># idea to start with the default settings and only change them after investigating</span><br><span class="line"># how to improve the performances and how the keys LFU change over time, which</span><br><span class="line"># is possible to inspect via the OBJECT FREQ command.</span><br><span class="line">#</span><br><span class="line"># There are two tunable parameters in the Redis LFU implementation: the</span><br><span class="line"># counter logarithm factor and the counter decay time. It is important to</span><br><span class="line"># understand what the two parameters mean before changing them.</span><br><span class="line">#</span><br><span class="line"># The LFU counter is just 8 bits per key, it's maximum value is 255, so Redis</span><br><span class="line"># uses a probabilistic increment with logarithmic behavior. Given the value</span><br><span class="line"># of the old counter, when a key is accessed, the counter is incremented in</span><br><span class="line"># this way:</span><br><span class="line">#</span><br><span class="line"># 1. A random number R between 0 and 1 is extracted.</span><br><span class="line"># 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span><br><span class="line"># 3. The counter is incremented only if R &lt; P.</span><br><span class="line">#</span><br><span class="line"># The default lfu-log-factor is 10. This is a table of how the frequency</span><br><span class="line"># counter changes with a different number of accesses with different</span><br><span class="line"># logarithmic factors:</span><br><span class="line">#</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 0      | 104        | 255        | 255        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 1      | 18         | 49         | 255        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 10     | 10         | 18         | 142        | 255        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line"># | 100    | 8          | 11         | 49         | 143        | 255        |</span><br><span class="line"># +--------+------------+------------+------------+------------+------------+</span><br><span class="line">#</span><br><span class="line"># NOTE: The above table was obtained by running the following commands:</span><br><span class="line">#</span><br><span class="line">#   redis-benchmark -n 1000000 incr foo</span><br><span class="line">#   redis-cli object freq foo</span><br><span class="line">#</span><br><span class="line"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span><br><span class="line"># to accumulate hits.</span><br><span class="line">#</span><br><span class="line"># The counter decay time is the time, in minutes, that must elapse in order</span><br><span class="line"># for the key counter to be divided by two (or decremented if it has a value</span><br><span class="line"># less &lt;= 10).</span><br><span class="line">#</span><br><span class="line"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span><br><span class="line"># decay the counter every time it happens to be scanned.</span><br><span class="line">#</span><br><span class="line"># lfu-log-factor 10</span><br><span class="line"># lfu-decay-time 1</span><br><span class="line"></span><br><span class="line">########################### ACTIVE DEFRAGMENTATION #######################</span><br><span class="line">#</span><br><span class="line"># What is active defragmentation?</span><br><span class="line"># -------------------------------</span><br><span class="line">#</span><br><span class="line"># Active (online) defragmentation allows a Redis server to compact the</span><br><span class="line"># spaces left between small allocations and deallocations of data in memory,</span><br><span class="line"># thus allowing to reclaim back memory.</span><br><span class="line">#</span><br><span class="line"># Fragmentation is a natural process that happens with every allocator (but</span><br><span class="line"># less so with Jemalloc, fortunately) and certain workloads. Normally a server</span><br><span class="line"># restart is needed in order to lower the fragmentation, or at least to flush</span><br><span class="line"># away all the data and create it again. However thanks to this feature</span><br><span class="line"># implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span><br><span class="line"># in an "hot" way, while the server is running.</span><br><span class="line">#</span><br><span class="line"># Basically when the fragmentation is over a certain level (see the</span><br><span class="line"># configuration options below) Redis will start to create new copies of the</span><br><span class="line"># values in contiguous memory regions by exploiting certain specific Jemalloc</span><br><span class="line"># features (in order to understand if an allocation is causing fragmentation</span><br><span class="line"># and to allocate it in a better place), and at the same time, will release the</span><br><span class="line"># old copies of the data. This process, repeated incrementally for all the keys</span><br><span class="line"># will cause the fragmentation to drop back to normal values.</span><br><span class="line">#</span><br><span class="line"># Important things to understand:</span><br><span class="line">#</span><br><span class="line"># 1. This feature is disabled by default, and only works if you compiled Redis</span><br><span class="line">#    to use the copy of Jemalloc we ship with the source code of Redis.</span><br><span class="line">#    This is the default with Linux builds.</span><br><span class="line">#</span><br><span class="line"># 2. You never need to enable this feature if you don't have fragmentation</span><br><span class="line">#    issues.</span><br><span class="line">#</span><br><span class="line"># 3. Once you experience fragmentation, you can enable this feature when</span><br><span class="line">#    needed with the command "CONFIG SET activedefrag yes".</span><br><span class="line">#</span><br><span class="line"># The configuration parameters are able to fine tune the behavior of the</span><br><span class="line"># defragmentation process. If you are not sure about what they mean it is</span><br><span class="line"># a good idea to leave the defaults untouched.</span><br><span class="line"></span><br><span class="line"># Enabled active defragmentation</span><br><span class="line"># activedefrag no</span><br><span class="line"></span><br><span class="line"># Minimum amount of fragmentation waste to start active defrag</span><br><span class="line"># active-defrag-ignore-bytes 100mb</span><br><span class="line"></span><br><span class="line"># Minimum percentage of fragmentation to start active defrag</span><br><span class="line"># active-defrag-threshold-lower 10</span><br><span class="line"></span><br><span class="line"># Maximum percentage of fragmentation at which we use maximum effort</span><br><span class="line"># active-defrag-threshold-upper 100</span><br><span class="line"></span><br><span class="line"># Minimal effort for defrag in CPU percentage, to be used when the lower</span><br><span class="line"># threshold is reached</span><br><span class="line"># active-defrag-cycle-min 1</span><br><span class="line"></span><br><span class="line"># Maximal effort for defrag in CPU percentage, to be used when the upper</span><br><span class="line"># threshold is reached</span><br><span class="line"># active-defrag-cycle-max 25</span><br><span class="line"></span><br><span class="line"># Maximum number of set/hash/zset/list fields that will be processed from</span><br><span class="line"># the main dictionary scan</span><br><span class="line"># active-defrag-max-scan-fields 1000</span><br><span class="line"></span><br><span class="line"># Jemalloc background thread for purging will be enabled by default</span><br><span class="line">jemalloc-bg-thread yes</span><br><span class="line"></span><br><span class="line"># It is possible to pin different threads and processes of Redis to specific</span><br><span class="line"># CPUs in your system, in order to maximize the performances of the server.</span><br><span class="line"># This is useful both in order to pin different Redis threads in different</span><br><span class="line"># CPUs, but also in order to make sure that multiple Redis instances running</span><br><span class="line"># in the same host will be pinned to different CPUs.</span><br><span class="line">#</span><br><span class="line"># Normally you can do this using the "taskset" command, however it is also</span><br><span class="line"># possible to this via Redis configuration directly, both in Linux and FreeBSD.</span><br><span class="line">#</span><br><span class="line"># You can pin the server/IO threads, bio threads, aof rewrite child process, and</span><br><span class="line"># the bgsave child process. The syntax to specify the cpu list is the same as</span><br><span class="line"># the taskset command:</span><br><span class="line">#</span><br><span class="line"># Set redis server/io threads to cpu affinity 0,2,4,6:</span><br><span class="line"># server_cpulist 0-7:2</span><br><span class="line">#</span><br><span class="line"># Set bio threads to cpu affinity 1,3:</span><br><span class="line"># bio_cpulist 1,3</span><br><span class="line">#</span><br><span class="line"># Set aof rewrite child process to cpu affinity 8,9,10,11:</span><br><span class="line"># aof_rewrite_cpulist 8-11</span><br><span class="line">#</span><br><span class="line"># Set bgsave child process to cpu affinity 1,10,11</span><br><span class="line"># bgsave_cpulist 1,10-11</span><br></pre></td></tr></table></figure>
<h3 id="测试-redis-cli连接上来"><a href="#测试-redis-cli连接上来" class="headerlink" title="测试 redis-cli连接上来"></a>测试 redis-cli连接上来</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker exec -it 运行着redis服务容器的ID redis-cli</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095817.png"></p>
<h3 id="测试持久化文件生成"><a href="#测试持久化文件生成" class="headerlink" title="测试持久化文件生成"></a>测试持久化文件生成</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095821.png"></p>
<h1 id="第-八-章-将镜像推送到阿里云"><a href="#第-八-章-将镜像推送到阿里云" class="headerlink" title="第 八 章 将镜像推送到阿里云"></a>第 八 章 将镜像推送到阿里云</h1><h2 id="本地镜像发布到阿里云流程"><a href="#本地镜像发布到阿里云流程" class="headerlink" title="本地镜像发布到阿里云流程"></a>本地镜像发布到阿里云流程</h2><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095826.png"></p>
<h2 id="镜像生成方法"><a href="#镜像生成方法" class="headerlink" title="镜像生成方法"></a>镜像生成方法</h2><p>1、前面的Dockerfile</p>
<p>2、从容器中创建一个新的镜像 </p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095830.png"></p>
<h2 id="将本地镜像推送到阿里云"><a href="#将本地镜像推送到阿里云" class="headerlink" title="将本地镜像推送到阿里云"></a>将本地镜像推送到阿里云</h2><h3 id="1、本地镜像素材原型"><a href="#1、本地镜像素材原型" class="headerlink" title="1、本地镜像素材原型"></a>1、本地镜像素材原型</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095834.png"></p>
<p>2、阿里云开发者平台</p>
<p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html" target="_blank" rel="noopener">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095838.png"></p>
<h3 id="3、创建镜像仓库"><a href="#3、创建镜像仓库" class="headerlink" title="3、创建镜像仓库"></a>3、创建镜像仓库</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095842.png"></p>
<p>命名空间</p>
<p>仓库名称</p>
<h3 id="4、将镜像推送到registry"><a href="#4、将镜像推送到registry" class="headerlink" title="4、将镜像推送到registry"></a>4、将镜像推送到registry</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ sudo docker login --username=white3e registry.cn-shenzhen.aliyuncs.com</span><br><span class="line">$ sudo docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/ggccqq/mycentos:[镜像版本号]</span><br><span class="line">$ sudo docker push registry.cn-shenzhen.aliyuncs.com/ggccqq/mycentos:[镜像版本号]</span><br><span class="line">其中[ImageId][镜像版本]自己填写</span><br></pre></td></tr></table></figure>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095848.png"></p>
<h3 id="5、公有云可以查询得到"><a href="#5、公有云可以查询得到" class="headerlink" title="5、公有云可以查询得到"></a>5、公有云可以查询得到</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095852.png"></p>
<h3 id="6、查看详情"><a href="#6、查看详情" class="headerlink" title="6、查看详情"></a>6、查看详情</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095856.png"></p>
<h2 id="将阿里云上的镜像下载到本地"><a href="#将阿里云上的镜像下载到本地" class="headerlink" title="将阿里云上的镜像下载到本地"></a>将阿里云上的镜像下载到本地</h2><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/docker/20210811095900.png"></p>
<p>至此Docker基础篇完结</p>
<p>​    2020-10-4</p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>背包问题</title>
    <url>/alex-next/2021/04/18/%E7%AE%97%E6%B3%95/dp/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="1-01背包问题"><a href="#1-01背包问题" class="headerlink" title="1.01背包问题"></a>1.01背包问题</h1><p>原题链接：<a href="https://www.acwing.com/problem/content/description/2/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/description/2/</a></p>
<p>详细解析：<a href="https://www.acwing.com/solution/content/1374/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/1374/</a></p>
<p>关键：每件物品只能选一次，所以一维情况下，枚举背包容量时必须倒序，防止更新状态时前面的状态被污染</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment">有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</span></span><br><span class="line"><span class="comment">第 i 件物品的体积是 vi，价值是 wi。</span></span><br><span class="line"><span class="comment">求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。</span></span><br><span class="line"><span class="comment">输出最大价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入格式</span></span><br><span class="line"><span class="comment">第一行两个整数，N，V，用空格隔开，分别表示物品数量和背包容积。</span></span><br><span class="line"><span class="comment">接下来有 N 行，每行两个整数 vi,wi，用空格隔开，分别表示第 i 件物品的体积和价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出格式</span></span><br><span class="line"><span class="comment">输出一个整数，表示最大价值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">数据范围</span></span><br><span class="line"><span class="comment">0&lt;N,V≤1000</span></span><br><span class="line"><span class="comment">0&lt;vi,wi≤1000</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,V;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">int</span> v[N],w[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[V+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V; j &gt;= v[i<span class="number">-1</span>]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = max(dp[j],dp[j-v[i<span class="number">-1</span>]]+w[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[V]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// int dp[N+1][V+1];</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; N+1; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 0; j &lt; V+1; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         dp[i][j] = 0;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt; N+1; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt; V+1; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if (v[i-1]&lt;=j)</span></span><br><span class="line">    <span class="comment">//         &#123;</span></span><br><span class="line">    <span class="comment">//             dp[i][j] = max(dp[i-1][j],dp[i-1][j-v[i-1]]+w[i-1]);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//         else&#123;</span></span><br><span class="line">    <span class="comment">//             dp[i][j] = dp[i-1][j]; </span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="2-完全背包问题"><a href="#2-完全背包问题" class="headerlink" title="2.完全背包问题"></a>2.完全背包问题</h1><p>原题链接：<a href="https://www.acwing.com/problem/content/3/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/3/</a></p>
<p>详细解析：<a href="https://www.acwing.com/solution/content/5345/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/5345/</a></p>
<p>关键：与01背包不同的地方在于每个物品可以一直取，所以一维情况下，枚举背包容量时必须正序，这样更新状态时便可以使用到”污染”的状态(即一个物品可以被一直取)</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,V;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;V;</span><br><span class="line">    <span class="keyword">int</span> v[N],w[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v[i]&gt;&gt;w[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[V+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; V+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N+<span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = v[i<span class="number">-1</span>]; j&lt;V+<span class="number">1</span>; j++)<span class="comment">//与0-1背包不同,j从小到大枚举,dp[j]的更新就是用到了"污染"的状态dp[j]</span></span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = max(dp[j],dp[j-v[i<span class="number">-1</span>]]+w[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[V]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// int dp[N+1][V+1];</span></span><br><span class="line">    <span class="comment">// for (int i = 0; i &lt; N+1; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 0; j &lt; V+1; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         dp[i][j] = 0;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// for (int i = 1; i &lt; N+1; i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     for (int j = 1; j &lt; V+1; j++)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         if(v[i-1]&gt;j)&#123;</span></span><br><span class="line">    <span class="comment">//             dp[i][j] = dp[i-1][j];</span></span><br><span class="line">    <span class="comment">//         &#125;else&#123;</span></span><br><span class="line">    <span class="comment">//             dp[i][j] = max(dp[i-1][j],dp[i][j-v[i-1]]+w[i-1]);</span></span><br><span class="line">    <span class="comment">//         &#125;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;dp[N][V]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3-多重背包I"><a href="#3-多重背包I" class="headerlink" title="3.多重背包I"></a>3.多重背包I</h1><p>原题链接：<a href="https://www.acwing.com/problem/content/4/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/4/</a></p>
<p>详细解析：<a href="https://www.acwing.com/solution/content/17554/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/17554/</a></p>
<p>背包I数据量最小，可以将多重背包拆成01背包然后当成01背包来做。</p>
<p>时间复杂度为$O(NVS)$</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//转换为0-1背包</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v,w,s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= v; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>;k &lt;= s &amp;&amp; k*v &lt;= j;k++)&#123;<span class="comment">//选1-s个，且选的物品总和不能把背包撑爆</span></span><br><span class="line">                dp[j] = max(dp[j],dp[j-v*k]+w*k);  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;dp[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="4-多重背包II"><a href="#4-多重背包II" class="headerlink" title="4.多重背包II"></a>4.多重背包II</h1><p>原题链接：<a href="https://www.acwing.com/problem/content/5/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/5/</a></p>
<p>详细解析：<a href="https://www.acwing.com/solution/content/5527/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/5527/</a></p>
<p>此题数据量中等，可以考虑用二进制优化，即打包的思想，</p>
<p>核心思想：利用较少的几个数就能表示集合中所有的数。</p>
<p>时间复杂度为$O(NV\log S)$</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">good</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w,v;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f[N];</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;good&gt; goods;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v,w,s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;v&gt;&gt;w&gt;&gt;s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= s; j*=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            s-=j;</span><br><span class="line">            goods.push_back(&#123;j*w,j*v&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s&gt;<span class="number">0</span>)</span><br><span class="line">            goods.push_back(&#123;s*w,s*v&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> g:goods)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j &gt;= g.v; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            f[j] = max(f[j],f[j-g.v]+g.w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[m]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5-多重背包III"><a href="#5-多重背包III" class="headerlink" title="5.多重背包III"></a>5.多重背包III</h1><p>原题链接：<a href="https://www.acwing.com/problem/content/6/" target="_blank" rel="noopener">https://www.acwing.com/problem/content/6/</a></p>
<p>详细解析：<a href="https://www.acwing.com/solution/content/6500/" target="_blank" rel="noopener">https://www.acwing.com/solution/content/6500/</a></p>
<p>​                <a href="https://www.bilibili.com/video/BV1354y1C7SF" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1354y1C7SF</a></p>
<p>由于此题数据量比前两个都多，二进制优化也不管用，所以引入单调队列优化解决此问题。</p>
<p>核心思想：按每种物品的体积v 将dp分成v个类，在每一类中就可以使用单调队列(窗口的大小就是物品的数量)。</p>
<p>时间复杂度为$O(NV)$</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://www.bilibili.com/video/BV1354y1C7SF?from=search&amp;seid=6794272575550849440 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N], pre[N], q[N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pre, dp, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">        <span class="keyword">int</span> v, w, s;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; ++j) &#123;<span class="comment">//拆分成v个类</span></span><br><span class="line">            <span class="keyword">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &lt;= m; k += v) &#123;<span class="comment">//对每个类使用单调队列</span></span><br><span class="line">                <span class="comment">//q[hh]不在窗口[k-s*v,k-v]内,队头出队   </span></span><br><span class="line">                <span class="keyword">if</span> (hh &lt;= tt &amp;&amp; k - q[hh] &gt;  s*v)</span><br><span class="line">                    ++hh;</span><br><span class="line">                <span class="comment">//当前值比对尾元素更有价值,队尾出队</span></span><br><span class="line">                <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; pre[k] &gt;= pre[q[tt]]+(k-q[tt])/v*w)</span><br><span class="line">                    --tt;</span><br><span class="line">                <span class="comment">//下标入队,便于队头出队 </span></span><br><span class="line">                q[++tt] = k;</span><br><span class="line">                <span class="comment">//使用队头最有价值元素更新dp</span></span><br><span class="line">                dp[k] = max(dp[k], pre[q[hh]] + (k - q[hh])/v * w);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[m] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度</title>
    <url>/alex-next/2021/05/09/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E9%AB%98%E7%B2%BE%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="1、高精度加法"><a href="#1、高精度加法" class="headerlink" title="1、高精度加法"></a>1、高精度加法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; add(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;A.size() || i&lt;B.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;A.size())t+=A[i];</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B.size())t+=B[i];</span><br><span class="line">        C.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t)C.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.push_back(a[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)B.push_back(b[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = add(A,B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：如果有，记得在最后补上进位的1</p>
<h2 id="2、高精度减法"><a href="#2、高精度减法" class="headerlink" title="2、高精度减法"></a>2、高精度减法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.size()!=B.size())<span class="keyword">return</span> A.size()&gt;B.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i]!=B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i]&gt;B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sub(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        t = A[i]-t;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;B.size())t -= B[i];</span><br><span class="line">        C.push_back((t+<span class="number">10</span>)%<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(t&lt;<span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.size()&gt;<span class="number">1</span> &amp;&amp; C.back()==<span class="number">0</span>)C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.push_back(a[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)B.push_back(b[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">if</span>(cmp(A,B))&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = sub(A,B);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = sub(B,A);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：$(t+10)\%10$：无论$t<0$还是$t>=0$ ，最终都是正确的结果</0$还是$t></p>
<h2 id="3、高精度乘法"><a href="#3、高精度乘法" class="headerlink" title="3、高精度乘法"></a>3、高精度乘法</h2><p>高精度*低精度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mul(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;A.size() || t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;A.size())t += A[i]*b;</span><br><span class="line">        C.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(C.size()&gt;<span class="number">1</span> &amp;&amp; C.back()==<span class="number">0</span>)C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.push_back(a[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = mul(A,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>高精度*高精度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mul(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C(A.size() + B.size(), <span class="number">0</span>); <span class="comment">// 初始化为 0，且999*99最多 5 位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.size(); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; B.size(); j++)</span><br><span class="line">            C[i + j] += A[i] * B[j];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; C.size(); i++) &#123; <span class="comment">// i = C.size() - 1时 t 一定小于 10</span></span><br><span class="line">        t += C[i];</span><br><span class="line">        C[i] = t % <span class="number">10</span>;</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.size() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back(); <span class="comment">// 必须要去前导 0，因为最高位很可能是 0</span></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a, b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b; <span class="comment">// a = "1222323", b = "2323423423"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = a.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)A.push_back(a[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)B.push_back(b[i] - <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = mul(A, B);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = C.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; C[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、高精度除法"><a href="#4、高精度除法" class="headerlink" title="4、高精度除法"></a>4、高精度除法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; div(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;r)&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        r = r*<span class="number">10</span>+A[i];</span><br><span class="line">        C.push_back(r/b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.begin(),C.end());</span><br><span class="line">    <span class="keyword">while</span>(C.size()&gt;<span class="number">1</span> &amp;&amp; C.back()==<span class="number">0</span>)C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)A.push_back(a[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C = div(A,b,r);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：开始是倒着来，结束时，再将结果倒置一下，为了和加减乘符合。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/alex-next/2021/05/01/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<h2 id="1-快速幂"><a href="#1-快速幂" class="headerlink" title="1.快速幂"></a>1.快速幂</h2><p>快速幂的方法其实可以借鉴多重背包的二进制化简法，异曲同工。</p>
<p>底数为$a$，幂指数为$k$，模数为$p$</p>
<p>例：若求$3^{13} \mod 2$ ，</p>
<p>解：幂指数$13=(1101)$，$3^{13}=3^8·3^4·3^1$   </p>
<p>每次遍历指数时，若二进制对应位为1，就把它与结果相乘再取余，让底数成自身，指数右移一位    ；</p>
<p>​                                若二进制对应位为0  ，让底数乘自身，指数右移一位    </p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        ll a,k,p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;a, &amp;k, &amp;p);</span><br><span class="line">        ll r = <span class="number">1</span>%p;</span><br><span class="line">        <span class="keyword">while</span>(k)&#123;<span class="comment">//指数不为0</span></span><br><span class="line">            <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r=r*a%p;<span class="comment">//乘结果取余</span></span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;<span class="comment">//指数右移一位</span></span><br><span class="line">            a = a*a%p;<span class="comment">//底数乘自身</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-快速幂求逆元"><a href="#2-快速幂求逆元" class="headerlink" title="2.快速幂求逆元"></a>2.快速幂求逆元</h2><p>若p是质数,$\frac{a}{b}\equiv a·x(\mod p)$</p>
<p>两边同乘$b$得$a\equiv a·b·x(\mod p)$</p>
<p>即$1\equiv b·x(\mod p)$</p>
<p>由费马小定理可知，当n为质数时，</p>
<p>$b^{p-1} \equiv 1(\mod p)$</p>
<p>所以$x=b^{p-2},x称为b的模p乘法逆元$，其中$b$与$p$互质主要用来化除为乘</p>
<p>所以逆元就是$x\mod p$，即求$b^{p-2}\mod p$</p>
<p>注：当$b$是$p$的倍数时，$b$的逆元不存在，因为$b*x \mod p==0$  ，一定不等于1</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r = (ll)r*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = (ll)a*a%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,k,p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;p);</span><br><span class="line">        <span class="keyword">int</span> r = qmi(a,p<span class="number">-2</span>,p);</span><br><span class="line">        <span class="keyword">if</span>(a%p)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"impossible"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h2><p>原题链接：<a href="https://www.luogu.com.cn/problem/P3390" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P3390</a></p>
<p>矩阵快速幂=矩阵乘法+快速幂</p>
<p>理解：本质上都是对幂指数的优化求解。</p>
<p>c++版模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line">ll n,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[maxn][maxn], n;</span><br><span class="line">&#125;A,I;</span><br><span class="line"></span><br><span class="line">Mat <span class="keyword">operator</span>*(Mat b,Mat c)</span><br><span class="line">&#123;</span><br><span class="line">    Mat res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">            ll x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                x += (ll)b.m[i][k] * c.m[k][j] % mod;</span><br><span class="line">            res.m[i][j] = x%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">qmi</span><span class="params">(Mat A,ll k)</span></span>&#123;</span><br><span class="line">    Mat I;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        I.m[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)I = I*A;</span><br><span class="line">        A = A*A;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> I;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;A.m[i][j];</span><br><span class="line">    I = qmi(A,k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;I.m[i][j]&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>java版模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span>[][] mul(<span class="keyword">long</span>[][] a,<span class="keyword">long</span>[][] b)&#123;</span><br><span class="line">        <span class="keyword">long</span>[][] r = <span class="keyword">new</span> <span class="keyword">long</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                    r[i][j] += a[i][k]*b[k][j]%mod;</span><br><span class="line">                    r[i][j] %= mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span>[][] qmi(<span class="keyword">long</span>[][] a,<span class="keyword">long</span> k)&#123;</span><br><span class="line">        <span class="keyword">long</span>[][] r = <span class="keyword">new</span> <span class="keyword">long</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            r[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((k&amp;<span class="number">1</span>)==<span class="number">1</span>)</span><br><span class="line">                r = mul(r,a);</span><br><span class="line">            k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">            a = mul(a,a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String[] strs = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">        n = Integer.parseInt(strs[<span class="number">0</span>]);</span><br><span class="line">        k = Long.parseLong(strs[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">long</span>[][] a = <span class="keyword">new</span> <span class="keyword">long</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            String[] s = in.readLine().split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                a[i][j] = Integer.parseInt(s[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span>[][] r = qmi(a,k);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                System.out.print(r[i][j]+<span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例：奇异的虫群"><a href="#例：奇异的虫群" class="headerlink" title="例：奇异的虫群"></a>例：奇异的虫群</h2><blockquote>
<p>在一个奇怪的星球上驻扎着两个虫群A和B，它们用奇怪的方式繁殖着，在t+1时刻A虫群的数量等于t时刻A虫群和B虫群数量之和，t+1时刻B虫群的数量等于t时刻A虫群的数量。由于星际空间的时间维度很广阔，所以t可能很大。OverMind 想知道在t时刻A虫群的数量对 p = 1,000,000,007.取余数的结果。当t=1时 A种群和B种群的数量均为1。<br>输入格式<br>　 测试数据包含一个整数t，代表繁殖的时间。<br>输出格式<br>　 输出一行，包含一个整数，表示对p取余数的结果<br>样例输入<br>　 10<br>样例输出<br>　 89<br>样例输入<br>　 65536<br>样例输出<br>　 462302286<br>　<br>数据规模和约定<br>　　对于50%的数据 t&lt;=10^9<br>　　对于70%的数据 t&lt;=10^15<br>　　对于100%的数据 t&lt;=10^18</p>
</blockquote>
<p>关系矩阵$R=\left[\matrix{1&amp;1\\1&amp;0}\right]$</p>
<p>初始矩阵$A = \left[\matrix{1&amp;1\\0&amp;0}\right]$</p>
<p>要求的就是$A·R^{k-1}$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;A,R;</span><br><span class="line"></span><br><span class="line">Mat <span class="keyword">operator</span> * (Mat a,Mat b)&#123;</span><br><span class="line">    Mat r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">            r.m[i][j] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;<span class="number">2</span>;k++)</span><br><span class="line">                r.m[i][j] = (r.m[i][j]+(ll)a.m[i][k]*b.m[k][j]%mod)%mod; </span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qmi</span><span class="params">(Mat &amp;A,ll k,Mat R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)A = A*R;</span><br><span class="line">        R = R*R;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ll k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    A.m[<span class="number">0</span>][<span class="number">0</span>] = A.m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    R.m[<span class="number">0</span>][<span class="number">0</span>] = R.m[<span class="number">0</span>][<span class="number">1</span>] = R.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    qmi(A,k<span class="number">-1</span>,R);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;A.m[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学知识</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/alex-next/2021/05/09/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%88%86/</url>
    <content><![CDATA[<h2 id="1、数的范围"><a href="#1、数的范围" class="headerlink" title="1、数的范围"></a>1、数的范围</h2><p>实现两个函数：</p>
<p>① 小于等于x的最大数</p>
<p>② 大于等于x的最小数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchL</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//小于等于x的最大数的下标</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[mid]&gt;x)r = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">searchR</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//大于等于x的最小数的下标</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[mid] &lt; x)l = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">int</span> l = searchL(m);</span><br><span class="line">        <span class="keyword">if</span>(p[l]!=m)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l1 = searchR(m);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,l1,l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附：二分查找</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>,r = arr.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid]==x)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid]&gt;x)</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例：数的三次根方"><a href="#例：数的三次根方" class="headerlink" title="例：数的三次根方"></a>例：数的三次根方</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">-10000</span>,r = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span>(r-l&lt;<span class="number">1e-8</span>)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(mid*mid*mid&gt;x)r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lf"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序与归并排序</title>
    <url>/alex-next/2021/05/08/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="1、快速排序"><a href="#1、快速排序" class="headerlink" title="1、快速排序"></a>1、快速排序</h2><p>① 基准元素取$x=p[l+r&gt;&gt;1]$</p>
<p>② 调整区间：根据基准元素将区间调整为左右两个小区间，左边的元素都小于等于$x$，右边的元素都大于等于$x$，<strong>但此时左右两个区间都是无序的</strong>。</p>
<p>③ 递归处理左右两个小区间。</p>
<p>注：边界问题，取$i=l-1和j=r+1$ ，防止边界元素遍历不到 (在<code>do-while</code>中先执行自加自减，再执行<code>while</code>)。</p>
<p>时间复杂度：每趟调整的时间复杂度为$O(n)$，递归处理栈深度最好为$O(logn)$，最差为$O(n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> i = l<span class="number">-1</span>,j = r+<span class="number">1</span>,pivot = A[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">do</span> i++;<span class="keyword">while</span>(A[i]&lt;pivot);</span><br><span class="line">            <span class="keyword">do</span> j--;<span class="keyword">while</span>(A[j]&gt;pivot);</span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)swap(A[i],A[j]);<span class="comment">//各取所需:A[i]&gt;pivot,A[j]&lt;pivot</span></span><br><span class="line">        &#125;</span><br><span class="line">        quick_sort(l,j);</span><br><span class="line">        quick_sort(j+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">    quick_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,A[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例：第K个数"><a href="#例：第K个数" class="headerlink" title="例：第K个数"></a>例：第K个数</h2><p>题目描述：利用快速排序找出数组中第$k$小的数。</p>
<p>快速排序描述：</p>
<p>① 基准元素取$x=p[l+r&gt;&gt;1]$</p>
<p>② <strong>调整区间</strong>：根据基准元素将区间调整为左右两个小区间，左边的元素都小于等于$x$，右边的元素都大于等于$x$，<strong>但左右两个区间都没有顺序</strong>。</p>
<p>③ 递归处理左右两个小区间。</p>
<p>快速选择：</p>
<p>若找的元素的索引小于等于左区间的长度，则必定在右区间。</p>
<p><img alt="img" data-src="https://gitee.com/alexander1/pic/raw/master/acwing/20210508204944.png"></p>
<p>时间复杂度：第一层为$n$，第二层为$\frac{n}{2}$，第三层为$\frac{n}{4}$等等</p>
<p>加起来趋近于$2n$，所以时间复杂度为$O(n)$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> A[l];</span><br><span class="line">    <span class="keyword">int</span> i = l<span class="number">-1</span>,j = r+<span class="number">1</span>,pivot = A[l+r&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">        <span class="keyword">do</span> i++;<span class="keyword">while</span>(A[i]&lt;pivot);</span><br><span class="line">        <span class="keyword">do</span> j--;<span class="keyword">while</span>(A[j]&gt;pivot);</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)swap(A[i],A[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sl = j-l+<span class="number">1</span>;<span class="comment">//小于等于pivot的区间长度</span></span><br><span class="line">    <span class="keyword">if</span>(k&lt;=sl) <span class="keyword">return</span> quick_sort(l,j,k);</span><br><span class="line">    <span class="keyword">return</span> quick_sort(j+<span class="number">1</span>,r,k-sl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;A[i]);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;quick_sort(<span class="number">0</span>,n<span class="number">-1</span>,k);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、归并排序"><a href="#2、归并排序" class="headerlink" title="2、归并排序"></a>2、归并排序</h2><p>算法描述：</p>
<p>① 找出中间点mid</p>
<p>② 将区间$[l,r]$分为$[l,mid]和[mid+1,r]$两个区间，并进行递归排序。</p>
<p>③ <strong>合并区间</strong>：将区间$[l,mid]和[mid+1,r]$合并起来，需要开辟一个临时数组用来复制原数组的元素，<strong>此时的两个区间都是有序的 </strong>(在递归的最后一层每个区间只有1个元素，可以视为有序)，使用两个指针$i,j$分别指向两个区间，优先将小元素放入原数组中；最后，$i,j$不一定能到达两个区间末尾，所以还要分别进行一次$while$将元素放入原数组中。</p>
<p>时间复杂度：每趟合并为$O(n)$，栈深度为$O(log_2n)$，总时间复杂度为$O(nlog_2n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        merge_sort(l,mid);</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i&lt;=r;i++)</span><br><span class="line">            tmp[i] = p[i];</span><br><span class="line">        <span class="keyword">int</span> k = l,i = l,j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i]&lt;=tmp[j])p[k++] = tmp[i++];</span><br><span class="line">            <span class="keyword">else</span> p[k++] = tmp[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)p[k++] = tmp[i++];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)p[k++] = tmp[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">    merge_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">printf</span>(<span class="string">"%d "</span>,p[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="例：逆序对的数量"><a href="#例：逆序对的数量" class="headerlink" title="例：逆序对的数量"></a>例：逆序对的数量</h2><blockquote>
<p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p>
<p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i<j 且 a[i]>a[j]，则其为一个逆序对；否则不是。</j></p>
<p><strong>输入格式</strong></p>
<p>第一行包含整数 n，表示数列的长度。</p>
<p>第二行包含 n 个整数，表示整个数列。</p>
<p><strong>输出格式</strong></p>
<p>输出一个整数，表示逆序对的个数。</p>
<p><strong>数据范围</strong></p>
<p>1≤n≤100000</p>
</blockquote>
<p><img alt="img" data-src="https://gitee.com/alexander1/pic/raw/master/acwing/20210508210441.png"></p>
<p>如图，若$tmp[i]&gt;tmp[j]$，则区间$[i,mid]$中的数均大于$tmp[j]$，因为两区间都是有序的</p>
<p>所以此次的逆序对个数就是$mid-i+1$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],tmp[N];</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        merge_sort(l,mid);</span><br><span class="line">        merge_sort(mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l;i&lt;=r;i++)</span><br><span class="line">            tmp[i] = p[i];</span><br><span class="line">        <span class="keyword">int</span> k = l,i = l,j = mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp[i]&lt;=tmp[j])p[k++] = tmp[i++];</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                p[k++] = tmp[j++];</span><br><span class="line">                res += mid-i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)p[k++] = tmp[i++];</span><br><span class="line">        <span class="keyword">while</span>(j&lt;=r)p[k++] = tmp[j++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line">    merge_sort(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数组模拟</title>
    <url>/alex-next/2021/05/29/%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>为什么使用数组模拟单链表、双链表、栈、队列？</p>
<p>如果数据规模很大，一个一个new 速度太慢了，使用数组会大大加快速度。</p>
<h2 id="1-数组模拟单链表"><a href="#1-数组模拟单链表" class="headerlink" title="1.数组模拟单链表"></a>1.数组模拟单链表</h2><p><img alt="10048_8b47069add-数组表示单链表" data-src="https://gitee.com/alexander1/pic/raw/master/acwing/20210609111200.png"></p>
<p>在头部插入一个元素<code>x</code>：</p>
<p>先把值放到数据域中，让当前结点<code>next</code>指针指向<code>head</code>所指向的元素，让<code>head</code>指向当前元素，<code>idx</code>下移一位。<code>(idx</code>相当于元素的地址，<code>head</code>的值为第一个元素的地址<code>)</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_head</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第<code>k</code>个输入的数后面插入一个元素<code>x</code>：</p>
<p>先把值放到数据域中，让当前结点<code>next</code>指针指向<code>k</code>的<code>next</code>域所指向的元素，让<code>k</code>的<code>next</code>指向当前元素，<code>idx</code>下移一位。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>删除第k个输入的数后面的数：</p>
<p>让<code>k</code>的<code>next</code>指向<code>k</code>的<code>next</code>的<code>next</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C++代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> idx,head = <span class="number">-1</span>,e[N],ne[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示向链表头插入一个数x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_head</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示在第k个输入的数后面插入一个数x</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = ne[k];</span><br><span class="line">    ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示删除第k个输入的数后面的数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">char</span> op;</span><br><span class="line">        <span class="keyword">int</span> k,x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'D'</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="keyword">if</span>(!k)head = ne[head];</span><br><span class="line">            remove(k<span class="number">-1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'H'</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            add_head(x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'I'</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k&gt;&gt;x;</span><br><span class="line">            add(k<span class="number">-1</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = head;i!=<span class="number">-1</span>;i=ne[i])<span class="built_in">printf</span>(<span class="string">"%d "</span>,e[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-数组模拟双链表"><a href="#2-数组模拟双链表" class="headerlink" title="2.数组模拟双链表"></a>2.数组模拟双链表</h2><p>初始化左指针域和右指针域</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>,l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第<code>k</code>个结点右边插入一个元素：</p>
<p>与单链表类似，但要注意先让<code>k</code>的右节点的左指针指向<code>idx</code>，在让<code>k</code>的右指针指向<code>idx</code>。否则，<code>l[r[k]]</code>中的<code>r[k]</code>已经不是原来的值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将第<code>k</code> 个插入的数删除<code>(</code>序号<code>1,2,...n)</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>C++代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">int</span> e[N],l[N],r[N],idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>,l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在第k个结点右边插入一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示将第 k 个插入的数删除(序号1,2,...n)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">string</span> op;</span><br><span class="line">        <span class="keyword">int</span> k,x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"L"</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            add(<span class="number">0</span>,x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"R"</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            add(l[<span class="number">1</span>],x);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"D"</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            remove(k+<span class="number">1</span>);    </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"IL"</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k&gt;&gt;x;</span><br><span class="line">            add(l[k+<span class="number">1</span>],x);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;k&gt;&gt;x;</span><br><span class="line">            add(k+<span class="number">1</span>,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r[<span class="number">0</span>];i!=<span class="number">1</span>;i=r[i])<span class="built_in">printf</span>(<span class="string">"%d "</span>,e[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-数组模拟队列"><a href="#3-数组模拟队列" class="headerlink" title="3.数组模拟队列"></a>3.数组模拟队列</h2><p>当<code>tt&lt;hh</code>时，队列为空</p>
<p>队头为<code>q[hh]</code>，出队列<code>hh++</code></p>
<p><strong>c++代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> q[N],hh,tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="built_in">string</span> op;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">"push"</span>)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            q[++tt] = x;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"pop"</span>)&#123;</span><br><span class="line">            hh++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">"empty"</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hh&lt;=tt)<span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;q[hh]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-数组模拟栈"><a href="#4-数组模拟栈" class="headerlink" title="4.数组模拟栈"></a>4.数组模拟栈</h2><p>当<code>tt=-1</code>时，栈为空</p>
<p>出栈<code>tt--</code></p>
<p><strong>c++代码</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> stk[N],tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="string">"push"</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">            stk[++tt] = a;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"pop"</span>)&#123;</span><br><span class="line">            tt--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"query"</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,stk[tt]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s==<span class="string">"empty"</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(tt==<span class="number">-1</span>?<span class="string">"YES"</span>:<span class="string">"NO"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>质数</title>
    <url>/alex-next/2021/04/24/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E8%B4%A8%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1-试除法判断质数"><a href="#1-试除法判断质数" class="headerlink" title="1.试除法判断质数"></a>1.试除法判断质数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=x/i;i++)</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述for循环结束的条件是 <code>i &lt;= n/i</code>  只需要判断 $[2,\sqrt{n}]$ 内是否有n的因子, 因为$\sqrt{n}$ 之后的数如果是因子，必定已经被搜过了。</p>
<p>如 $2*6=12$ 若 6 是因子，必定在搜索 2 的时候，已经能判断 <code>n</code> 是合数。</p>
<h2 id="2-试除法分解质因数"><a href="#2-试除法分解质因数" class="headerlink" title="2.试除法分解质因数"></a>2.试除法分解质因数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=x/i;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">                s++;</span><br><span class="line">                x/=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据算数基本定理，任意一个合数，可以用几个质数的幂的乘积来表示。</p>
<p>如:  </p>
<p>$12 = 2^2 * 3$</p>
<p>$20 = 2^2*5$ </p>
<h2 id="3-埃式筛质数"><a href="#3-埃式筛质数" class="headerlink" title="3.埃式筛质数"></a>3.埃式筛质数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">int</span> primes[N],cnt;</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ai_seive</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//埃式筛----逐个将质因数倍数筛去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=n/i;i++)&#123;<span class="comment">//一个合数的最小质因数一定小于根号n,所以从2遍历到根号n</span></span><br><span class="line">        <span class="keyword">if</span>(st[i]==<span class="number">0</span>)&#123;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> j = i*i;j&lt;=n;j+=i)<span class="comment">//从i*i开始筛，因为j*(2,3,...i-1)都被筛完了</span></span><br><span class="line">            	st[j] = <span class="number">1</span>;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由 一个质数的倍数一定是合数，一次从2开始筛除它们的倍数。</p>
<h2 id="4-欧拉筛"><a href="#4-欧拉筛" class="headerlink" title="4.欧拉筛"></a>4.欧拉筛</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> primes[N],cnt;</span><br><span class="line"><span class="keyword">int</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ola</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i]==<span class="number">0</span>)primes[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;<span class="comment">//如果primes[j]*i&gt;n,就没有意义了</span></span><br><span class="line">            st[primes[j]*i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1)    当<code>i%primes[j]!=0</code>时,说明此时遍历到的<code>primes[j]</code>不是<code>i</code>的质因子，由<code>primes[j]&lt;i</code>所以<code>primes[j]*i</code>的最小质因子就是<code>primes[j]</code>;</p>
<p>2)    当有<code>i%primes[j]==0</code>时,说明<code>i</code>的最小质因子是<code>primes[j]</code>,因此<code>primes[j]*i</code>的最小质因子也就应该是<code>prime[j]</code>，</p>
<p>之后接着用<code>st[primes[j+1]*i]=true</code>去筛合数时，就不是用最小质因子去更新了,因为<code>i</code>有最小质因子<code>primes[j]&lt;primes[j+1]</code>,</p>
<p>此时的<code>primes[j+1]</code>不是<code>primes[j+1]*i</code>的最小质因子，此时就应该退出循环，避免之后重复进行筛选。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学知识</tag>
      </tags>
  </entry>
  <entry>
    <title>约数</title>
    <url>/alex-next/2021/04/26/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E7%BA%A6%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1-试除法求约数"><a href="#1-试除法求约数" class="headerlink" title="1.试除法求约数"></a>1.试除法求约数</h2><p>先用<code>vector</code>把所有因数保存下来，再排序。</p>
<p>注意：判断下若两个因数相同，不要添加两次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=m/i;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">                res.push_back(i);</span><br><span class="line">                <span class="keyword">if</span>(i!=m/i)res.push_back(m/i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(res.begin(),res.end());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x:res)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-约数个数"><a href="#2-约数个数" class="headerlink" title="2.约数个数"></a>2.约数个数</h2><p>对于任意一个合数$N$，若$N=p_1^{\alpha_1}·p_2^{\alpha_2}···p_n^{\alpha_n},其中p_i为质数,\alpha_i$为每种质因数的个数，$n为N$的质因数种类数</p>
<p>约数个数$N_c=(\alpha_1+1)·(\alpha_2+1)···(\alpha_n+1)$</p>
<p>证明：对于合数$N$的任意一个因数$C$，可以表示为$C=p_1^{\beta_1}·p_2^{\beta_2}···p_n^{\beta_n},\beta_i\in[0,\alpha_i]$</p>
<p>由排列组合的知识，每种质因数有$\alpha_i+1$种情况，$+1$是因为不选择也是一种情况，满足乘法原理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=m/i;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">                m/=i;</span><br><span class="line">                primes[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;<span class="number">1</span>)primes[m]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> p:primes)</span><br><span class="line">        res = res*(p.second+<span class="number">1</span>)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-约数之和"><a href="#3-约数之和" class="headerlink" title="3.约数之和"></a>3.约数之和</h2><p>对于任意一个合数$N$，若$N=p_1^{\alpha_1}·p_2^{\alpha_2}···p_n^{\alpha_n},其中p_i为质数,\alpha_i$为每种质因数的个数，$n为N$的质因数种类数</p>
<p>约数之和$S$可以表示为</p>
<p>$S=(p_1^0+p_1^1+p_1^2+····+p_1^{\alpha_1})·(p_2^0+p_2^1+p_2^2+····+p_2^{\alpha_2})····(p_n^0+p_n^1+p_n^2+····+p_n^{\alpha_n})$</p>
<p>证明：将$S$按项展开可表示为</p>
<p>$S=p_1^0·p_2^0··p_n^0+p_1^0·p_2^0··p_n^1+·····+p_1^{\beta_1}·p_2^{\beta_2}··p_n^{\beta_n}+·····+p_1^{\alpha_1}·p_2^{\alpha_2}··p_n^{\alpha_n}$</p>
<p>其中$\beta_1，\beta_2····\beta_n\in[0,\alpha_i]$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=m/i;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">                m/=i;</span><br><span class="line">                primes[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m&gt;<span class="number">1</span>)primes[m]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> prime:primes)&#123;</span><br><span class="line">        ll t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> p = prime.first;</span><br><span class="line">        <span class="keyword">int</span> cnt = prime.second;</span><br><span class="line">       	<span class="keyword">while</span>(cnt--)t = (t*p+<span class="number">1</span>)%mod;</span><br><span class="line">        res = res*t%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于<code>while(cnt--)t = (t*p+1)%mod;</code></p>
<p>初始化$t = 1$;</p>
<p>第一轮：$t = p+1$</p>
<p>第二轮：$t = p^2+p+1$</p>
<p>第n轮：$t = p^n+···+p^2+p+1$</p>
<h2 id="4-最大公约数"><a href="#4-最大公约数" class="headerlink" title="4.最大公约数"></a>4.最大公约数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n==<span class="number">0</span>?m:gcd(n,m%n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="keyword">int</span> r = gcd(a,b);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本原理：</p>
<p>若$x$能整除$a$且$x$能整除$b$，则$x$能整除$a·i+b·j$</p>
<p>$a\mod b=a-\lfloor{\frac{a}{b}}\rfloor·b$ ，即$a\mod b=a-c·b$  ，记 $c=\lfloor{\frac{a}{b}}\rfloor$</p>
<p>所以<code>gcd(a,b)=gcd(b,a mod b)</code></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学知识</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数</title>
    <url>/alex-next/2021/05/04/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E7%BB%84%E5%90%88%E6%95%B0/</url>
    <content><![CDATA[<h2 id="1-组合数I"><a href="#1-组合数I" class="headerlink" title="1.组合数I"></a>1.组合数I</h2><p>数据范围</p>
<p>$1≤n≤10000$,<br>$1≤b≤a≤2000$</p>
<p>分析：输入数据组数很多，但是每组数据比较小。考虑使用组合公式+打表。</p>
<p>根据高中的组合公式$C_a^b=C_{a-1}^b+C_{a-1}^{b-1}$，</p>
<p>直观解释，要从$a$个人中选出$b$个人，若不选甲，有$C_{a-1}^b$种方案；若选甲，有$C_{a-1}^{b-1}$种方案。</p>
<p>时间复杂度为$O(N^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>,mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">if</span>(!j)c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,c[a][b]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-组合数II"><a href="#2-组合数II" class="headerlink" title="2.组合数II"></a>2.组合数II</h2><p>数据范围</p>
<p>$1≤n≤10000$,<br>$1≤b≤a≤10^5$</p>
<p>分析：输入数据比上组小，但每组数据比上组大。考虑使用定义式+逆元。</p>
<p>时间复杂度为$O(NlogN)$</p>
<p>注：$i!的逆元\equiv(i-1)!的逆元·i的逆元(mod\quad p)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>,mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> fact[N],infact[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r = (ll)r*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = (ll)a*a%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">        fact[i] = (ll)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">        infact[i] = (ll)infact[i<span class="number">-1</span>]*qmi(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(ll)fact[a]*infact[b]%mod*infact[a-b]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-组合数III"><a href="#3-组合数III" class="headerlink" title="3.组合数III"></a>3.组合数III</h2><p>数据范围：</p>
<p>$1≤n≤20,$<br>$1≤b≤a≤10^{18},$<br>$1≤p≤10^5$</p>
<p>分析：输入数据量很少，但是每组的数据都要比前两题大很多。考虑定义式+逆元+lucas。主要是利用lucas定理将$a$和$b$化小。</p>
<p>$lucas定理：C_a^b=C_{a/p}^{b/p}·C_{a\%p}^{b\%p}(mod \quad p)$</p>
<p>时间复杂度为$O(log_pN·plogp)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r = (ll)r*a%p;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = (ll)a*a%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b&gt;a)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>,j = a;i&lt;=b;i++,j--)&#123;</span><br><span class="line">        r = (ll)r*j%p;</span><br><span class="line">        r = (ll)r*qmi(i,p<span class="number">-2</span>)%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lucas</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; p &amp;&amp; b &lt; p)<span class="keyword">return</span> C(a,b);</span><br><span class="line">    <span class="keyword">return</span> (ll)C(a%p,b%p)*lucas(a/p,b/p)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;lucas(a,b)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-组合数IV"><a href="#4-组合数IV" class="headerlink" title="4.组合数IV"></a>4.组合数IV</h2><p>数据范围</p>
<p>$1≤b≤a≤5000$</p>
<p>分析：本题与前三题的区别在于，这题要求出组合数的最后结果，而不是求余之后的结果。</p>
<p>考虑先将结果分解为质因数相乘，在利用高精度得出结果。</p>
<p>证明：$C_a^b=\frac{a!}{b!·(a-b)!}=p_1^{\alpha_1}·p_2^{\alpha_2}···p_n^{\alpha_n},其中p_i为质数,\alpha_i$为每种质因数的个数，$n为N$的质因数种类数</p>
<p>又每个质因数的次数$cnt(a!)=\lfloor\frac{a}{p}\rfloor+\lfloor\frac{a}{p^2}\rfloor+\lfloor\frac{a}{p^3}\rfloor+···$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5010</span>;</span><br><span class="line"><span class="keyword">int</span> primes[N],cnt,sum[N];</span><br><span class="line"><span class="keyword">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_primes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//获取所有质数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            st[primes[j]*i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> p)</span></span>&#123;<span class="comment">//求每个质数的次数</span></span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        r += n/p;</span><br><span class="line">        n /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mul(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a,<span class="keyword">int</span> b)&#123;<span class="comment">//高精度</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line">        t += a[i]*b;</span><br><span class="line">        c.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(t)&#123;</span><br><span class="line">        c.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    get_primes(a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> p = primes[i];</span><br><span class="line">        sum[i] = get(a,p)-get(b,p)-get(a-b,p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    res.push_back(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;cnt;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;sum[i];j++)</span><br><span class="line">            res = mul(res,primes[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = res.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,res[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-满足条件的01序列"><a href="#5-满足条件的01序列" class="headerlink" title="5. 满足条件的01序列"></a>5. 满足条件的01序列</h2><p>卡特兰数：$C_{2n}^n-C_{2n}^{n-1}=\frac{C_{2n}^n}{n+1}$</p>
<p><img alt="2020032210584895.png" data-src="https://cdn.acwing.com/media/article/image/2020/05/13/13653_c0dae9e295-2020032210584895.png"></p>
<p>举个栗子： $n=6$ 时，就可以画成上图，假设向右是0向上是1，则在红线以下的路径是合法的，<strong>可以看出每一条从$(0,0)$走到$(6,6)$的非法路径做关于红线的对称</strong>，都对应一条$(0,0)-(5,7)$的路径；反之，每一条从$(0,0)-(5,7)$的路径都对应一条从$(0,0)-(6,6)$的非法路径，那么就可以利用$(0,0)-(5,7)$的路径数间接求出$(0,0)-(6,6)$的非法路径数。</p>
<p>算法核心：每一条从$(0,0)$走到$(n，n)$的非法路径都对应一条从$(0,0)$走到$(n-1，n+1)$的非法路径，因此合法路径就是<br>因此从$(0,0)$走到$(n，n)$的不合法路径数就是$C_{2n}^{n-1}$ , 即合法的是 $C_{2n}^n-C_{2n}^{n-1} $，化简得 $\frac{C_{2n}^n}{n+1}$，</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)r = (ll)r*a%mod;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = (ll)a*a%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>*n,b = n;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b+<span class="number">1</span>;i&lt;=a;i++)r = (ll)r*i%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=b;i++)r = (ll)r*qmi(i,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    r = (ll)r*qmi(b+<span class="number">1</span>,mod<span class="number">-2</span>)%mod;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;r;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>求组合数时，根据数据的范围以及具体的要求选择合适的方法。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数学知识</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot中后台接受前台传递的对象数组</title>
    <url>/alex-next/2020/04/23/java%E5%90%8E%E7%AB%AF/springboot/springboot%E4%B8%AD%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%97%E5%89%8D%E5%8F%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="springboot中后台接受前台传递的对象数组"><a href="#springboot中后台接受前台传递的对象数组" class="headerlink" title="springboot中后台接受前台传递的对象数组"></a>springboot中后台接受前台传递的对象数组</h1><h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><p><strong>前台部分</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">let student = [&#123;name:<span class="string">"zs"</span>,age:<span class="number">12</span>&#125;,&#123;name:<span class="string">"ls"</span>,age:<span class="number">45</span>&#125;]</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">	type:<span class="string">"post"</span>,</span><br><span class="line">	url:<span class="string">"/filePage/JsonTest"</span>,</span><br><span class="line">	dataType: <span class="string">'json'</span>,</span><br><span class="line">	contentType:<span class="string">"application/json"</span>,</span><br><span class="line">	data:JSON.stringify(student),</span><br><span class="line">	success:function()&#123;</span><br><span class="line">		console.log(<span class="number">12345676</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p><strong>注意</strong>：在ajax中，如果没加contentType:”application/json”，那么data就应该对应的是key-value形式，如：data:”students=”+JSON.stringify(student)；如果加了，那么ajax发送的data就必须是JSON字符串形式。</p>
<p><strong>后台部分</strong></p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/JsonTest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">JsonTest</span><span class="params">(@RequestBody Student[] students)</span> </span>&#123;</span><br><span class="line">	System.out.println(students[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">return</span> Results.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@RequestBody会根据前台json字符串中的key来匹配对应实体类(Student)的属性，再调用实体类的setter方法将值赋给该属性。</p>
<p><strong>实体类</strong> </p>
<p>Student.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Student [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p><strong>前台部分</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	let student = [&#123;name:<span class="string">"zs"</span>,age:<span class="number">12</span>&#125;,&#123;name:<span class="string">"ls"</span>,age:<span class="number">45</span>&#125;]</span><br><span class="line">	$.ajax(&#123;</span><br><span class="line">		type:<span class="string">"post"</span>,</span><br><span class="line">		url:<span class="string">"/filePage/JsonTest"</span>,</span><br><span class="line">		dataType: <span class="string">'json'</span>,</span><br><span class="line"><span class="comment">//		contentType:"application/json",</span></span><br><span class="line">		data:<span class="string">"student="</span>+JSON.stringify(student),</span><br><span class="line">		success:function()&#123;</span><br><span class="line">			console.log(<span class="number">12345676</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>:这里没有加上contentType:”application/json”,所以data要写成key-value形式。</p>
<p><strong>后台部分</strong></p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/JsonTest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">JsonTest</span><span class="params">(String student)</span> </span>&#123;</span><br><span class="line">	System.out.println(student);</span><br><span class="line">	List&lt;Student&gt; students = JSONArray.parseArray(student,Student.class);</span><br><span class="line">	System.out.println(students);</span><br><span class="line">	<span class="keyword">return</span> Results.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：JSONArray是import com.alibaba.fastjson.JSONArray;<br>引入的。pom.xml依赖如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- Json --&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2.58&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>实体类不变。</p>
<p><strong>还有一点注意的是</strong>，两种方式的ajax请求方式一定要是post。</p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>springboot</tag>
        <tag>项目总结</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot笔记</title>
    <url>/alex-next/2020/08/05/java%E5%90%8E%E7%AB%AF/springboot/springboot/</url>
    <content><![CDATA[<p>项目gitee地址</p>
<blockquote>
<p><a href="https://gitee.com/alexander1/springboot_notes.git" target="_blank" rel="noopener">https://gitee.com/alexander1/springboot_notes.git</a></p>
</blockquote>
<h1 id="一、springboot入门-2-1-8"><a href="#一、springboot入门-2-1-8" class="headerlink" title="一、springboot入门(2.1.8)"></a>一、springboot入门(2.1.8)</h1><h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><p><code>SpringBoot</code>的版本仲裁中心</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>spring-boot-starter-web</code>:</strong></p>
<p>​    <code>spring-boot-starter:springboot</code>的场景启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-主程序入口-SpingBootApplication"><a href="#2-主程序入口-SpingBootApplication" class="headerlink" title="2.主程序入口@SpingBootApplication"></a>2.主程序入口@SpingBootApplication</h2><p><code>@SpringBootConfiguration:Springboot</code>的配置类;</p>
<p>​    标注在某个类上，表示这是一个<code>springboot</code>的配置类；</p>
<p>​    <code>@Configuration</code>：配置类上来标注这个注解；</p>
<p>​        配置类———配置文件；配置类也是容器中的一个组件;<code>@Component</code></p>
<p><code>@EnableAutoConfiguration</code>:开启自动配置功能</p>
<p>​    <code>@AutoConfigurationPackage</code>：自动配置包</p>
<p>​        <code>@Import(AutoConfigurationPackages.Registrar.class)</code></p>
<p>​        <code>Spring</code>的底层注解<code>@Import</code>,给容器中导入一个组件；</p>
<p>​        <strong>将主配置类(<code>@SpringBootApplication</code>标注的类)的所在包及下面所有组件扫描到<code>Spring</code>容器中；</strong></p>
<p>​    <code>@Import(AutoConfigurationImportSelector.class)</code></p>
<p>​        给容器导入组件</p>
<p>​        <code>AutoConfigurationImportSelector</code>：将所有需要导入的组件 以全类名的方式返回；这些组件就会被添加到容器中</p>
<p>​        会给容器中导入非常多的自动配置类(<code>xxxAutoConfiguration</code>)；就是给容器中导入这个场景需要的所有组件，并配置好这些组件;</p>
<p>​        有了自动配置类，免去了手动配置的任务</p>
<h2 id="3-项目结构"><a href="#3-项目结构" class="headerlink" title="3.项目结构"></a>3.项目结构</h2><p><code>resources</code>文件中目录结构：</p>
<ul>
<li><code>static</code>:保存所有的静态资源;<code>js css images;(WebContent)</code></li>
<li><code>templates</code>:保存所有的模板页面；(<code>spingboot</code>默认jar包使用嵌入式的Tomcat)</li>
<li><code>application.properties:Springboot</code>应用的配置文件</li>
</ul>
<h1 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h1><h2 id="1-YAML语法"><a href="#1-YAML语法" class="headerlink" title="1.YAML语法"></a>1.YAML语法</h2><p>K:V表示一对键值对(空格必须有)</p>
<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据都是同一层级的</p>
<h2 id="2-值的写法"><a href="#2-值的写法" class="headerlink" title="2.值的写法"></a>2.值的写法</h2><h3 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h3><p>​    k:v：字面直接来写；</p>
<p>​            字符串默认不用加上单引号或者双引号</p>
<p>​            “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表达的意思</p>
<p>​            ‘’：单引号,会转移特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<h3 id="对象、Map（属性和值）（键值对）"><a href="#对象、Map（属性和值）（键值对）" class="headerlink" title="对象、Map（属性和值）（键值对）"></a>对象、Map（属性和值）（键值对）</h3><p>​    k:v：</p>
<p>​            对象还是K:V的方式</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">	<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">	<span class="attr">age:</span> <span class="number">13</span></span><br></pre></td></tr></table></figure>
<p>行内写法</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">friends: &#123;lastName: zhangsan,age: 18&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数组（List、Set）"><a href="#数组（List、Set）" class="headerlink" title="数组（List、Set）"></a>数组（List、Set）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pets:</span><br><span class="line">	- cat</span><br><span class="line">	- dog</span><br><span class="line">	- pig</span><br></pre></td></tr></table></figure>
<p>行内写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pets: [cat,dog,pig]</span><br></pre></td></tr></table></figure>
<h2 id="3-配置文件注入"><a href="#3-配置文件注入" class="headerlink" title="3.配置文件注入"></a>3.配置文件注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//必须注册为组件，才能够运用ConfigurationProperties</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>导入<code>spring-boot-configuration-processor</code>，就有提示</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>application.yml:</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">zhangsan</span></span><br></pre></td></tr></table></figure>
<p>build在idea中，IDEA maven项目默认不会把src下除<code>java</code>文件外的文件打包到<code>classes</code>文件夹下包含<code>**/*.xml,**/*.properties,**/*.yml</code>,所以要加上build语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        IDEA maven项目默认不会把src下除java文件外的文件打包到classes文件夹下</span></span><br><span class="line"><span class="comment">                包含**/*.xml,**/*.properties,**/*.yml</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用idea时，有些奇奇怪怪的错误，其实不是代码写错了，是idea有时候target下没有生成相应的编译文件</p>
<h2 id="4-Value获取值和-ConfigurationProperties的区别"><a href="#4-Value获取值和-ConfigurationProperties的区别" class="headerlink" title="4.@Value获取值和@ConfigurationProperties的区别"></a>4.@Value获取值和@ConfigurationProperties的区别</h2><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定(松散语法)</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
</div>
<p>配置文件yml和properties都能获取到值；</p>
<p>如果只需要配置文件中的某项值，使用@Value</p>
<p>如果专门编写了一个JavaBean来和配置文件进行映射时，就直接使用<code>@ConfigurationProperties</code></p>
<h2 id="5-PropertySource和-ImportResource"><a href="#5-PropertySource和-ImportResource" class="headerlink" title="5.@PropertySource和@ImportResource"></a>5.@PropertySource和@ImportResource</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.spring.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: alex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/8/6 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.spring"</span>)</span><br><span class="line"><span class="comment">//设置配置文件,必须配置在有@Component的类上</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span><span class="comment">//首选</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">"ls"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@ImportResource</code>:导入Spring的配置文件，让配置文件里面的内容生效。</p>
<p>SpringBoot里面没有Spring的配置文件，自己编写的配置文件，不能自动识别；想让Spring的配置文件键生效；<code>@ImportResource</code>标注在主配置类上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line">导入Spring的配置文件</span><br></pre></td></tr></table></figure>
<p>SpringBoot推荐给容器添加组件的方式：</p>
<p>1.配置类==&gt;Spring配置文件</p>
<p>2.使用@Bean给容器添加组件</p>
<h2 id="6-Profile"><a href="#6-Profile" class="headerlink" title="6.Profile"></a>6.Profile</h2><h3 id="1-多Profile文件"><a href="#1-多Profile文件" class="headerlink" title="1.多Profile文件"></a>1.多Profile文件</h3><p>编写主配置文件时，文件名可以是 application-{profile}.properties/yml</p>
<p>默认使用<code>application.properties</code>的配置</p>
<h3 id="2-yml支持多文档块方式"><a href="#2-yml支持多文档块方式" class="headerlink" title="2.yml支持多文档块方式"></a>2.yml支持多文档块方式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line"><span class="attr">  id:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">张三$&#123;random.uuid&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">prod</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#---在hexo转换.md为.html文件时会报错，所以先注释掉，---在yaml中是分页符</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>
<h3 id="3-激活指定Profile"><a href="#3-激活指定Profile" class="headerlink" title="3.激活指定Profile"></a>3.激活指定Profile</h3><p>1.配置文件中指定<code>spring.profiles.active=dev</code></p>
<p>2.命令行：</p>
<p>​        <code>--spring.profiles.active=dev</code>，可以配置在程序参数</p>
<p>​        <code>java -jar springboot-02-config-0.0.1-SNAPSHOT.jar --spring.profiles.active=dev</code></p>
<p>​        可以直接在测试的时候，配置传入命令行参数</p>
<p>3.虚拟机参数：</p>
<p>​        <code>-Dspring.profiles.active=dev</code></p>
<h2 id="7-配置文件的加载位置"><a href="#7-配置文件的加载位置" class="headerlink" title="7.配置文件的加载位置"></a>7.配置文件的加载位置</h2><p>！！！idea没有图标，没有自动提示就删掉（包括resources），重新创建<code>application.properties</code></p>
<p><code>file:./config/</code></p>
<p><code>file:./</code></p>
<p><code>classpath:./config/</code></p>
<p><code>classpath:./</code></p>
<p>优先级由高到低，高优先级的配置会覆盖低优先级的配置；</p>
<p>SpringBoot会从这四个位置加载全部主配配置文件</p>
<p>注意：file:./指项目路径，如果在聚合项目中，file:./指的是父项目，而不是子项目</p>
<p>可以通过<code>spring.config.location</code>改变默认文件的位置</p>
<p><code>java -jar springboot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=D:/</code></p>
<h2 id="8-外部配置加载顺序"><a href="#8-外部配置加载顺序" class="headerlink" title="8.外部配置加载顺序"></a>8.外部配置加载顺序</h2><p><img alt="order" data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153438.png"></p>
<p>参考官方文档</p>
<h2 id="9-自动配置原理"><a href="#9-自动配置原理" class="headerlink" title="9.自动配置原理"></a>9.自动配置原理</h2><h3 id="1-自动配置原理："><a href="#1-自动配置原理：" class="headerlink" title="1.自动配置原理："></a><strong>1.自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能@EnableAutoConfiguration</p>
<p>2）、<code>@EnableAutoConfiguration</code>作用</p>
<ul>
<li><p>利用<code>AutoConfigurationImportSelector</code>给容器中导入一些组件</p>
</li>
<li><p>可以查看<code>selectImports().getAutoConfigurationEntry()</code>方法的内容</p>
</li>
<li><p><code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes)</code>;</p>
<ul>
<li><p><code>SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),getBeanClassLoader())</code>;<br>扫描所有jar包类路径下的 META-INF/spring.factories<br>把扫描到的这些文件的内容包装成properties对象<br>从properties中获取到<code>EnableAutoConfiguration.class</code>类对应的值，然后把它们添加在容器中</p>
<p>将类路径下<code>META-INF/spring.factories</code>里面配置的所有<code>EnableAutoConfiguration</code>的值添加到了容器中</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Auto Configure </span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span><br></pre></td></tr></table></figure>
<p>​         每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中；用他们来做自动配置</p>
<p>3）、每一个自动配置类进行自动配置功能；</p>
<p>4）、以<strong><code>HttpEncodingAutoConfiguration</code></strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//表示这是一个配置类，和配置文件一样，可以为容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties.class)<span class="comment">//启动指定类的ConfigurationProperties功能，将配置文件中对应的值和HttpEncodingAutoConfiguration绑定起来；并把HttpProperties加入的IOC容器中</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = ConditionalOnWebApplication.Type.SERVLET)<span class="comment">//Spring底层@Conditional注解，根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；   判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter.class)<span class="comment">//判断当前项目有没有这个类,CharacterEncodingFilter:SpringMVC进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)<span class="comment">//判断配置文件中是否存在某个配置  spring.http.encoding.enabled;如果不存在，判断也是成立的，即使不配置spring.http.encoding.enabled,也是默认生效的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据当前不同的条件判断，决定这个配置类是否生效</p>
<p>一旦这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性从对应的properties类中获取，这些类的每一个属性是和主配置文件绑定的。</p>
<p>5）、所有在配置文件中能配置的属性都在xxxProperties中封装着</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Whether logging of (potentially sensitive) request details at DEBUG and TRACE level</span></span><br><span class="line"><span class="comment">	 * is allowed.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> logRequestDetails;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * HTTP encoding properties.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Encoding encoding = <span class="keyword">new</span> Encoding();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>精髓：</p>
<p>​        1）、Springboot启动会加载大量的自动配置类</p>
<p>​        2）、先看需要的功能有没有Springboot默认写好的自动配置类；</p>
<p>​        3）、再看自动配置类中配置了哪些组件（只要有要用的组件，就不需要配置）</p>
<p>​        4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的值；</p>
<p>xxxxAutoCOnfiguration:自动配置类；</p>
<p>给容器中自动添加组件</p>
<p>xxxxProperties：封装配置文件中相关属性；</p>
<h3 id="2-细节"><a href="#2-细节" class="headerlink" title="2.细节"></a>2.细节</h3><h4 id="1-Conditional派生注解-Spring注解版原生的-Conditional作用"><a href="#1-Conditional派生注解-Spring注解版原生的-Conditional作用" class="headerlink" title="1.@Conditional派生注解(Spring注解版原生的@Conditional作用)"></a>1.@Conditional派生注解(Spring注解版原生的@Conditional作用)</h4><p>作用：必须是<code>@Conditional</code>指定的条件成立，才给容器中添加组件，配置类里面的所有内容才生效；</p>
<p><strong>自动配置类必须在一定条件下才能生效；</strong></p>
<p>怎么才能知道那些配置类能够生效；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>在application.properties添加debug=true</p>
<h1 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h1><h2 id="1-日志框架"><a href="#1-日志框架" class="headerlink" title="1.日志框架"></a>1.日志框架</h2><p>市面上的日志框架；</p>
<p>JUL；<del>JCl(commons-logging)</del>；<del>Jboss-logging</del>；logback；log4j；slf4j；log4j2</p>
<p>高亮的是抽象层，其他是具体的实现</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL</p>
<p>​            SpringBoot选用的是slf4j和logback</p>
<h2 id="2-SLF4J使用"><a href="#2-SLF4J使用" class="headerlink" title="2.SLF4J使用"></a>2.SLF4J使用</h2><h3 id="1-如何在系统中使用SLF4J"><a href="#1-如何在系统中使用SLF4J" class="headerlink" title="1.如何在系统中使用SLF4J"></a>1.如何在系统中使用SLF4J</h3><p>开发的时候，不应该直接调用日志的实现类，而是调用日志抽象层的方法。</p>
<p>给系统导入slf4j的jar和logback的实现jar</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">        logger.info(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每一个日志的实现框架都有自己的配置文件。使用slf4j后，<strong>配置文件还是做成日志实现框架本身的配置文件；</strong></p>
<h3 id="2-遗留问题"><a href="#2-遗留问题" class="headerlink" title="2.遗留问题"></a>2.遗留问题</h3><p>统一日志记录，即使是别的框架统一一起使用slf4j</p>
<p>1.将系统中其它日志框架先排除出去；</p>
<p>2.用中间包来替换原有的日志框架；</p>
<p>3.导入slf4j其他的实现</p>
<h2 id="3-SpringBoot日志关系"><a href="#3-SpringBoot日志关系" class="headerlink" title="3.SpringBoot日志关系"></a>3.SpringBoot日志关系</h2><p>如果要引入其他框架，一定要把这个框架的默认日志依赖移除掉；</p>
<p>SpringBoot能自动配置所有的日志，底层使用的是slf4j+logback方式记录日志。</p>
<h2 id="4-日志使用"><a href="#4-日志使用" class="headerlink" title="4.日志使用"></a>4.日志使用</h2><h3 id="1-默认"><a href="#1-默认" class="headerlink" title="1.默认"></a>1.默认</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//        System.out.println();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志的级别：</span></span><br><span class="line">    <span class="comment">//由低到高 trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line">    <span class="comment">//调整输出的日志级别：日志就只会在这个级别以后的高级别生效</span></span><br><span class="line">    logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">    logger.debug(<span class="string">"这是debug信息..."</span>);</span><br><span class="line">    logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">    logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">    logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置日志级别</span></span><br><span class="line"><span class="meta">logging.level.com.springboot</span>=<span class="string">trace</span></span><br><span class="line"><span class="comment">#在当前项目下生成日志</span></span><br><span class="line"><span class="meta">logging.file</span>=<span class="string">springboot.log</span></span><br><span class="line"><span class="comment">#在控制台输出的日志格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"><span class="comment">#指定文件中输出日志格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd&#125; ==main== [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>
<h3 id="2-指定配置"><a href="#2-指定配置" class="headerlink" title="2.指定配置"></a>2.指定配置</h3><p>给类路径上放上每个日志框架自己的配置文件，就不使用SpringBoot的默认配置了；</p>
<p><code>logback.xml</code>：直接就会被日志框架识别了,所以需要改名</p>
<p><code>logback-spring.xm</code>l:日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以试用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span>&gt;</span><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="5-切换日志框架"><a href="#5-切换日志框架" class="headerlink" title="5.切换日志框架"></a>5.切换日志框架</h2><h1 id="四、Web开发"><a href="#四、Web开发" class="headerlink" title="四、Web开发(*)"></a>四、Web开发(*)</h1><h2 id="1-SpringBoot对静态资源的配置规则"><a href="#1-SpringBoot对静态资源的配置规则" class="headerlink" title="1.SpringBoot对静态资源的配置规则"></a>1.SpringBoot对静态资源的配置规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> WelcomePageHandlerMapping <span class="title">welcomePageHandlerMapping</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">			WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> WelcomePageHandlerMapping(</span><br><span class="line">					<span class="keyword">new</span> TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(),</span><br><span class="line">					<span class="keyword">this</span>.mvcProperties.getStaticPathPattern());</span><br><span class="line">			welcomePageHandlerMapping.setInterceptors(getInterceptors());</span><br><span class="line">			<span class="keyword">return</span> welcomePageHandlerMapping;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>1）、所有/webjars/**，都去<code>classpath:/META-INF/resources/webjars/</code>找资源；</p>
<p>webjars：以jar包的方式引入静态资源</p>
<p>2）、”/**”访问静态资源的任何路径（静态资源的文件夹）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;classpath:/META-INF/resources/&quot;,</span><br><span class="line">&quot;classpath:/resources/&quot;,</span><br><span class="line">&quot;classpath:/static/&quot;,</span><br><span class="line">&quot;classpath:/public/&quot;,</span><br><span class="line">&quot;/&quot;:当前项目的根路径， release2.1.8没有发现根路径</span><br><span class="line">优先级：</span><br><span class="line">META-INF&gt;resources&gt;static&gt;public</span><br></pre></td></tr></table></figure>
<p><a href="http://localhost:8080/asserts/js/jquery-3.2.1.slim.min.js" target="_blank" rel="noopener">http://localhost:8080/asserts/js/jquery-3.2.1.slim.min.js</a></p>
<p>3）、欢迎页；静态资源文件夹下的所有index.html页面；被”/**”映射；</p>
<p>localhost:8080/  找index</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Resource <span class="title">getIndexHtml</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.resourceLoader.getResource(location + <span class="string">"index.html"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>templates下的index.html也可以找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;classpath:/resources/index.html&quot;,</span><br><span class="line">&quot;classpath:/static/index.html&quot;,</span><br><span class="line">&quot;classpath:/public/index.html&quot;,</span><br><span class="line">&quot;classpath:/templates/index.html&quot;</span><br></pre></td></tr></table></figure>
<p>优先级从上到下，由高到低</p>
<p>4）、所有的**/favicon.ico都是在静态文件夹下找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">		<span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"spring.mvc.favicon.enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FaviconConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="title">FaviconConfiguration</span><span class="params">(ResourceProperties resourceProperties)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Bean</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> SimpleUrlHandlerMapping <span class="title">faviconHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				SimpleUrlHandlerMapping mapping = <span class="keyword">new</span> SimpleUrlHandlerMapping();</span><br><span class="line">				mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>);</span><br><span class="line">				mapping.setUrlMap(Collections.singletonMap(<span class="string">"**/favicon.ico"</span>, faviconRequestHandler()));</span><br><span class="line">				<span class="keyword">return</span> mapping;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="meta">@Bean</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> ResourceHttpRequestHandler <span class="title">faviconRequestHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				ResourceHttpRequestHandler requestHandler = <span class="keyword">new</span> ResourceHttpRequestHandler();</span><br><span class="line">				requestHandler.setLocations(resolveFaviconLocations());</span><br><span class="line">				<span class="keyword">return</span> requestHandler;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="function"><span class="keyword">private</span> List&lt;Resource&gt; <span class="title">resolveFaviconLocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				String[] staticLocations = getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">				List&lt;Resource&gt; locations = <span class="keyword">new</span> ArrayList&lt;&gt;(staticLocations.length + <span class="number">1</span>);</span><br><span class="line">				Arrays.stream(staticLocations).map(<span class="keyword">this</span>.resourceLoader::getResource).forEach(locations::add);</span><br><span class="line">				locations.add(<span class="keyword">new</span> ClassPathResource(<span class="string">"/"</span>));</span><br><span class="line">				<span class="keyword">return</span> Collections.unmodifiableList(locations);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>所有的**/favicon.ico都是在静态文件夹下找</p>
<p><strong>这个功能感觉有时候会不太好使</strong>，可以再试试关闭默认图标</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭默认图标</span></span><br><span class="line"><span class="comment">#spring.mvc.favicon.enabled=false</span></span><br></pre></td></tr></table></figure>
<h2 id="2-模板引擎"><a href="#2-模板引擎" class="headerlink" title="2.模板引擎"></a>2.模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf </p>
<p>SpringBoot推荐的Thymeleaf ：</p>
<p>语法更简单、功能更强大</p>
<h3 id="1-引入Thymeleaf"><a href="#1-引入Thymeleaf" class="headerlink" title="1.引入Thymeleaf"></a>1.引入Thymeleaf</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>springboot2.x版本后默认使用Thymeleaf3</p>
<h3 id="2-thymeleaf使用"><a href="#2-thymeleaf使用" class="headerlink" title="2.thymeleaf使用"></a>2.thymeleaf使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    <span class="comment">//只要放在classpath:/templates/下，thymeleaf就能够渲染页面了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<p>1.导入thymeleaf的名称空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-语法规则"><a href="#3-语法规则" class="headerlink" title="3.语法规则"></a>3.语法规则</h2><p>1）、th:任意html，替换原生的属性</p>
<p>2）、表达式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>名称</th>
<th>描述</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>${…}</td>
<td>Variable Expressions</td>
<td>变量表达式</td>
<td>取出上下文变量的值</td>
</tr>
<tr>
<td>*{…}</td>
<td>Selection Variable Expressions</td>
<td>选择变量表达式</td>
<td>取出选择的对象的属性值</td>
</tr>
<tr>
<td>#{…}</td>
<td>Message Expressions</td>
<td>消息表达式</td>
<td>使文字消息国际化，I18N</td>
</tr>
<tr>
<td>@{…}</td>
<td>Link URL Expressions</td>
<td>链接表达式</td>
<td>用于表示各种超链接地址</td>
</tr>
<tr>
<td>~{…}</td>
<td>Fragment Expressions</td>
<td>片段表达式</td>
<td>引用一段公共的代码片段</td>
</tr>
</tbody>
</table>
</div>
<p>${…}: </p>
<p>1）、获取对象的属性、调用方法；</p>
<p>2）、使用内置的对象 </p>
<p>3）、使用内置的一些工具对象</p>
<p>*{…}:和${…}在功能上一致</p>
<h2 id="4-SpringMVC自动配置原理"><a href="#4-SpringMVC自动配置原理" class="headerlink" title="4.SpringMVC自动配置原理"></a>4.SpringMVC自动配置原理</h2><p>SpringBoot自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认配置：</p>
<ul>
<li><p>自动配置了视图解析器ViewResolver(根据方法的返回值得到视图对象)</p>
<ul>
<li><p><code>ContentNegotiatingViewResolver</code>；组合了所有的视图解析器</p>
</li>
<li><p>如何定制：可以自己个容器中添加一个视图解析器，自动的将其组合进来</p>
</li>
</ul>
</li>
<li><p>自动注册了<code>Converter,GenericConverter，Formatter</code></p>
<p>自己添加的格式化器转换器，只需要放在容器中即可</p>
</li>
<li><p><code>HttpMessageConverter:SpringMVC</code>用来转换http请求和相应的;user—-json;</p>
<p>自己添加的HttpMessageConverter，只需要放在容器中即可</p>
</li>
<li><p><code>MessageCodesResolver</code>:定义错误代码生成规则</p>
</li>
<li><code>ConfigurableWebBindingInitializer</code>:初始化<code>WebDataBinder</code>,请求数据==&gt;JavaBean</li>
</ul>
<h2 id="5-如何修改SpringBoot的默认配置"><a href="#5-如何修改SpringBoot的默认配置" class="headerlink" title="5.如何修改SpringBoot的默认配置"></a>5.如何修改SpringBoot的默认配置</h2><p>模式：</p>
<p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（<code>@Bean</code>，<code>@Component</code>）；如果有就用用户配置的如果没有，才自动配置；如果有些组件可以有多个（<code>VIewResolver</code>）将用户配置的和自己默认的组合起来；</p>
<p>​    2）、扩展SpringMVC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//alt+shift+p快速实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/add"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容器中所有的<code>WebMvcConfigurer</code>都会起作用</p>
<p>3）、Springboot中有非常多的xxxConfigurer，用它进行额外配置</p>
<p>4）、Springboot中有非常多的xxxCustomizer，用它进行额外配置</p>
<h2 id="6-RESTFUL-crud"><a href="#6-RESTFUL-crud" class="headerlink" title="6.RESTFUL crud(*)"></a>6.RESTFUL crud(*)</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"><span class="comment">//alt+shift+p快速实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/abc"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">        registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addViewController(<span class="string">"/login.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p>SpringMVC:</p>
<p>1）、编写国际化配置文件；</p>
<p>2）、使用<code>ResourceBundleMessageSource</code>管理国际化资源文件</p>
<p>3）、在页面使用fmt：message取出国际化内容</p>
<p>步骤：</p>
<p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p>
<p>2）、Springboot自动配置好了管理国际化资源文件的组件；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(value = MessageSource.class, search = SearchStrategy.CURRENT)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Conditional</span>(ResourceBundleCondition.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.messages"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）、去页面获取国际化的值；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login.html(l='zh_CN')&#125;"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/login.html(l='en_US')&#125;"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>4）、注册<code>LocaleResolver</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>],split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3）、登录"><a href="#3）、登录" class="headerlink" title="3）、登录(*)"></a>3）、登录(*)</h3><p>开发期间要想页面修改后实时生效</p>
<p>1.禁用模板引擎的缓存</p>
<p>2.ctrl+F9,重新编译</p>
<p>登录错误消息的提示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>登陆成功跳转的时候应该用重定向</p>
<h4 id="重定向："><a href="#重定向：" class="headerlink" title="重定向："></a>重定向：</h4><p><img alt="重定向" data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153405.png"></p>
<p>重定向时，正确的静态资源访问:</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153413.png"></p>
<p>重定向可以跳转到相应的静态资源包下的html文件，但跳不到templates里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目中静态资源包:</span><br><span class="line">1.classpath:/resources/</span><br><span class="line">2.classpath:/static/</span><br><span class="line">3.classpath:/public/</span><br></pre></td></tr></table></figure>
<h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发:"></a>请求转发:</h4><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153416.png"></p>
<p>请求转发时，错误的静态资源访问：</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153419.png"></p>
<p>由于前面的请求是/user/login，所以不行</p>
<p>当只有一层时，</p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153421.png"></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318153423.png"></p>
<h4 id="总结-以此次项目为例"><a href="#总结-以此次项目为例" class="headerlink" title="总结(以此次项目为例)"></a>总结(以此次项目为例)</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>重定向</th>
<th>请求转发</th>
</tr>
</thead>
<tbody>
<tr>
<td>静态资源访问路径</td>
<td>无论如何都是localhost:8080/crud/xxx.css(项目路径+访问资源的路径)</td>
<td>若原来的请求是/user/login,就是去掉一层目录后的目录,即localhost:8080/crud/user/xxx.css</td>
</tr>
<tr>
<td>地址栏</td>
<td>会变化</td>
<td>不会变化</td>
</tr>
<tr>
<td>哪里跳转</td>
<td>在客户端即浏览器跳转</td>
<td>在服务器内部跳转</td>
</tr>
<tr>
<td>请求域中的数据是否会丢失</td>
<td>会丢失</td>
<td>不会丢失</td>
</tr>
<tr>
<td>请求次数</td>
<td>2次</td>
<td>1次</td>
</tr>
</tbody>
</table>
</div>
<h3 id="4）、拦截器进行登录检查"><a href="#4）、拦截器进行登录检查" class="headerlink" title="4）、拦截器进行登录检查"></a>4）、拦截器进行登录检查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">            registry.addViewController(<span class="string">"/login.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//静态资源;</span></span><br><span class="line">            registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/login.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">"/asserts/**"</span>,<span class="string">"/webjars/**"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一定要注意，springboot 1.5的不需要排除静态资源也可以访问，但是springboot2.x需要排除静态资源才能够访问</p>
<p>  <code>.excludePathPatterns(&quot;/asserts/**&quot;,&quot;/webjars/**&quot;);</code></p>
<h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p>
<p>1）、RestfulCRUD：CRUD满足Rest风格：</p>
<p>URI：/资源名称/资源标识  HTTP请求方式区分对资源CRUD操作</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>普通CRUD（URI区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—-GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—-POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx</td>
<td>emp/{id}—-PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—-DELETE</td>
</tr>
</tbody>
</table>
</div>
<p>2）、实验的请求架构</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>功能</strong></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面(查出员工进行信息会写)</td>
<td>emp/{id}</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/{id}</td>
<td>DELETE</td>
</tr>
</tbody>
</table>
</div>
<p>thymeleaf公共页面抽取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.抽取公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0"</span> <span class="attr">th:fragment</span>=<span class="string">"topbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.使用公共片段</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;dashboard::topbar&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3.默认效果</span><br><span class="line">th:insert的功能片段在div标签中</span><br><span class="line">如果使用th:insert等用法，可以不用写~&#123;&#125;</span><br><span class="line">[[~&#123;&#125;]] ; [(~&#123;&#125;)]</span><br></pre></td></tr></table></figure>
<p>三种引入功能片段的th属性：</p>
<p>th:insert：将公共片段插入到div标签中</p>
<p>th:replace：将声明引入的元素替换为公共片段</p>
<p>th:include：将被引入的片段的内容包含进这个标签中</p>
<p>引入片段的时候传入参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='main.html')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>提交 数据格式不对：生日  日期</p>
<p>2017.12.12   2017-12-12   2017/12/12</p>
<p>日期的格式化：SpringMVC将页面提交的值需要转换为指定的类型</p>
<p>2017-12-12——-Date  类型转换，格式化；</p>
<p>默认日期是按照/的方式，</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.mvc.date-format</span>=<span class="string">yyyy-MM-dd</span></span><br><span class="line"><span class="attr">更改日期格式，但还是只能有一种方式</span></span><br></pre></td></tr></table></figure>
<h2 id="7、错误处理机制"><a href="#7、错误处理机制" class="headerlink" title="7、错误处理机制"></a>7、错误处理机制</h2><h3 id="1、SpringBoot默认的错误处理机制"><a href="#1、SpringBoot默认的错误处理机制" class="headerlink" title="1、SpringBoot默认的错误处理机制"></a>1、SpringBoot默认的错误处理机制</h3><p>原理：</p>
<p>​    可以参照<code>ErrorMvcAutoConfiguration</code>的错误处理自动配置；</p>
<p>​    给容器中添加了一下组件：</p>
<p>​    1、<code>DefaultErrorAttributes</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">帮我们在页面共享信息</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(ServerRequest request, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    errorAttributes.put(<span class="string">"timestamp"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    errorAttributes.put(<span class="string">"path"</span>, request.path());</span><br><span class="line">    Throwable error = getError(request);</span><br><span class="line">    HttpStatus errorStatus = determineHttpStatus(error);</span><br><span class="line">    errorAttributes.put(<span class="string">"status"</span>, errorStatus.value());</span><br><span class="line">    errorAttributes.put(<span class="string">"error"</span>, errorStatus.getReasonPhrase());</span><br><span class="line">    errorAttributes.put(<span class="string">"message"</span>, determineMessage(error));</span><br><span class="line">    handleException(errorAttributes, determineException(error), includeStackTrace);</span><br><span class="line">    <span class="keyword">return</span> errorAttributes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    2、<code>BasicErrorController</code>：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)<span class="comment">//产生html数据,浏览器发出的请求来这个方法处理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		Map&lt;String, Object&gt; model = Collections</span><br><span class="line">				.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">		response.setStatus(status.value());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面；包含页面地址和页面内容</span></span><br><span class="line">		ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">		<span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span><span class="comment">//产生json数据，其他客户端发出的请求来这个方法处理	</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">		Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    3、<code>ErrorPageCustomizer</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;error.path:/error&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String path = <span class="string">"/error"</span>;<span class="comment">//系统出现错误以后来到error请求进行处理；(web.xml注册的错误页面规则)</span></span><br></pre></td></tr></table></figure>
<p>​    4、<code>DefaultErrorViewResolver</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">		ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//默认SpringBoot可以去找到一个页面；error/404</span></span><br><span class="line">		String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析errorViewName指定的视图地址</span></span><br><span class="line">		TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">				<span class="keyword">this</span>.applicationContext);</span><br><span class="line">		<span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面     error/404.html</span></span><br><span class="line">		<span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>​    步骤：</p>
<p>​            一旦系统出现了4xx或5xx之类的错误；<code>ErrorPageCustomizer</code>就会生效（定制错误的相应规则）;就会来到/error请求;就会来到<code>BasicErrorController</code>处理；</p>
<p>​        1）、显示页面；去哪个页面是由<strong><code>DefaultErrorViewResolver</code></strong>解析得到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">			Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">		<span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">			ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">			<span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> modelAndView;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2）、如果定制错误响应"><a href="#2）、如果定制错误响应" class="headerlink" title="2）、如果定制错误响应"></a>2）、如果定制错误响应</h3><h4 id="1）、如何定制错误的页面："><a href="#1）、如何定制错误的页面：" class="headerlink" title="1）、如何定制错误的页面："></a>1）、如何定制错误的页面：</h4><p>​    1）、<strong>有模板引擎的情况下</strong>；error/状态码；</p>
<p>将错误页面命名为  错误状态码.html放在模板引擎文件下的error文件夹下;</p>
<p>发生此错误码的错误就会来到对应的页面；</p>
<p>可以试用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）</p>
<p>也可以将error.html放在templates下</p>
<p>页面能获取的信息:</p>
<p>​                timestamp:时间戳</p>
<p>​                status：状态码</p>
<p>​                error：错误提示</p>
<p>​                exception：错误对象</p>
<p>​                message：异常消息</p>
<p>​                errors：JSR303数据校验的错误都在这里</p>
<p>​    2）、<strong>没有模板引擎（不用模板引擎）</strong>，静态资源文件加下找；</p>
<p>​    3）、<strong>以上都没有</strong>，就是默认来到SpringBoot的error页面；</p>
<h4 id="2）、定制错误的json数据；"><a href="#2）、定制错误的json数据；" class="headerlink" title="2）、定制错误的json数据；"></a>2）、定制错误的json数据；</h4><p>1）、自定义异常处理&amp;返回定制json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器和客户端返回的都是json</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>,<span class="string">"user,not exist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有自适应效果</span></span><br></pre></td></tr></table></figure>
<p>2）、转发到/error进行自适应相应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"code"</span>,<span class="string">"user,not exist"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">    <span class="comment">//转发到/error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3）、定制额外的相应数据，参照P44</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//传入我们自己的错误状态码 4xx 5xx 否则就不会进入定制错误页面的解析流程</span></span><br><span class="line">    request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">400</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>,<span class="string">"user,not exist"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">    <span class="comment">//转发到/error</span></span><br><span class="line">    <span class="comment">//        return "forward:/error";</span></span><br><span class="line">    <span class="comment">//可以调到自定义的页面</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以自定义页面跳转，也能够实现收到额外的相应数据</p>
<h2 id="8、配置嵌入式Servlet容器"><a href="#8、配置嵌入式Servlet容器" class="headerlink" title="8、配置嵌入式Servlet容器"></a>8、配置嵌入式Servlet容器</h2><p>SpringBoot默认是用的嵌入的Servlet容器（Tomcat）；</p>
<p>问题？</p>
<h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>​    1、修改和server有关的配置(ServerProperties[也是<code>EmbeddedServletContainerCustomizer</code>])</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.xxx</span>  <span class="string">#通用的Servlet容器设置</span></span><br><span class="line"><span class="meta">server.tomcat.xxx</span> <span class="string">#tomcat的设置</span></span><br></pre></td></tr></table></figure>
<p>​    2、编写一个<del><code>EmbeddedServletContainerCustomizer</code></del>，2.x后改为<code>WebServerFactoryCustomizer</code>，注入到IOC容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer <span class="title">webServerFactoryCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;ConfigurableWebServerFactory&gt;() &#123;</span><br><span class="line">        <span class="comment">//定制嵌入式的Servlet容器的相关规则</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">            factory.setPort(<span class="number">8080</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于Springboot默认是以jar包的方式启动嵌入式的Servlet容器来启动Springboot的web应用，没有web.xml文件。</p>
<p>注册三大组件用以下方式</p>
<p><code>ServletRegistrationBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet"</span>);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>FilterRegistrationBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistration</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean register = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    <span class="comment">//        register.setFilter(new MyFilter());</span></span><br><span class="line">    register.setUrlPatterns(Arrays.asList(<span class="string">"/hello"</span>,<span class="string">"/myServlet"</span>));</span><br><span class="line">    <span class="keyword">return</span>  register;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ServletListenerRegistrationBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">mylistener</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServletListenerRegistrationBean servletListenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">    <span class="keyword">return</span> servletListenerRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringBoot帮我们自动SpringMVC的时候，自动注册SpringMVC的前端控制器；DispatcherServlet</p>
<p>2）、SpringBoot能不能支持其他的Servlet容器；</p>
<h3 id="3）、替换为其他Servlet容器"><a href="#3）、替换为其他Servlet容器" class="headerlink" title="3）、替换为其他Servlet容器"></a>3）、替换为其他Servlet容器</h3><p>Tomcat（SpringBoot默认使用）</p>
<p>jetty</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>undertow</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-undertow<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4）、原理"><a href="#4）、原理" class="headerlink" title="4）、原理"></a>4）、原理</h3><p><a href="https://note.clboy.cn/#/backend/springboot/configservletcontainer?id=替换为其他嵌入式web服务器" target="_blank" rel="noopener">https://note.clboy.cn/#/backend/springboot/configservletcontainer?id=%e6%9b%bf%e6%8d%a2%e4%b8%ba%e5%85%b6%e4%bb%96%e5%b5%8c%e5%85%a5%e5%bc%8fweb%e6%9c%8d%e5%8a%a1%e5%99%a8</a></p>
<h2 id="9、使用外置的Servlet容器"><a href="#9、使用外置的Servlet容器" class="headerlink" title="9、使用外置的Servlet容器"></a>9、使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p>
<p>​                优点：简单、便携；</p>
<p>​                缺点：默认不支持JSP、优化定制比较复杂</p>
<p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包</p>
<h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><p>1）、必须创建一个war项目</p>
<p>2）、嵌入式的Tomcat指定为provided；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包的时候不会放入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>3）、编写一个<code>SpringBootServletInitializer</code>，并调用configure方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">        <span class="keyword">return</span> builder.sources(SpringbootWebJspApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>jar包：执行SpringBoot主类的main方法，启动IOC容器，创建嵌入式的Servlet容器；</p>
<p>war包：启动服务器，<strong>服务器启动Springboot应用</strong>【<code>SpringBootServletInitializer</code>】，启动IOC容器；</p>
<p>Servlet3.0新规范</p>
<p>规则：</p>
<p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面<code>ServletContainerInitializer</code>实例；</p>
<p>​    2）、<code>ServletContainerInitializer</code>的实现放在jar包的<code>META-INF/services</code>文件夹下，有一个名为<code>javax.servlet.ServletContainerInitializer</code>的文件，内容就是<code>ServletContainerInitializer</code>的实现类的全类名</p>
<p>​    3）、还可以使用<code>@HandlesTypes</code>，在应用启动的时候加载我们感兴趣的类</p>
<p>流程：</p>
<p>1）、启动Tomcat</p>
<p>2）、<code>org\springframework\spring-web\5.1.9.RELEASE\spring-web-5.1.9.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</code></p>
<p>Spring的Web模块里面有这个文件：<strong><code>org.springframework.web.SpringServletContainerInitializer</code></strong></p>
<p>3）、<code>SpringServletContainerInitializer</code>将<code>@HandlesTypes(WebApplicationInitializer.class)</code>必做主的所有这个类型的类传入到onStartup方法的<code>Set&lt;Class&lt;?&gt;&gt;</code>;为这些<code>WebApplicationInitializer</code>类型的类创建实例；</p>
<p>4）、每一个<code>WebApplicationInitializer</code>都调用自己的onStartup;【<code>SpringBootServletInitializer</code>】</p>
<p>5）、相当于<code>SpringBootServletInitializer</code>的类会被创建对象，并执行onStartup方法；</p>
<p>6）、<code>SpringBootServletInitializer</code>执行onStartup会<code>createRootApplicationContext</code>创建容器；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> WebApplicationContext <span class="title">createRootApplicationContext</span><span class="params">(ServletContext servletContext)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建SpringApplicationBuilder</span></span><br><span class="line">    SpringApplicationBuilder builder = createSpringApplicationBuilder();</span><br><span class="line">    builder.main(getClass());</span><br><span class="line">    ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">        servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="keyword">null</span>);</span><br><span class="line">        builder.initializers(<span class="keyword">new</span> ParentContextApplicationContextInitializer(parent));</span><br><span class="line">    &#125;</span><br><span class="line">    builder.initializers(<span class="keyword">new</span> ServletContextApplicationContextInitializer(servletContext));</span><br><span class="line">    builder.contextClass(AnnotationConfigServletWebServerApplicationContext.class);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//2.调用configure,子类重写了这个方法,将SpringBoot的主程序类传了进来</span></span><br><span class="line">    builder = configure(builder);</span><br><span class="line">    builder.listeners(<span class="keyword">new</span> WebEnvironmentPropertySourceInitializer(servletContext));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.使用builder创建一个Spring应用</span></span><br><span class="line">    SpringApplication application = builder.build();</span><br><span class="line">    <span class="keyword">if</span> (application.getAllSources().isEmpty()</span><br><span class="line">        &amp;&amp; AnnotationUtils.findAnnotation(getClass(), Configuration.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(getClass()));</span><br><span class="line">    &#125;</span><br><span class="line">    Assert.state(!application.getAllSources().isEmpty(),</span><br><span class="line">                 <span class="string">"No SpringApplication sources have been defined. Either override the "</span></span><br><span class="line">                 + <span class="string">"configure method or add an @Configuration annotation"</span>);</span><br><span class="line">    <span class="comment">// Ensure error pages are registered</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.registerErrorPageFilter) &#123;</span><br><span class="line">        application.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration.class));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4.启动SpringBootApplication</span></span><br><span class="line">    <span class="keyword">return</span> run(application);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7）、Spring的应用就启动了,并创建IOC容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(SpringBootExceptionReporter.class,</span><br><span class="line">                                                         <span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass).logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.started(context);</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10、日期处理-后台数据返回前台（-）"><a href="#10、日期处理-后台数据返回前台（-）" class="headerlink" title="10、日期处理+后台数据返回前台（*）"></a>10、日期处理+后台数据返回前台（*）</h2><h3 id="1）、多写一个get方法"><a href="#1）、多写一个get方法" class="headerlink" title="1）、多写一个get方法"></a>1）、多写一个get方法</h3><p>person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line">    Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name, Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth_test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(<span class="keyword">this</span>.birth);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Timestamp birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PersonController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PersonServiceImpl personService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/getAllPersons"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getAllPersons</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> personService.getAllPersons();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回给浏览器的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"name"</span>:<span class="string">"zs"</span>,<span class="attr">"birth"</span>:<span class="string">"2020-08-11 00:00:00"</span>,<span class="attr">"birth_test"</span>:<span class="number">1597075200000</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"name"</span>:<span class="string">"ls"</span>,<span class="attr">"birth"</span>:<span class="string">"2020-08-20 00:00:00"</span>,<span class="attr">"birth_test"</span>:<span class="number">1597852800000</span>&#125;,&#123;<span class="attr">"id"</span>:<span class="number">3</span>,<span class="attr">"name"</span>:<span class="string">"ww"</span>,<span class="attr">"birth"</span>:<span class="string">"2020-08-28 00:00:00"</span>,<span class="attr">"birth_test"</span>:<span class="number">1598544000000</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>可以发现，返回的数据名和pojo中的get方法有关,有几个get方法就有几个返回的属性</p>
<p>例：getBirth_test返回birth_test</p>
<h3 id="2）、现在可以直接在属性名上加上"><a href="#2）、现在可以直接在属性名上加上" class="headerlink" title="2）、现在可以直接在属性名上加上"></a>2）、现在可以直接在属性名上加上</h3><p>上面是以前的处理方法</p>
<p>现在的Person.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Integer id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat</span>(timezone = <span class="string">"GMT+8"</span>, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", birth="</span> + birth +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Integer id, String name, Date birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public String getBirth() &#123;</span></span><br><span class="line"><span class="comment">//        return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(this.birth);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Timestamp birth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat</span>(timezone = <span class="string">"GMT+8"</span>, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br></pre></td></tr></table></figure>
<p>或者在配置文件中配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="meta">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br></pre></td></tr></table></figure>
<h3 id="3）、sql语句转换"><a href="#3）、sql语句转换" class="headerlink" title="3）、sql语句转换"></a>3）、sql语句转换</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATE_FORMAT</span>( b.book_start_time,<span class="string">'%Y-%m-%d %H:%i:%s'</span>) book_start_time</span><br></pre></td></tr></table></figure>
<h3 id="4）、前台转换"><a href="#4）、前台转换" class="headerlink" title="4）、前台转换"></a>4）、前台转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">templet: <span class="string">'&lt;div&gt;&#123;&#123; layui.laytpl.toDateString(d.createTime) &#125;&#125;&lt;/div&gt;'</span></span><br></pre></td></tr></table></figure>
<h3 id="5）、常用日期时间类"><a href="#5）、常用日期时间类" class="headerlink" title="5）、常用日期时间类"></a>5）、常用日期时间类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.sql.Date date1 = <span class="keyword">new</span> java.sql.Date(<span class="keyword">new</span> java.util.Date().getTime());</span><br><span class="line">LocalDate localDate = date1.toLocalDate();</span><br><span class="line">System.out.println(localDate);<span class="comment">//2020-08-12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Calendar日期类</span></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String format = dateFormat.format(calendar.getTimeInMillis());</span><br><span class="line">Timestamp timestamp = Timestamp.valueOf(format);</span><br><span class="line">System.out.println(timestamp);<span class="comment">//2020-08-12 13:35:57.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最新的日期类LocalDateTime、LocalDate、LocalTime</span></span><br><span class="line">LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">System.out.println(localDateTime);<span class="comment">//2020-08-12T13:35:57.127</span></span><br><span class="line">DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String format1 = dateTimeFormatter.format(localDateTime);</span><br><span class="line">System.out.println(format1);<span class="comment">//2020-08-12 13:35:57</span></span><br><span class="line">Timestamp timestamp1 = Timestamp.valueOf(format1);</span><br><span class="line">Timestamp timestamp2 = Timestamp.valueOf(localDateTime);</span><br><span class="line"></span><br><span class="line">System.out.println(timestamp1);<span class="comment">//2020-08-12 13:35:57.0</span></span><br><span class="line">System.out.println(timestamp2);<span class="comment">//2020-08-12 13:35:57.127</span></span><br></pre></td></tr></table></figure>
<h2 id="11、日期处理-前台的数据传给后台（-）"><a href="#11、日期处理-前台的数据传给后台（-）" class="headerlink" title="11、日期处理+前台的数据传给后台（*）"></a>11、日期处理+前台的数据传给后台（*）</h2><p><strong>前台传给后台日期的字符串，后台是无法用Date来映射的，要自己编写一个类型转换器，放入容器中</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.custhitachi.managerment.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (source.equals(<span class="string">""</span>)) &#123;</span><br><span class="line">			System.out.println(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">			Date date = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				date = simpleDateFormat.parse(source);</span><br><span class="line">			&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> date;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>或者入参的时候加上<code>@DateTimeFormat</code></strong></p>
<p>也可以直接加在属性上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>,timezone=<span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> Date symstarttime;</span><br></pre></td></tr></table></figure>
<h2 id="12、在tomcat运行war"><a href="#12、在tomcat运行war" class="headerlink" title="12、在tomcat运行war"></a>12、在tomcat运行war</h2><h3 id="1、带项目名（静态文件可能会不好使）"><a href="#1、带项目名（静态文件可能会不好使）" class="headerlink" title="1、带项目名（静态文件可能会不好使）"></a>1、带项目名（静态文件可能会不好使）</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318150002.png"></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318150010.png"></p>
<h3 id="2、不带项目名"><a href="#2、不带项目名" class="headerlink" title="2、不带项目名"></a>2、不带项目名</h3><p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318150014.png"></p>
<p><img alt data-src="https://gitee.com/alexander1/pic/raw/master/springboot笔记/20210318150017.png"></p>
<h1 id="五、Docker"><a href="#五、Docker" class="headerlink" title="五、Docker"></a>五、Docker</h1><p>见 <a href="https://alexander-wd.github.io/alex-next/2021/08/29/java%E5%90%8E%E7%AB%AF/Docker%E5%9F%BA%E7%A1%80%E7%AF%87/">docker基础篇</a></p>
]]></content>
      <categories>
        <category>JavaEE</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
</search>
